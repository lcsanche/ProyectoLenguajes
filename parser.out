Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> asignacion
Rule 2     instrucciones -> expression
Rule 3     instrucciones -> funciones
Rule 4     instrucciones -> comparacion
Rule 5     instrucciones -> condicional
Rule 6     instrucciones -> while
Rule 7     instrucciones -> for
Rule 8     instrucciones -> impresion
Rule 9     instrucciones -> input
Rule 10    instrucciones -> callFuncion
Rule 11    instrucciones -> addValueHash
Rule 12    instrucciones -> modValueHash
Rule 13    instrucciones -> deleteValueHash
Rule 14    instrucciones -> insertArray
Rule 15    instrucciones -> deleteArray
Rule 16    instrucciones -> searchStack
Rule 17    instrucciones -> pushStack
Rule 18    instrucciones -> metodoBoleano
Rule 19    instrucciones -> opMatematicas
Rule 20    cuerpo -> asignacion
Rule 21    cuerpo -> expression
Rule 22    cuerpo -> comparacion
Rule 23    cuerpo -> condicional
Rule 24    cuerpo -> impresion
Rule 25    cuerpo -> for
Rule 26    cuerpo -> while
Rule 27    cuerpo -> input
Rule 28    cuerpo -> callFuncion
Rule 29    cuerpo -> addValueHash
Rule 30    cuerpo -> modValueHash
Rule 31    cuerpo -> deleteValueHash
Rule 32    cuerpo -> insertArray
Rule 33    cuerpo -> deleteArray
Rule 34    cuerpo -> pushStack
Rule 35    cuerpo -> searchStack
Rule 36    asignacion -> VARIABLE ASIGN expression
Rule 37    asignacion -> VARIABLE ASIGN comparacion
Rule 38    asignacion -> VARIABLE ASIGN callFuncion
Rule 39    asignacion -> VARIABLE ASIGN diccionario
Rule 40    asignacion -> VARIABLE ASIGN getValueHash
Rule 41    asignacion -> VARIABLE ASIGN array
Rule 42    asignacion -> VARIABLE ASIGN stack
Rule 43    asignacion -> VARIABLE tipo_asignacion factor
Rule 44    asignacion -> VARIABLE ASIGN opMatematicas
Rule 45    tipo_asignacion -> PLUS ASIGN
Rule 46    tipo_asignacion -> MINUS ASIGN
Rule 47    tipo_asignacion -> TIMES ASIGN
Rule 48    tipo_asignacion -> DIVIDE ASIGN
Rule 49    tipo_asignacion -> EXPONENTIATION ASIGN
Rule 50    expression -> term
Rule 51    expression -> boleano
Rule 52    term -> factor
Rule 53    factor -> NUMBER
Rule 54    factor -> STRING
Rule 55    factor -> FLOAT
Rule 56    factor -> VARIABLE
Rule 57    factor -> LPAR expression RPAR
Rule 58    comparacion -> expression comparador expression
Rule 59    comparacion -> expression comparador expression AND comparacion
Rule 60    comparacion -> expression comparador expression OR comparacion
Rule 61    comparacion -> expression AND expression
Rule 62    comparacion -> expression OR expression
Rule 63    comparador -> GREATER
Rule 64    comparador -> GREATER_OR_EQUAL
Rule 65    comparador -> MINOR
Rule 66    comparador -> MINOR_OR_EQUAL
Rule 67    comparador -> ASIGN ASIGN
Rule 68    comparador -> NOT ASIGN
Rule 69    impresion -> PUTS factor
Rule 70    input -> VARIABLE ASIGN GETS
Rule 71    boleano -> TRUE
Rule 72    boleano -> FALSE
Rule 73    diccionario -> LKEY cuerpoHash RKEY
Rule 74    cuerpoHash -> expression ASIGN GREATER expression
Rule 75    cuerpoHash -> expression ASIGN GREATER expression COMMA cuerpoHash
Rule 76    getValueHash -> VARIABLE LCOR expression RCOR
Rule 77    addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression
Rule 78    modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression
Rule 79    deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR
Rule 80    metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR expression RPAR
Rule 81    metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR RPAR
Rule 82    while -> WHILE LPAR comparacion RPAR repCuerpo END
Rule 83    while -> WHILE LPAR comparacion RPAR repCuerpo END while
Rule 84    repCuerpo -> cuerpo
Rule 85    repCuerpo -> cuerpo repCuerpo
Rule 86    parametrosA -> factor
Rule 87    parametrosA -> factor COMMA parametrosA
Rule 88    array -> LCOR parametrosA RCOR
Rule 89    array -> LCOR RCOR
Rule 90    argumentosA -> NUMBER COMMA factor
Rule 91    insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR
Rule 92    deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
Rule 93    for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
Rule 94    for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
Rule 95    vacio -> 
Rule 96    stack -> LCOR parametrosA RCOR
Rule 97    stack -> LCOR vacio RCOR
Rule 98    searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR
Rule 99    pushStack -> VARIABLE POINT PUSH LPAR factor RPAR
Rule 100   opMatematicas -> suma
Rule 101   opMatematicas -> resta
Rule 102   opMatematicas -> multiplicacion
Rule 103   opMatematicas -> division
Rule 104   opMatematicas -> exponenciacion
Rule 105   suma -> VARIABLE PLUS NUMBER
Rule 106   suma -> operadores PLUS operadores
Rule 107   suma -> operadores PLUS opMatematicas
Rule 108   suma -> operadores PLUS LPAR operadores RPAR
Rule 109   suma -> operadores PLUS LPAR opMatematicas RPAR
Rule 110   resta -> VARIABLE MINUS NUMBER
Rule 111   resta -> operadores MINUS operadores
Rule 112   resta -> operadores MINUS opMatematicas
Rule 113   resta -> operadores MINUS LPAR operadores RPAR
Rule 114   resta -> operadores MINUS LPAR opMatematicas RPAR
Rule 115   multiplicacion -> operadores TIMES operadores
Rule 116   multiplicacion -> operadores TIMES LPAR operadores RPAR
Rule 117   multiplicacion -> operadores TIMES LPAR opMatematicas RPAR
Rule 118   division -> operadores DIVIDE operadores
Rule 119   division -> operadores DIVIDE LPAR operadores RPAR
Rule 120   division -> operadores DIVIDE LPAR opMatematicas RPAR
Rule 121   exponenciacion -> operadores EXPONENTIATION operadores
Rule 122   exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores
Rule 123   exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores
Rule 124   operadores -> enteros
Rule 125   operadores -> FLOAT
Rule 126   enteros -> NUMBER
Rule 127   enteros -> MINUS NUMBER
Rule 128   parametros -> VARIABLE
Rule 129   parametros -> VARIABLE COMMA parametros
Rule 130   encabezado -> DEF VARIABLE LPAR RPAR
Rule 131   encabezado -> DEF VARIABLE LPAR parametros RPAR
Rule 132   funciones -> encabezado repCuerpo END
Rule 133   funciones -> encabezado RETURN expression END
Rule 134   funciones -> encabezado repCuerpo RETURN expression END
Rule 135   callFuncion -> VARIABLE LPAR RPAR
Rule 136   callFuncion -> VARIABLE LPAR parametros RPAR
Rule 137   condicional -> IF comparacion D_POINT repCuerpo END
Rule 138   condicional -> IF comparacion D_POINT repCuerpo END cond_else
Rule 139   cond_else -> ELSE D_POINT repCuerpo END

Terminals, with rules where they appear

                     : 95
AND                  : 59 61
ASIGN                : 36 37 38 39 40 41 42 44 45 46 47 48 49 67 67 68 70 74 75 77 78
COMMA                : 75 87 90 129
DEF                  : 130 131
DELETE               : 79
DELETE_AT            : 92
DIVIDE               : 48 118 119 120
DO                   : 93 94
D_POINT              : 137 138 139
ELSE                 : 139
END                  : 82 83 93 94 132 133 134 137 138 139
EXPONENTIATION       : 49 121 122 123
FALSE                : 72
FLOAT                : 55 125
FOR                  : 93 94
GETS                 : 70
GREATER              : 63 74 75
GREATER_OR_EQUAL     : 64
IF                   : 137 138
IN                   : 93 94
INSERT               : 91
LCOR                 : 76 77 78 88 89 96 97
LKEY                 : 73
LPAR                 : 57 79 80 81 82 83 91 92 98 99 108 109 113 114 116 117 119 120 122 123 130 131 135 136
MINOR                : 65
MINOR_OR_EQUAL       : 66
MINUS                : 46 110 111 112 113 114 127
NOT                  : 68
NUMBER               : 53 90 92 93 93 94 94 105 110 126 127
OR                   : 60 62
PLUS                 : 45 105 106 107 108 109
POINT                : 79 80 81 91 92 93 93 94 94 98 99
PUSH                 : 99
PUTS                 : 69
QUESTION             : 80 81
RCOR                 : 76 77 78 88 89 96 97
RETURN               : 133 134
RKEY                 : 73
RPAR                 : 57 79 80 81 82 83 91 92 98 99 108 109 113 114 116 117 119 120 122 123 130 131 135 136
SEARCH               : 98
STRING               : 54
TIMES                : 47 115 116 117
TRUE                 : 71
VARIABLE             : 36 37 38 39 40 41 42 43 44 56 70 76 77 78 79 80 80 81 81 91 92 93 94 98 99 105 110 128 129 130 131 135 136
WHILE                : 82 83
error                : 

Nonterminals, with rules where they appear

addValueHash         : 11 29
argumentosA          : 91
array                : 41
asignacion           : 1 20
boleano              : 51
callFuncion          : 10 28 38
comparacion          : 4 22 37 59 60 82 83 137 138
comparador           : 58 59 60
cond_else            : 138
condicional          : 5 23
cuerpo               : 84 85
cuerpoHash           : 73 75
deleteArray          : 15 33
deleteValueHash      : 13 31
diccionario          : 39
division             : 103
encabezado           : 132 133 134
enteros              : 124
exponenciacion       : 104
expression           : 2 21 36 57 58 58 59 59 60 60 61 61 62 62 74 74 75 75 76 77 77 78 78 79 80 133 134
factor               : 43 52 69 86 87 90 98 99
for                  : 7 25 94
funciones            : 3
getValueHash         : 40
impresion            : 8 24
input                : 9 27
insertArray          : 14 32
instrucciones        : 0
metodoBoleano        : 18
modValueHash         : 12 30
multiplicacion       : 102
opMatematicas        : 19 44 107 109 112 114 117 120 123
operadores           : 106 106 107 108 108 109 111 111 112 113 113 114 115 115 116 116 117 118 118 119 119 120 121 121 122 122 123
parametros           : 129 131 136
parametrosA          : 87 88 96
pushStack            : 17 34
repCuerpo            : 82 83 85 93 94 132 134 137 138 139
resta                : 101
searchStack          : 16 35
stack                : 42
suma                 : 100
term                 : 50
tipo_asignacion      : 43
vacio                : 97
while                : 6 26 83

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expression
    (3) instrucciones -> . funciones
    (4) instrucciones -> . comparacion
    (5) instrucciones -> . condicional
    (6) instrucciones -> . while
    (7) instrucciones -> . for
    (8) instrucciones -> . impresion
    (9) instrucciones -> . input
    (10) instrucciones -> . callFuncion
    (11) instrucciones -> . addValueHash
    (12) instrucciones -> . modValueHash
    (13) instrucciones -> . deleteValueHash
    (14) instrucciones -> . insertArray
    (15) instrucciones -> . deleteArray
    (16) instrucciones -> . searchStack
    (17) instrucciones -> . pushStack
    (18) instrucciones -> . metodoBoleano
    (19) instrucciones -> . opMatematicas
    (36) asignacion -> . VARIABLE ASIGN expression
    (37) asignacion -> . VARIABLE ASIGN comparacion
    (38) asignacion -> . VARIABLE ASIGN callFuncion
    (39) asignacion -> . VARIABLE ASIGN diccionario
    (40) asignacion -> . VARIABLE ASIGN getValueHash
    (41) asignacion -> . VARIABLE ASIGN array
    (42) asignacion -> . VARIABLE ASIGN stack
    (43) asignacion -> . VARIABLE tipo_asignacion factor
    (44) asignacion -> . VARIABLE ASIGN opMatematicas
    (50) expression -> . term
    (51) expression -> . boleano
    (132) funciones -> . encabezado repCuerpo END
    (133) funciones -> . encabezado RETURN expression END
    (134) funciones -> . encabezado repCuerpo RETURN expression END
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (137) condicional -> . IF comparacion D_POINT repCuerpo END
    (138) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (83) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (69) impresion -> . PUTS factor
    (70) input -> . VARIABLE ASIGN GETS
    (135) callFuncion -> . VARIABLE LPAR RPAR
    (136) callFuncion -> . VARIABLE LPAR parametros RPAR
    (77) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (91) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (98) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (99) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (80) metodoBoleano -> . VARIABLE POINT VARIABLE QUESTION LPAR expression RPAR
    (81) metodoBoleano -> . VARIABLE POINT VARIABLE QUESTION LPAR RPAR
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (130) encabezado -> . DEF VARIABLE LPAR RPAR
    (131) encabezado -> . DEF VARIABLE LPAR parametros RPAR
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER

    VARIABLE        shift and go to state 21
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 29
    PUTS            shift and go to state 31
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    DEF             shift and go to state 39
    LPAR            shift and go to state 28
    NUMBER          shift and go to state 30
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    MINUS           shift and go to state 41

    instrucciones                  shift and go to state 1
    asignacion                     shift and go to state 2
    expression                     shift and go to state 3
    funciones                      shift and go to state 4
    comparacion                    shift and go to state 5
    condicional                    shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    impresion                      shift and go to state 9
    input                          shift and go to state 10
    callFuncion                    shift and go to state 11
    addValueHash                   shift and go to state 12
    modValueHash                   shift and go to state 13
    deleteValueHash                shift and go to state 14
    insertArray                    shift and go to state 15
    deleteArray                    shift and go to state 16
    searchStack                    shift and go to state 17
    pushStack                      shift and go to state 18
    metodoBoleano                  shift and go to state 19
    opMatematicas                  shift and go to state 20
    factor                         shift and go to state 22
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    encabezado                     shift and go to state 25
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36
    operadores                     shift and go to state 40
    enteros                        shift and go to state 44

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> asignacion .

    $end            reduce using rule 1 (instrucciones -> asignacion .)


state 3

    (2) instrucciones -> expression .
    (58) comparacion -> expression . comparador expression
    (59) comparacion -> expression . comparador expression AND comparacion
    (60) comparacion -> expression . comparador expression OR comparacion
    (61) comparacion -> expression . AND expression
    (62) comparacion -> expression . OR expression
    (63) comparador -> . GREATER
    (64) comparador -> . GREATER_OR_EQUAL
    (65) comparador -> . MINOR
    (66) comparador -> . MINOR_OR_EQUAL
    (67) comparador -> . ASIGN ASIGN
    (68) comparador -> . NOT ASIGN

    $end            reduce using rule 2 (instrucciones -> expression .)
    AND             shift and go to state 46
    OR              shift and go to state 47
    GREATER         shift and go to state 48
    GREATER_OR_EQUAL shift and go to state 49
    MINOR           shift and go to state 50
    MINOR_OR_EQUAL  shift and go to state 51
    ASIGN           shift and go to state 52
    NOT             shift and go to state 53

    comparador                     shift and go to state 45

state 4

    (3) instrucciones -> funciones .

    $end            reduce using rule 3 (instrucciones -> funciones .)


state 5

    (4) instrucciones -> comparacion .

    $end            reduce using rule 4 (instrucciones -> comparacion .)


state 6

    (5) instrucciones -> condicional .

    $end            reduce using rule 5 (instrucciones -> condicional .)


state 7

    (6) instrucciones -> while .

    $end            reduce using rule 6 (instrucciones -> while .)


state 8

    (7) instrucciones -> for .

    $end            reduce using rule 7 (instrucciones -> for .)


state 9

    (8) instrucciones -> impresion .

    $end            reduce using rule 8 (instrucciones -> impresion .)


state 10

    (9) instrucciones -> input .

    $end            reduce using rule 9 (instrucciones -> input .)


state 11

    (10) instrucciones -> callFuncion .

    $end            reduce using rule 10 (instrucciones -> callFuncion .)


state 12

    (11) instrucciones -> addValueHash .

    $end            reduce using rule 11 (instrucciones -> addValueHash .)


state 13

    (12) instrucciones -> modValueHash .

    $end            reduce using rule 12 (instrucciones -> modValueHash .)


state 14

    (13) instrucciones -> deleteValueHash .

    $end            reduce using rule 13 (instrucciones -> deleteValueHash .)


state 15

    (14) instrucciones -> insertArray .

    $end            reduce using rule 14 (instrucciones -> insertArray .)


state 16

    (15) instrucciones -> deleteArray .

    $end            reduce using rule 15 (instrucciones -> deleteArray .)


state 17

    (16) instrucciones -> searchStack .

    $end            reduce using rule 16 (instrucciones -> searchStack .)


state 18

    (17) instrucciones -> pushStack .

    $end            reduce using rule 17 (instrucciones -> pushStack .)


state 19

    (18) instrucciones -> metodoBoleano .

    $end            reduce using rule 18 (instrucciones -> metodoBoleano .)


state 20

    (19) instrucciones -> opMatematicas .

    $end            reduce using rule 19 (instrucciones -> opMatematicas .)


state 21

    (36) asignacion -> VARIABLE . ASIGN expression
    (37) asignacion -> VARIABLE . ASIGN comparacion
    (38) asignacion -> VARIABLE . ASIGN callFuncion
    (39) asignacion -> VARIABLE . ASIGN diccionario
    (40) asignacion -> VARIABLE . ASIGN getValueHash
    (41) asignacion -> VARIABLE . ASIGN array
    (42) asignacion -> VARIABLE . ASIGN stack
    (43) asignacion -> VARIABLE . tipo_asignacion factor
    (44) asignacion -> VARIABLE . ASIGN opMatematicas
    (70) input -> VARIABLE . ASIGN GETS
    (135) callFuncion -> VARIABLE . LPAR RPAR
    (136) callFuncion -> VARIABLE . LPAR parametros RPAR
    (77) addValueHash -> VARIABLE . LCOR expression RCOR ASIGN expression
    (78) modValueHash -> VARIABLE . LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> VARIABLE . POINT DELETE LPAR expression RPAR
    (91) insertArray -> VARIABLE . POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> VARIABLE . POINT DELETE_AT LPAR NUMBER RPAR
    (98) searchStack -> VARIABLE . POINT SEARCH LPAR factor RPAR
    (99) pushStack -> VARIABLE . POINT PUSH LPAR factor RPAR
    (80) metodoBoleano -> VARIABLE . POINT VARIABLE QUESTION LPAR expression RPAR
    (81) metodoBoleano -> VARIABLE . POINT VARIABLE QUESTION LPAR RPAR
    (105) suma -> VARIABLE . PLUS NUMBER
    (110) resta -> VARIABLE . MINUS NUMBER
    (56) factor -> VARIABLE .
    (45) tipo_asignacion -> . PLUS ASIGN
    (46) tipo_asignacion -> . MINUS ASIGN
    (47) tipo_asignacion -> . TIMES ASIGN
    (48) tipo_asignacion -> . DIVIDE ASIGN
    (49) tipo_asignacion -> . EXPONENTIATION ASIGN

  ! shift/reduce conflict for ASIGN resolved as shift
    ASIGN           shift and go to state 54
    LPAR            shift and go to state 56
    LCOR            shift and go to state 57
    POINT           shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    AND             reduce using rule 56 (factor -> VARIABLE .)
    OR              reduce using rule 56 (factor -> VARIABLE .)
    GREATER         reduce using rule 56 (factor -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 56 (factor -> VARIABLE .)
    MINOR           reduce using rule 56 (factor -> VARIABLE .)
    MINOR_OR_EQUAL  reduce using rule 56 (factor -> VARIABLE .)
    NOT             reduce using rule 56 (factor -> VARIABLE .)
    $end            reduce using rule 56 (factor -> VARIABLE .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    EXPONENTIATION  shift and go to state 63

  ! ASIGN           [ reduce using rule 56 (factor -> VARIABLE .) ]

    tipo_asignacion                shift and go to state 55

state 22

    (52) term -> factor .

    AND             reduce using rule 52 (term -> factor .)
    OR              reduce using rule 52 (term -> factor .)
    GREATER         reduce using rule 52 (term -> factor .)
    GREATER_OR_EQUAL reduce using rule 52 (term -> factor .)
    MINOR           reduce using rule 52 (term -> factor .)
    MINOR_OR_EQUAL  reduce using rule 52 (term -> factor .)
    ASIGN           reduce using rule 52 (term -> factor .)
    NOT             reduce using rule 52 (term -> factor .)
    $end            reduce using rule 52 (term -> factor .)
    VARIABLE        reduce using rule 52 (term -> factor .)
    IF              reduce using rule 52 (term -> factor .)
    PUTS            reduce using rule 52 (term -> factor .)
    FOR             reduce using rule 52 (term -> factor .)
    WHILE           reduce using rule 52 (term -> factor .)
    TRUE            reduce using rule 52 (term -> factor .)
    FALSE           reduce using rule 52 (term -> factor .)
    NUMBER          reduce using rule 52 (term -> factor .)
    STRING          reduce using rule 52 (term -> factor .)
    FLOAT           reduce using rule 52 (term -> factor .)
    LPAR            reduce using rule 52 (term -> factor .)
    END             reduce using rule 52 (term -> factor .)
    RETURN          reduce using rule 52 (term -> factor .)
    RPAR            reduce using rule 52 (term -> factor .)
    D_POINT         reduce using rule 52 (term -> factor .)
    RCOR            reduce using rule 52 (term -> factor .)
    COMMA           reduce using rule 52 (term -> factor .)
    RKEY            reduce using rule 52 (term -> factor .)


state 23

    (50) expression -> term .

    AND             reduce using rule 50 (expression -> term .)
    OR              reduce using rule 50 (expression -> term .)
    GREATER         reduce using rule 50 (expression -> term .)
    GREATER_OR_EQUAL reduce using rule 50 (expression -> term .)
    MINOR           reduce using rule 50 (expression -> term .)
    MINOR_OR_EQUAL  reduce using rule 50 (expression -> term .)
    ASIGN           reduce using rule 50 (expression -> term .)
    NOT             reduce using rule 50 (expression -> term .)
    $end            reduce using rule 50 (expression -> term .)
    VARIABLE        reduce using rule 50 (expression -> term .)
    IF              reduce using rule 50 (expression -> term .)
    PUTS            reduce using rule 50 (expression -> term .)
    FOR             reduce using rule 50 (expression -> term .)
    WHILE           reduce using rule 50 (expression -> term .)
    TRUE            reduce using rule 50 (expression -> term .)
    FALSE           reduce using rule 50 (expression -> term .)
    NUMBER          reduce using rule 50 (expression -> term .)
    STRING          reduce using rule 50 (expression -> term .)
    FLOAT           reduce using rule 50 (expression -> term .)
    LPAR            reduce using rule 50 (expression -> term .)
    END             reduce using rule 50 (expression -> term .)
    RETURN          reduce using rule 50 (expression -> term .)
    RPAR            reduce using rule 50 (expression -> term .)
    D_POINT         reduce using rule 50 (expression -> term .)
    RCOR            reduce using rule 50 (expression -> term .)
    COMMA           reduce using rule 50 (expression -> term .)
    RKEY            reduce using rule 50 (expression -> term .)


state 24

    (51) expression -> boleano .

    AND             reduce using rule 51 (expression -> boleano .)
    OR              reduce using rule 51 (expression -> boleano .)
    GREATER         reduce using rule 51 (expression -> boleano .)
    GREATER_OR_EQUAL reduce using rule 51 (expression -> boleano .)
    MINOR           reduce using rule 51 (expression -> boleano .)
    MINOR_OR_EQUAL  reduce using rule 51 (expression -> boleano .)
    ASIGN           reduce using rule 51 (expression -> boleano .)
    NOT             reduce using rule 51 (expression -> boleano .)
    $end            reduce using rule 51 (expression -> boleano .)
    VARIABLE        reduce using rule 51 (expression -> boleano .)
    IF              reduce using rule 51 (expression -> boleano .)
    PUTS            reduce using rule 51 (expression -> boleano .)
    FOR             reduce using rule 51 (expression -> boleano .)
    WHILE           reduce using rule 51 (expression -> boleano .)
    TRUE            reduce using rule 51 (expression -> boleano .)
    FALSE           reduce using rule 51 (expression -> boleano .)
    NUMBER          reduce using rule 51 (expression -> boleano .)
    STRING          reduce using rule 51 (expression -> boleano .)
    FLOAT           reduce using rule 51 (expression -> boleano .)
    LPAR            reduce using rule 51 (expression -> boleano .)
    END             reduce using rule 51 (expression -> boleano .)
    RETURN          reduce using rule 51 (expression -> boleano .)
    RPAR            reduce using rule 51 (expression -> boleano .)
    D_POINT         reduce using rule 51 (expression -> boleano .)
    RCOR            reduce using rule 51 (expression -> boleano .)
    COMMA           reduce using rule 51 (expression -> boleano .)
    RKEY            reduce using rule 51 (expression -> boleano .)


state 25

    (132) funciones -> encabezado . repCuerpo END
    (133) funciones -> encabezado . RETURN expression END
    (134) funciones -> encabezado . repCuerpo RETURN expression END
    (84) repCuerpo -> . cuerpo
    (85) repCuerpo -> . cuerpo repCuerpo
    (20) cuerpo -> . asignacion
    (21) cuerpo -> . expression
    (22) cuerpo -> . comparacion
    (23) cuerpo -> . condicional
    (24) cuerpo -> . impresion
    (25) cuerpo -> . for
    (26) cuerpo -> . while
    (27) cuerpo -> . input
    (28) cuerpo -> . callFuncion
    (29) cuerpo -> . addValueHash
    (30) cuerpo -> . modValueHash
    (31) cuerpo -> . deleteValueHash
    (32) cuerpo -> . insertArray
    (33) cuerpo -> . deleteArray
    (34) cuerpo -> . pushStack
    (35) cuerpo -> . searchStack
    (36) asignacion -> . VARIABLE ASIGN expression
    (37) asignacion -> . VARIABLE ASIGN comparacion
    (38) asignacion -> . VARIABLE ASIGN callFuncion
    (39) asignacion -> . VARIABLE ASIGN diccionario
    (40) asignacion -> . VARIABLE ASIGN getValueHash
    (41) asignacion -> . VARIABLE ASIGN array
    (42) asignacion -> . VARIABLE ASIGN stack
    (43) asignacion -> . VARIABLE tipo_asignacion factor
    (44) asignacion -> . VARIABLE ASIGN opMatematicas
    (50) expression -> . term
    (51) expression -> . boleano
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (137) condicional -> . IF comparacion D_POINT repCuerpo END
    (138) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (69) impresion -> . PUTS factor
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (83) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (70) input -> . VARIABLE ASIGN GETS
    (135) callFuncion -> . VARIABLE LPAR RPAR
    (136) callFuncion -> . VARIABLE LPAR parametros RPAR
    (77) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (91) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (99) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (98) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    RETURN          shift and go to state 65
    VARIABLE        shift and go to state 83
    IF              shift and go to state 26
    PUTS            shift and go to state 31
    FOR             shift and go to state 29
    WHILE           shift and go to state 27
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    LPAR            shift and go to state 85

    repCuerpo                      shift and go to state 64
    expression                     shift and go to state 66
    cuerpo                         shift and go to state 67
    asignacion                     shift and go to state 68
    comparacion                    shift and go to state 69
    condicional                    shift and go to state 70
    impresion                      shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    input                          shift and go to state 74
    callFuncion                    shift and go to state 75
    addValueHash                   shift and go to state 76
    modValueHash                   shift and go to state 77
    deleteValueHash                shift and go to state 78
    insertArray                    shift and go to state 79
    deleteArray                    shift and go to state 80
    pushStack                      shift and go to state 81
    searchStack                    shift and go to state 82
    factor                         shift and go to state 22
    term                           shift and go to state 23
    boleano                        shift and go to state 24

state 26

    (137) condicional -> IF . comparacion D_POINT repCuerpo END
    (138) condicional -> IF . comparacion D_POINT repCuerpo END cond_else
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    comparacion                    shift and go to state 87
    expression                     shift and go to state 88
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 27

    (82) while -> WHILE . LPAR comparacion RPAR repCuerpo END
    (83) while -> WHILE . LPAR comparacion RPAR repCuerpo END while

    LPAR            shift and go to state 90


state 28

    (122) exponenciacion -> LPAR . operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> LPAR . opMatematicas RPAR EXPONENTIATION operadores
    (57) factor -> LPAR . expression RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (50) expression -> . term
    (51) expression -> . boleano
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    FLOAT           shift and go to state 94
    NUMBER          shift and go to state 95
    MINUS           shift and go to state 41
    VARIABLE        shift and go to state 96
    LPAR            shift and go to state 28
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    STRING          shift and go to state 42

    operadores                     shift and go to state 91
    opMatematicas                  shift and go to state 92
    expression                     shift and go to state 93
    enteros                        shift and go to state 44
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 29

    (93) for -> FOR . VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> FOR . VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for

    VARIABLE        shift and go to state 97


state 30

    (53) factor -> NUMBER .
    (126) enteros -> NUMBER .

    AND             reduce using rule 53 (factor -> NUMBER .)
    OR              reduce using rule 53 (factor -> NUMBER .)
    GREATER         reduce using rule 53 (factor -> NUMBER .)
    GREATER_OR_EQUAL reduce using rule 53 (factor -> NUMBER .)
    MINOR           reduce using rule 53 (factor -> NUMBER .)
    MINOR_OR_EQUAL  reduce using rule 53 (factor -> NUMBER .)
    ASIGN           reduce using rule 53 (factor -> NUMBER .)
    NOT             reduce using rule 53 (factor -> NUMBER .)
    $end            reduce using rule 53 (factor -> NUMBER .)
    VARIABLE        reduce using rule 53 (factor -> NUMBER .)
    IF              reduce using rule 53 (factor -> NUMBER .)
    PUTS            reduce using rule 53 (factor -> NUMBER .)
    FOR             reduce using rule 53 (factor -> NUMBER .)
    WHILE           reduce using rule 53 (factor -> NUMBER .)
    TRUE            reduce using rule 53 (factor -> NUMBER .)
    FALSE           reduce using rule 53 (factor -> NUMBER .)
    NUMBER          reduce using rule 53 (factor -> NUMBER .)
    STRING          reduce using rule 53 (factor -> NUMBER .)
    FLOAT           reduce using rule 53 (factor -> NUMBER .)
    LPAR            reduce using rule 53 (factor -> NUMBER .)
    END             reduce using rule 53 (factor -> NUMBER .)
    RETURN          reduce using rule 53 (factor -> NUMBER .)
    PLUS            reduce using rule 126 (enteros -> NUMBER .)
    MINUS           reduce using rule 126 (enteros -> NUMBER .)
    TIMES           reduce using rule 126 (enteros -> NUMBER .)
    DIVIDE          reduce using rule 126 (enteros -> NUMBER .)
    EXPONENTIATION  reduce using rule 126 (enteros -> NUMBER .)


state 31

    (69) impresion -> PUTS . factor
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    factor                         shift and go to state 98

state 32

    (100) opMatematicas -> suma .

    $end            reduce using rule 100 (opMatematicas -> suma .)
    RPAR            reduce using rule 100 (opMatematicas -> suma .)
    VARIABLE        reduce using rule 100 (opMatematicas -> suma .)
    IF              reduce using rule 100 (opMatematicas -> suma .)
    PUTS            reduce using rule 100 (opMatematicas -> suma .)
    FOR             reduce using rule 100 (opMatematicas -> suma .)
    WHILE           reduce using rule 100 (opMatematicas -> suma .)
    TRUE            reduce using rule 100 (opMatematicas -> suma .)
    FALSE           reduce using rule 100 (opMatematicas -> suma .)
    NUMBER          reduce using rule 100 (opMatematicas -> suma .)
    STRING          reduce using rule 100 (opMatematicas -> suma .)
    FLOAT           reduce using rule 100 (opMatematicas -> suma .)
    LPAR            reduce using rule 100 (opMatematicas -> suma .)
    END             reduce using rule 100 (opMatematicas -> suma .)
    RETURN          reduce using rule 100 (opMatematicas -> suma .)


state 33

    (101) opMatematicas -> resta .

    $end            reduce using rule 101 (opMatematicas -> resta .)
    RPAR            reduce using rule 101 (opMatematicas -> resta .)
    VARIABLE        reduce using rule 101 (opMatematicas -> resta .)
    IF              reduce using rule 101 (opMatematicas -> resta .)
    PUTS            reduce using rule 101 (opMatematicas -> resta .)
    FOR             reduce using rule 101 (opMatematicas -> resta .)
    WHILE           reduce using rule 101 (opMatematicas -> resta .)
    TRUE            reduce using rule 101 (opMatematicas -> resta .)
    FALSE           reduce using rule 101 (opMatematicas -> resta .)
    NUMBER          reduce using rule 101 (opMatematicas -> resta .)
    STRING          reduce using rule 101 (opMatematicas -> resta .)
    FLOAT           reduce using rule 101 (opMatematicas -> resta .)
    LPAR            reduce using rule 101 (opMatematicas -> resta .)
    END             reduce using rule 101 (opMatematicas -> resta .)
    RETURN          reduce using rule 101 (opMatematicas -> resta .)


state 34

    (102) opMatematicas -> multiplicacion .

    $end            reduce using rule 102 (opMatematicas -> multiplicacion .)
    RPAR            reduce using rule 102 (opMatematicas -> multiplicacion .)
    VARIABLE        reduce using rule 102 (opMatematicas -> multiplicacion .)
    IF              reduce using rule 102 (opMatematicas -> multiplicacion .)
    PUTS            reduce using rule 102 (opMatematicas -> multiplicacion .)
    FOR             reduce using rule 102 (opMatematicas -> multiplicacion .)
    WHILE           reduce using rule 102 (opMatematicas -> multiplicacion .)
    TRUE            reduce using rule 102 (opMatematicas -> multiplicacion .)
    FALSE           reduce using rule 102 (opMatematicas -> multiplicacion .)
    NUMBER          reduce using rule 102 (opMatematicas -> multiplicacion .)
    STRING          reduce using rule 102 (opMatematicas -> multiplicacion .)
    FLOAT           reduce using rule 102 (opMatematicas -> multiplicacion .)
    LPAR            reduce using rule 102 (opMatematicas -> multiplicacion .)
    END             reduce using rule 102 (opMatematicas -> multiplicacion .)
    RETURN          reduce using rule 102 (opMatematicas -> multiplicacion .)


state 35

    (103) opMatematicas -> division .

    $end            reduce using rule 103 (opMatematicas -> division .)
    RPAR            reduce using rule 103 (opMatematicas -> division .)
    VARIABLE        reduce using rule 103 (opMatematicas -> division .)
    IF              reduce using rule 103 (opMatematicas -> division .)
    PUTS            reduce using rule 103 (opMatematicas -> division .)
    FOR             reduce using rule 103 (opMatematicas -> division .)
    WHILE           reduce using rule 103 (opMatematicas -> division .)
    TRUE            reduce using rule 103 (opMatematicas -> division .)
    FALSE           reduce using rule 103 (opMatematicas -> division .)
    NUMBER          reduce using rule 103 (opMatematicas -> division .)
    STRING          reduce using rule 103 (opMatematicas -> division .)
    FLOAT           reduce using rule 103 (opMatematicas -> division .)
    LPAR            reduce using rule 103 (opMatematicas -> division .)
    END             reduce using rule 103 (opMatematicas -> division .)
    RETURN          reduce using rule 103 (opMatematicas -> division .)


state 36

    (104) opMatematicas -> exponenciacion .

    $end            reduce using rule 104 (opMatematicas -> exponenciacion .)
    RPAR            reduce using rule 104 (opMatematicas -> exponenciacion .)
    VARIABLE        reduce using rule 104 (opMatematicas -> exponenciacion .)
    IF              reduce using rule 104 (opMatematicas -> exponenciacion .)
    PUTS            reduce using rule 104 (opMatematicas -> exponenciacion .)
    FOR             reduce using rule 104 (opMatematicas -> exponenciacion .)
    WHILE           reduce using rule 104 (opMatematicas -> exponenciacion .)
    TRUE            reduce using rule 104 (opMatematicas -> exponenciacion .)
    FALSE           reduce using rule 104 (opMatematicas -> exponenciacion .)
    NUMBER          reduce using rule 104 (opMatematicas -> exponenciacion .)
    STRING          reduce using rule 104 (opMatematicas -> exponenciacion .)
    FLOAT           reduce using rule 104 (opMatematicas -> exponenciacion .)
    LPAR            reduce using rule 104 (opMatematicas -> exponenciacion .)
    END             reduce using rule 104 (opMatematicas -> exponenciacion .)
    RETURN          reduce using rule 104 (opMatematicas -> exponenciacion .)


state 37

    (71) boleano -> TRUE .

    AND             reduce using rule 71 (boleano -> TRUE .)
    OR              reduce using rule 71 (boleano -> TRUE .)
    GREATER         reduce using rule 71 (boleano -> TRUE .)
    GREATER_OR_EQUAL reduce using rule 71 (boleano -> TRUE .)
    MINOR           reduce using rule 71 (boleano -> TRUE .)
    MINOR_OR_EQUAL  reduce using rule 71 (boleano -> TRUE .)
    ASIGN           reduce using rule 71 (boleano -> TRUE .)
    NOT             reduce using rule 71 (boleano -> TRUE .)
    $end            reduce using rule 71 (boleano -> TRUE .)
    VARIABLE        reduce using rule 71 (boleano -> TRUE .)
    IF              reduce using rule 71 (boleano -> TRUE .)
    PUTS            reduce using rule 71 (boleano -> TRUE .)
    FOR             reduce using rule 71 (boleano -> TRUE .)
    WHILE           reduce using rule 71 (boleano -> TRUE .)
    TRUE            reduce using rule 71 (boleano -> TRUE .)
    FALSE           reduce using rule 71 (boleano -> TRUE .)
    NUMBER          reduce using rule 71 (boleano -> TRUE .)
    STRING          reduce using rule 71 (boleano -> TRUE .)
    FLOAT           reduce using rule 71 (boleano -> TRUE .)
    LPAR            reduce using rule 71 (boleano -> TRUE .)
    END             reduce using rule 71 (boleano -> TRUE .)
    RETURN          reduce using rule 71 (boleano -> TRUE .)
    RPAR            reduce using rule 71 (boleano -> TRUE .)
    D_POINT         reduce using rule 71 (boleano -> TRUE .)
    RCOR            reduce using rule 71 (boleano -> TRUE .)
    COMMA           reduce using rule 71 (boleano -> TRUE .)
    RKEY            reduce using rule 71 (boleano -> TRUE .)


state 38

    (72) boleano -> FALSE .

    AND             reduce using rule 72 (boleano -> FALSE .)
    OR              reduce using rule 72 (boleano -> FALSE .)
    GREATER         reduce using rule 72 (boleano -> FALSE .)
    GREATER_OR_EQUAL reduce using rule 72 (boleano -> FALSE .)
    MINOR           reduce using rule 72 (boleano -> FALSE .)
    MINOR_OR_EQUAL  reduce using rule 72 (boleano -> FALSE .)
    ASIGN           reduce using rule 72 (boleano -> FALSE .)
    NOT             reduce using rule 72 (boleano -> FALSE .)
    $end            reduce using rule 72 (boleano -> FALSE .)
    VARIABLE        reduce using rule 72 (boleano -> FALSE .)
    IF              reduce using rule 72 (boleano -> FALSE .)
    PUTS            reduce using rule 72 (boleano -> FALSE .)
    FOR             reduce using rule 72 (boleano -> FALSE .)
    WHILE           reduce using rule 72 (boleano -> FALSE .)
    TRUE            reduce using rule 72 (boleano -> FALSE .)
    FALSE           reduce using rule 72 (boleano -> FALSE .)
    NUMBER          reduce using rule 72 (boleano -> FALSE .)
    STRING          reduce using rule 72 (boleano -> FALSE .)
    FLOAT           reduce using rule 72 (boleano -> FALSE .)
    LPAR            reduce using rule 72 (boleano -> FALSE .)
    END             reduce using rule 72 (boleano -> FALSE .)
    RETURN          reduce using rule 72 (boleano -> FALSE .)
    RPAR            reduce using rule 72 (boleano -> FALSE .)
    D_POINT         reduce using rule 72 (boleano -> FALSE .)
    RCOR            reduce using rule 72 (boleano -> FALSE .)
    COMMA           reduce using rule 72 (boleano -> FALSE .)
    RKEY            reduce using rule 72 (boleano -> FALSE .)


state 39

    (130) encabezado -> DEF . VARIABLE LPAR RPAR
    (131) encabezado -> DEF . VARIABLE LPAR parametros RPAR

    VARIABLE        shift and go to state 99


state 40

    (106) suma -> operadores . PLUS operadores
    (107) suma -> operadores . PLUS opMatematicas
    (108) suma -> operadores . PLUS LPAR operadores RPAR
    (109) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (111) resta -> operadores . MINUS operadores
    (112) resta -> operadores . MINUS opMatematicas
    (113) resta -> operadores . MINUS LPAR operadores RPAR
    (114) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> operadores . TIMES operadores
    (116) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (117) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (118) division -> operadores . DIVIDE operadores
    (119) division -> operadores . DIVIDE LPAR operadores RPAR
    (120) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> operadores . EXPONENTIATION operadores

    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    EXPONENTIATION  shift and go to state 104


state 41

    (127) enteros -> MINUS . NUMBER

    NUMBER          shift and go to state 105


state 42

    (54) factor -> STRING .

    AND             reduce using rule 54 (factor -> STRING .)
    OR              reduce using rule 54 (factor -> STRING .)
    GREATER         reduce using rule 54 (factor -> STRING .)
    GREATER_OR_EQUAL reduce using rule 54 (factor -> STRING .)
    MINOR           reduce using rule 54 (factor -> STRING .)
    MINOR_OR_EQUAL  reduce using rule 54 (factor -> STRING .)
    ASIGN           reduce using rule 54 (factor -> STRING .)
    NOT             reduce using rule 54 (factor -> STRING .)
    $end            reduce using rule 54 (factor -> STRING .)
    VARIABLE        reduce using rule 54 (factor -> STRING .)
    IF              reduce using rule 54 (factor -> STRING .)
    PUTS            reduce using rule 54 (factor -> STRING .)
    FOR             reduce using rule 54 (factor -> STRING .)
    WHILE           reduce using rule 54 (factor -> STRING .)
    TRUE            reduce using rule 54 (factor -> STRING .)
    FALSE           reduce using rule 54 (factor -> STRING .)
    NUMBER          reduce using rule 54 (factor -> STRING .)
    STRING          reduce using rule 54 (factor -> STRING .)
    FLOAT           reduce using rule 54 (factor -> STRING .)
    LPAR            reduce using rule 54 (factor -> STRING .)
    END             reduce using rule 54 (factor -> STRING .)
    RETURN          reduce using rule 54 (factor -> STRING .)
    RPAR            reduce using rule 54 (factor -> STRING .)
    D_POINT         reduce using rule 54 (factor -> STRING .)
    RCOR            reduce using rule 54 (factor -> STRING .)
    COMMA           reduce using rule 54 (factor -> STRING .)
    RKEY            reduce using rule 54 (factor -> STRING .)


state 43

    (55) factor -> FLOAT .
    (125) operadores -> FLOAT .

    AND             reduce using rule 55 (factor -> FLOAT .)
    OR              reduce using rule 55 (factor -> FLOAT .)
    GREATER         reduce using rule 55 (factor -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 55 (factor -> FLOAT .)
    MINOR           reduce using rule 55 (factor -> FLOAT .)
    MINOR_OR_EQUAL  reduce using rule 55 (factor -> FLOAT .)
    ASIGN           reduce using rule 55 (factor -> FLOAT .)
    NOT             reduce using rule 55 (factor -> FLOAT .)
    $end            reduce using rule 55 (factor -> FLOAT .)
    VARIABLE        reduce using rule 55 (factor -> FLOAT .)
    IF              reduce using rule 55 (factor -> FLOAT .)
    PUTS            reduce using rule 55 (factor -> FLOAT .)
    FOR             reduce using rule 55 (factor -> FLOAT .)
    WHILE           reduce using rule 55 (factor -> FLOAT .)
    TRUE            reduce using rule 55 (factor -> FLOAT .)
    FALSE           reduce using rule 55 (factor -> FLOAT .)
    NUMBER          reduce using rule 55 (factor -> FLOAT .)
    STRING          reduce using rule 55 (factor -> FLOAT .)
    FLOAT           reduce using rule 55 (factor -> FLOAT .)
    LPAR            reduce using rule 55 (factor -> FLOAT .)
    END             reduce using rule 55 (factor -> FLOAT .)
    RETURN          reduce using rule 55 (factor -> FLOAT .)
    PLUS            reduce using rule 125 (operadores -> FLOAT .)
    MINUS           reduce using rule 125 (operadores -> FLOAT .)
    TIMES           reduce using rule 125 (operadores -> FLOAT .)
    DIVIDE          reduce using rule 125 (operadores -> FLOAT .)
    EXPONENTIATION  reduce using rule 125 (operadores -> FLOAT .)


state 44

    (124) operadores -> enteros .

    PLUS            reduce using rule 124 (operadores -> enteros .)
    MINUS           reduce using rule 124 (operadores -> enteros .)
    TIMES           reduce using rule 124 (operadores -> enteros .)
    DIVIDE          reduce using rule 124 (operadores -> enteros .)
    EXPONENTIATION  reduce using rule 124 (operadores -> enteros .)
    RPAR            reduce using rule 124 (operadores -> enteros .)
    $end            reduce using rule 124 (operadores -> enteros .)
    VARIABLE        reduce using rule 124 (operadores -> enteros .)
    IF              reduce using rule 124 (operadores -> enteros .)
    PUTS            reduce using rule 124 (operadores -> enteros .)
    FOR             reduce using rule 124 (operadores -> enteros .)
    WHILE           reduce using rule 124 (operadores -> enteros .)
    TRUE            reduce using rule 124 (operadores -> enteros .)
    FALSE           reduce using rule 124 (operadores -> enteros .)
    NUMBER          reduce using rule 124 (operadores -> enteros .)
    STRING          reduce using rule 124 (operadores -> enteros .)
    FLOAT           reduce using rule 124 (operadores -> enteros .)
    LPAR            reduce using rule 124 (operadores -> enteros .)
    END             reduce using rule 124 (operadores -> enteros .)
    RETURN          reduce using rule 124 (operadores -> enteros .)


state 45

    (58) comparacion -> expression comparador . expression
    (59) comparacion -> expression comparador . expression AND comparacion
    (60) comparacion -> expression comparador . expression OR comparacion
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 106
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 46

    (61) comparacion -> expression AND . expression
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 107
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 47

    (62) comparacion -> expression OR . expression
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 108
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 48

    (63) comparador -> GREATER .

    TRUE            reduce using rule 63 (comparador -> GREATER .)
    FALSE           reduce using rule 63 (comparador -> GREATER .)
    NUMBER          reduce using rule 63 (comparador -> GREATER .)
    STRING          reduce using rule 63 (comparador -> GREATER .)
    FLOAT           reduce using rule 63 (comparador -> GREATER .)
    VARIABLE        reduce using rule 63 (comparador -> GREATER .)
    LPAR            reduce using rule 63 (comparador -> GREATER .)


state 49

    (64) comparador -> GREATER_OR_EQUAL .

    TRUE            reduce using rule 64 (comparador -> GREATER_OR_EQUAL .)
    FALSE           reduce using rule 64 (comparador -> GREATER_OR_EQUAL .)
    NUMBER          reduce using rule 64 (comparador -> GREATER_OR_EQUAL .)
    STRING          reduce using rule 64 (comparador -> GREATER_OR_EQUAL .)
    FLOAT           reduce using rule 64 (comparador -> GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 64 (comparador -> GREATER_OR_EQUAL .)
    LPAR            reduce using rule 64 (comparador -> GREATER_OR_EQUAL .)


state 50

    (65) comparador -> MINOR .

    TRUE            reduce using rule 65 (comparador -> MINOR .)
    FALSE           reduce using rule 65 (comparador -> MINOR .)
    NUMBER          reduce using rule 65 (comparador -> MINOR .)
    STRING          reduce using rule 65 (comparador -> MINOR .)
    FLOAT           reduce using rule 65 (comparador -> MINOR .)
    VARIABLE        reduce using rule 65 (comparador -> MINOR .)
    LPAR            reduce using rule 65 (comparador -> MINOR .)


state 51

    (66) comparador -> MINOR_OR_EQUAL .

    TRUE            reduce using rule 66 (comparador -> MINOR_OR_EQUAL .)
    FALSE           reduce using rule 66 (comparador -> MINOR_OR_EQUAL .)
    NUMBER          reduce using rule 66 (comparador -> MINOR_OR_EQUAL .)
    STRING          reduce using rule 66 (comparador -> MINOR_OR_EQUAL .)
    FLOAT           reduce using rule 66 (comparador -> MINOR_OR_EQUAL .)
    VARIABLE        reduce using rule 66 (comparador -> MINOR_OR_EQUAL .)
    LPAR            reduce using rule 66 (comparador -> MINOR_OR_EQUAL .)


state 52

    (67) comparador -> ASIGN . ASIGN

    ASIGN           shift and go to state 109


state 53

    (68) comparador -> NOT . ASIGN

    ASIGN           shift and go to state 110


state 54

    (36) asignacion -> VARIABLE ASIGN . expression
    (37) asignacion -> VARIABLE ASIGN . comparacion
    (38) asignacion -> VARIABLE ASIGN . callFuncion
    (39) asignacion -> VARIABLE ASIGN . diccionario
    (40) asignacion -> VARIABLE ASIGN . getValueHash
    (41) asignacion -> VARIABLE ASIGN . array
    (42) asignacion -> VARIABLE ASIGN . stack
    (44) asignacion -> VARIABLE ASIGN . opMatematicas
    (70) input -> VARIABLE ASIGN . GETS
    (50) expression -> . term
    (51) expression -> . boleano
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (135) callFuncion -> . VARIABLE LPAR RPAR
    (136) callFuncion -> . VARIABLE LPAR parametros RPAR
    (73) diccionario -> . LKEY cuerpoHash RKEY
    (76) getValueHash -> . VARIABLE LCOR expression RCOR
    (88) array -> . LCOR parametrosA RCOR
    (89) array -> . LCOR RCOR
    (96) stack -> . LCOR parametrosA RCOR
    (97) stack -> . LCOR vacio RCOR
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER

    GETS            shift and go to state 120
    VARIABLE        shift and go to state 111
    LKEY            shift and go to state 121
    LCOR            shift and go to state 122
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    LPAR            shift and go to state 28
    NUMBER          shift and go to state 30
    STRING          shift and go to state 42
    FLOAT           shift and go to state 43
    MINUS           shift and go to state 41

    expression                     shift and go to state 112
    comparacion                    shift and go to state 113
    callFuncion                    shift and go to state 114
    diccionario                    shift and go to state 115
    getValueHash                   shift and go to state 116
    array                          shift and go to state 117
    stack                          shift and go to state 118
    opMatematicas                  shift and go to state 119
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36
    factor                         shift and go to state 22
    operadores                     shift and go to state 40
    enteros                        shift and go to state 44

state 55

    (43) asignacion -> VARIABLE tipo_asignacion . factor
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    factor                         shift and go to state 123

state 56

    (135) callFuncion -> VARIABLE LPAR . RPAR
    (136) callFuncion -> VARIABLE LPAR . parametros RPAR
    (128) parametros -> . VARIABLE
    (129) parametros -> . VARIABLE COMMA parametros

    RPAR            shift and go to state 125
    VARIABLE        shift and go to state 124

    parametros                     shift and go to state 126

state 57

    (77) addValueHash -> VARIABLE LCOR . expression RCOR ASIGN expression
    (78) modValueHash -> VARIABLE LCOR . expression RCOR ASIGN expression
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 127
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 58

    (79) deleteValueHash -> VARIABLE POINT . DELETE LPAR expression RPAR
    (91) insertArray -> VARIABLE POINT . INSERT LPAR argumentosA RPAR
    (92) deleteArray -> VARIABLE POINT . DELETE_AT LPAR NUMBER RPAR
    (98) searchStack -> VARIABLE POINT . SEARCH LPAR factor RPAR
    (99) pushStack -> VARIABLE POINT . PUSH LPAR factor RPAR
    (80) metodoBoleano -> VARIABLE POINT . VARIABLE QUESTION LPAR expression RPAR
    (81) metodoBoleano -> VARIABLE POINT . VARIABLE QUESTION LPAR RPAR

    DELETE          shift and go to state 129
    INSERT          shift and go to state 130
    DELETE_AT       shift and go to state 131
    SEARCH          shift and go to state 132
    PUSH            shift and go to state 133
    VARIABLE        shift and go to state 128


state 59

    (105) suma -> VARIABLE PLUS . NUMBER
    (45) tipo_asignacion -> PLUS . ASIGN

    NUMBER          shift and go to state 134
    ASIGN           shift and go to state 135


state 60

    (110) resta -> VARIABLE MINUS . NUMBER
    (46) tipo_asignacion -> MINUS . ASIGN

    NUMBER          shift and go to state 136
    ASIGN           shift and go to state 137


state 61

    (47) tipo_asignacion -> TIMES . ASIGN

    ASIGN           shift and go to state 138


state 62

    (48) tipo_asignacion -> DIVIDE . ASIGN

    ASIGN           shift and go to state 139


state 63

    (49) tipo_asignacion -> EXPONENTIATION . ASIGN

    ASIGN           shift and go to state 140


state 64

    (132) funciones -> encabezado repCuerpo . END
    (134) funciones -> encabezado repCuerpo . RETURN expression END

    END             shift and go to state 141
    RETURN          shift and go to state 142


state 65

    (133) funciones -> encabezado RETURN . expression END
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 143
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 66

    (21) cuerpo -> expression .
    (58) comparacion -> expression . comparador expression
    (59) comparacion -> expression . comparador expression AND comparacion
    (60) comparacion -> expression . comparador expression OR comparacion
    (61) comparacion -> expression . AND expression
    (62) comparacion -> expression . OR expression
    (63) comparador -> . GREATER
    (64) comparador -> . GREATER_OR_EQUAL
    (65) comparador -> . MINOR
    (66) comparador -> . MINOR_OR_EQUAL
    (67) comparador -> . ASIGN ASIGN
    (68) comparador -> . NOT ASIGN

    VARIABLE        reduce using rule 21 (cuerpo -> expression .)
    IF              reduce using rule 21 (cuerpo -> expression .)
    PUTS            reduce using rule 21 (cuerpo -> expression .)
    FOR             reduce using rule 21 (cuerpo -> expression .)
    WHILE           reduce using rule 21 (cuerpo -> expression .)
    TRUE            reduce using rule 21 (cuerpo -> expression .)
    FALSE           reduce using rule 21 (cuerpo -> expression .)
    NUMBER          reduce using rule 21 (cuerpo -> expression .)
    STRING          reduce using rule 21 (cuerpo -> expression .)
    FLOAT           reduce using rule 21 (cuerpo -> expression .)
    LPAR            reduce using rule 21 (cuerpo -> expression .)
    END             reduce using rule 21 (cuerpo -> expression .)
    RETURN          reduce using rule 21 (cuerpo -> expression .)
    AND             shift and go to state 46
    OR              shift and go to state 47
    GREATER         shift and go to state 48
    GREATER_OR_EQUAL shift and go to state 49
    MINOR           shift and go to state 50
    MINOR_OR_EQUAL  shift and go to state 51
    ASIGN           shift and go to state 52
    NOT             shift and go to state 53

    comparador                     shift and go to state 45

state 67

    (84) repCuerpo -> cuerpo .
    (85) repCuerpo -> cuerpo . repCuerpo
    (84) repCuerpo -> . cuerpo
    (85) repCuerpo -> . cuerpo repCuerpo
    (20) cuerpo -> . asignacion
    (21) cuerpo -> . expression
    (22) cuerpo -> . comparacion
    (23) cuerpo -> . condicional
    (24) cuerpo -> . impresion
    (25) cuerpo -> . for
    (26) cuerpo -> . while
    (27) cuerpo -> . input
    (28) cuerpo -> . callFuncion
    (29) cuerpo -> . addValueHash
    (30) cuerpo -> . modValueHash
    (31) cuerpo -> . deleteValueHash
    (32) cuerpo -> . insertArray
    (33) cuerpo -> . deleteArray
    (34) cuerpo -> . pushStack
    (35) cuerpo -> . searchStack
    (36) asignacion -> . VARIABLE ASIGN expression
    (37) asignacion -> . VARIABLE ASIGN comparacion
    (38) asignacion -> . VARIABLE ASIGN callFuncion
    (39) asignacion -> . VARIABLE ASIGN diccionario
    (40) asignacion -> . VARIABLE ASIGN getValueHash
    (41) asignacion -> . VARIABLE ASIGN array
    (42) asignacion -> . VARIABLE ASIGN stack
    (43) asignacion -> . VARIABLE tipo_asignacion factor
    (44) asignacion -> . VARIABLE ASIGN opMatematicas
    (50) expression -> . term
    (51) expression -> . boleano
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (137) condicional -> . IF comparacion D_POINT repCuerpo END
    (138) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (69) impresion -> . PUTS factor
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (83) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (70) input -> . VARIABLE ASIGN GETS
    (135) callFuncion -> . VARIABLE LPAR RPAR
    (136) callFuncion -> . VARIABLE LPAR parametros RPAR
    (77) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (91) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (99) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (98) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    END             reduce using rule 84 (repCuerpo -> cuerpo .)
    RETURN          reduce using rule 84 (repCuerpo -> cuerpo .)
    VARIABLE        shift and go to state 83
    IF              shift and go to state 26
    PUTS            shift and go to state 31
    FOR             shift and go to state 29
    WHILE           shift and go to state 27
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    LPAR            shift and go to state 85

    cuerpo                         shift and go to state 67
    repCuerpo                      shift and go to state 144
    asignacion                     shift and go to state 68
    expression                     shift and go to state 66
    comparacion                    shift and go to state 69
    condicional                    shift and go to state 70
    impresion                      shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    input                          shift and go to state 74
    callFuncion                    shift and go to state 75
    addValueHash                   shift and go to state 76
    modValueHash                   shift and go to state 77
    deleteValueHash                shift and go to state 78
    insertArray                    shift and go to state 79
    deleteArray                    shift and go to state 80
    pushStack                      shift and go to state 81
    searchStack                    shift and go to state 82
    factor                         shift and go to state 22
    term                           shift and go to state 23
    boleano                        shift and go to state 24

state 68

    (20) cuerpo -> asignacion .

    VARIABLE        reduce using rule 20 (cuerpo -> asignacion .)
    IF              reduce using rule 20 (cuerpo -> asignacion .)
    PUTS            reduce using rule 20 (cuerpo -> asignacion .)
    FOR             reduce using rule 20 (cuerpo -> asignacion .)
    WHILE           reduce using rule 20 (cuerpo -> asignacion .)
    TRUE            reduce using rule 20 (cuerpo -> asignacion .)
    FALSE           reduce using rule 20 (cuerpo -> asignacion .)
    NUMBER          reduce using rule 20 (cuerpo -> asignacion .)
    STRING          reduce using rule 20 (cuerpo -> asignacion .)
    FLOAT           reduce using rule 20 (cuerpo -> asignacion .)
    LPAR            reduce using rule 20 (cuerpo -> asignacion .)
    END             reduce using rule 20 (cuerpo -> asignacion .)
    RETURN          reduce using rule 20 (cuerpo -> asignacion .)


state 69

    (22) cuerpo -> comparacion .

    VARIABLE        reduce using rule 22 (cuerpo -> comparacion .)
    IF              reduce using rule 22 (cuerpo -> comparacion .)
    PUTS            reduce using rule 22 (cuerpo -> comparacion .)
    FOR             reduce using rule 22 (cuerpo -> comparacion .)
    WHILE           reduce using rule 22 (cuerpo -> comparacion .)
    TRUE            reduce using rule 22 (cuerpo -> comparacion .)
    FALSE           reduce using rule 22 (cuerpo -> comparacion .)
    NUMBER          reduce using rule 22 (cuerpo -> comparacion .)
    STRING          reduce using rule 22 (cuerpo -> comparacion .)
    FLOAT           reduce using rule 22 (cuerpo -> comparacion .)
    LPAR            reduce using rule 22 (cuerpo -> comparacion .)
    END             reduce using rule 22 (cuerpo -> comparacion .)
    RETURN          reduce using rule 22 (cuerpo -> comparacion .)


state 70

    (23) cuerpo -> condicional .

    VARIABLE        reduce using rule 23 (cuerpo -> condicional .)
    IF              reduce using rule 23 (cuerpo -> condicional .)
    PUTS            reduce using rule 23 (cuerpo -> condicional .)
    FOR             reduce using rule 23 (cuerpo -> condicional .)
    WHILE           reduce using rule 23 (cuerpo -> condicional .)
    TRUE            reduce using rule 23 (cuerpo -> condicional .)
    FALSE           reduce using rule 23 (cuerpo -> condicional .)
    NUMBER          reduce using rule 23 (cuerpo -> condicional .)
    STRING          reduce using rule 23 (cuerpo -> condicional .)
    FLOAT           reduce using rule 23 (cuerpo -> condicional .)
    LPAR            reduce using rule 23 (cuerpo -> condicional .)
    END             reduce using rule 23 (cuerpo -> condicional .)
    RETURN          reduce using rule 23 (cuerpo -> condicional .)


state 71

    (24) cuerpo -> impresion .

    VARIABLE        reduce using rule 24 (cuerpo -> impresion .)
    IF              reduce using rule 24 (cuerpo -> impresion .)
    PUTS            reduce using rule 24 (cuerpo -> impresion .)
    FOR             reduce using rule 24 (cuerpo -> impresion .)
    WHILE           reduce using rule 24 (cuerpo -> impresion .)
    TRUE            reduce using rule 24 (cuerpo -> impresion .)
    FALSE           reduce using rule 24 (cuerpo -> impresion .)
    NUMBER          reduce using rule 24 (cuerpo -> impresion .)
    STRING          reduce using rule 24 (cuerpo -> impresion .)
    FLOAT           reduce using rule 24 (cuerpo -> impresion .)
    LPAR            reduce using rule 24 (cuerpo -> impresion .)
    END             reduce using rule 24 (cuerpo -> impresion .)
    RETURN          reduce using rule 24 (cuerpo -> impresion .)


state 72

    (25) cuerpo -> for .

    VARIABLE        reduce using rule 25 (cuerpo -> for .)
    IF              reduce using rule 25 (cuerpo -> for .)
    PUTS            reduce using rule 25 (cuerpo -> for .)
    FOR             reduce using rule 25 (cuerpo -> for .)
    WHILE           reduce using rule 25 (cuerpo -> for .)
    TRUE            reduce using rule 25 (cuerpo -> for .)
    FALSE           reduce using rule 25 (cuerpo -> for .)
    NUMBER          reduce using rule 25 (cuerpo -> for .)
    STRING          reduce using rule 25 (cuerpo -> for .)
    FLOAT           reduce using rule 25 (cuerpo -> for .)
    LPAR            reduce using rule 25 (cuerpo -> for .)
    END             reduce using rule 25 (cuerpo -> for .)
    RETURN          reduce using rule 25 (cuerpo -> for .)


state 73

    (26) cuerpo -> while .

    VARIABLE        reduce using rule 26 (cuerpo -> while .)
    IF              reduce using rule 26 (cuerpo -> while .)
    PUTS            reduce using rule 26 (cuerpo -> while .)
    FOR             reduce using rule 26 (cuerpo -> while .)
    WHILE           reduce using rule 26 (cuerpo -> while .)
    TRUE            reduce using rule 26 (cuerpo -> while .)
    FALSE           reduce using rule 26 (cuerpo -> while .)
    NUMBER          reduce using rule 26 (cuerpo -> while .)
    STRING          reduce using rule 26 (cuerpo -> while .)
    FLOAT           reduce using rule 26 (cuerpo -> while .)
    LPAR            reduce using rule 26 (cuerpo -> while .)
    END             reduce using rule 26 (cuerpo -> while .)
    RETURN          reduce using rule 26 (cuerpo -> while .)


state 74

    (27) cuerpo -> input .

    VARIABLE        reduce using rule 27 (cuerpo -> input .)
    IF              reduce using rule 27 (cuerpo -> input .)
    PUTS            reduce using rule 27 (cuerpo -> input .)
    FOR             reduce using rule 27 (cuerpo -> input .)
    WHILE           reduce using rule 27 (cuerpo -> input .)
    TRUE            reduce using rule 27 (cuerpo -> input .)
    FALSE           reduce using rule 27 (cuerpo -> input .)
    NUMBER          reduce using rule 27 (cuerpo -> input .)
    STRING          reduce using rule 27 (cuerpo -> input .)
    FLOAT           reduce using rule 27 (cuerpo -> input .)
    LPAR            reduce using rule 27 (cuerpo -> input .)
    END             reduce using rule 27 (cuerpo -> input .)
    RETURN          reduce using rule 27 (cuerpo -> input .)


state 75

    (28) cuerpo -> callFuncion .

    VARIABLE        reduce using rule 28 (cuerpo -> callFuncion .)
    IF              reduce using rule 28 (cuerpo -> callFuncion .)
    PUTS            reduce using rule 28 (cuerpo -> callFuncion .)
    FOR             reduce using rule 28 (cuerpo -> callFuncion .)
    WHILE           reduce using rule 28 (cuerpo -> callFuncion .)
    TRUE            reduce using rule 28 (cuerpo -> callFuncion .)
    FALSE           reduce using rule 28 (cuerpo -> callFuncion .)
    NUMBER          reduce using rule 28 (cuerpo -> callFuncion .)
    STRING          reduce using rule 28 (cuerpo -> callFuncion .)
    FLOAT           reduce using rule 28 (cuerpo -> callFuncion .)
    LPAR            reduce using rule 28 (cuerpo -> callFuncion .)
    END             reduce using rule 28 (cuerpo -> callFuncion .)
    RETURN          reduce using rule 28 (cuerpo -> callFuncion .)


state 76

    (29) cuerpo -> addValueHash .

    VARIABLE        reduce using rule 29 (cuerpo -> addValueHash .)
    IF              reduce using rule 29 (cuerpo -> addValueHash .)
    PUTS            reduce using rule 29 (cuerpo -> addValueHash .)
    FOR             reduce using rule 29 (cuerpo -> addValueHash .)
    WHILE           reduce using rule 29 (cuerpo -> addValueHash .)
    TRUE            reduce using rule 29 (cuerpo -> addValueHash .)
    FALSE           reduce using rule 29 (cuerpo -> addValueHash .)
    NUMBER          reduce using rule 29 (cuerpo -> addValueHash .)
    STRING          reduce using rule 29 (cuerpo -> addValueHash .)
    FLOAT           reduce using rule 29 (cuerpo -> addValueHash .)
    LPAR            reduce using rule 29 (cuerpo -> addValueHash .)
    END             reduce using rule 29 (cuerpo -> addValueHash .)
    RETURN          reduce using rule 29 (cuerpo -> addValueHash .)


state 77

    (30) cuerpo -> modValueHash .

    VARIABLE        reduce using rule 30 (cuerpo -> modValueHash .)
    IF              reduce using rule 30 (cuerpo -> modValueHash .)
    PUTS            reduce using rule 30 (cuerpo -> modValueHash .)
    FOR             reduce using rule 30 (cuerpo -> modValueHash .)
    WHILE           reduce using rule 30 (cuerpo -> modValueHash .)
    TRUE            reduce using rule 30 (cuerpo -> modValueHash .)
    FALSE           reduce using rule 30 (cuerpo -> modValueHash .)
    NUMBER          reduce using rule 30 (cuerpo -> modValueHash .)
    STRING          reduce using rule 30 (cuerpo -> modValueHash .)
    FLOAT           reduce using rule 30 (cuerpo -> modValueHash .)
    LPAR            reduce using rule 30 (cuerpo -> modValueHash .)
    END             reduce using rule 30 (cuerpo -> modValueHash .)
    RETURN          reduce using rule 30 (cuerpo -> modValueHash .)


state 78

    (31) cuerpo -> deleteValueHash .

    VARIABLE        reduce using rule 31 (cuerpo -> deleteValueHash .)
    IF              reduce using rule 31 (cuerpo -> deleteValueHash .)
    PUTS            reduce using rule 31 (cuerpo -> deleteValueHash .)
    FOR             reduce using rule 31 (cuerpo -> deleteValueHash .)
    WHILE           reduce using rule 31 (cuerpo -> deleteValueHash .)
    TRUE            reduce using rule 31 (cuerpo -> deleteValueHash .)
    FALSE           reduce using rule 31 (cuerpo -> deleteValueHash .)
    NUMBER          reduce using rule 31 (cuerpo -> deleteValueHash .)
    STRING          reduce using rule 31 (cuerpo -> deleteValueHash .)
    FLOAT           reduce using rule 31 (cuerpo -> deleteValueHash .)
    LPAR            reduce using rule 31 (cuerpo -> deleteValueHash .)
    END             reduce using rule 31 (cuerpo -> deleteValueHash .)
    RETURN          reduce using rule 31 (cuerpo -> deleteValueHash .)


state 79

    (32) cuerpo -> insertArray .

    VARIABLE        reduce using rule 32 (cuerpo -> insertArray .)
    IF              reduce using rule 32 (cuerpo -> insertArray .)
    PUTS            reduce using rule 32 (cuerpo -> insertArray .)
    FOR             reduce using rule 32 (cuerpo -> insertArray .)
    WHILE           reduce using rule 32 (cuerpo -> insertArray .)
    TRUE            reduce using rule 32 (cuerpo -> insertArray .)
    FALSE           reduce using rule 32 (cuerpo -> insertArray .)
    NUMBER          reduce using rule 32 (cuerpo -> insertArray .)
    STRING          reduce using rule 32 (cuerpo -> insertArray .)
    FLOAT           reduce using rule 32 (cuerpo -> insertArray .)
    LPAR            reduce using rule 32 (cuerpo -> insertArray .)
    END             reduce using rule 32 (cuerpo -> insertArray .)
    RETURN          reduce using rule 32 (cuerpo -> insertArray .)


state 80

    (33) cuerpo -> deleteArray .

    VARIABLE        reduce using rule 33 (cuerpo -> deleteArray .)
    IF              reduce using rule 33 (cuerpo -> deleteArray .)
    PUTS            reduce using rule 33 (cuerpo -> deleteArray .)
    FOR             reduce using rule 33 (cuerpo -> deleteArray .)
    WHILE           reduce using rule 33 (cuerpo -> deleteArray .)
    TRUE            reduce using rule 33 (cuerpo -> deleteArray .)
    FALSE           reduce using rule 33 (cuerpo -> deleteArray .)
    NUMBER          reduce using rule 33 (cuerpo -> deleteArray .)
    STRING          reduce using rule 33 (cuerpo -> deleteArray .)
    FLOAT           reduce using rule 33 (cuerpo -> deleteArray .)
    LPAR            reduce using rule 33 (cuerpo -> deleteArray .)
    END             reduce using rule 33 (cuerpo -> deleteArray .)
    RETURN          reduce using rule 33 (cuerpo -> deleteArray .)


state 81

    (34) cuerpo -> pushStack .

    VARIABLE        reduce using rule 34 (cuerpo -> pushStack .)
    IF              reduce using rule 34 (cuerpo -> pushStack .)
    PUTS            reduce using rule 34 (cuerpo -> pushStack .)
    FOR             reduce using rule 34 (cuerpo -> pushStack .)
    WHILE           reduce using rule 34 (cuerpo -> pushStack .)
    TRUE            reduce using rule 34 (cuerpo -> pushStack .)
    FALSE           reduce using rule 34 (cuerpo -> pushStack .)
    NUMBER          reduce using rule 34 (cuerpo -> pushStack .)
    STRING          reduce using rule 34 (cuerpo -> pushStack .)
    FLOAT           reduce using rule 34 (cuerpo -> pushStack .)
    LPAR            reduce using rule 34 (cuerpo -> pushStack .)
    END             reduce using rule 34 (cuerpo -> pushStack .)
    RETURN          reduce using rule 34 (cuerpo -> pushStack .)


state 82

    (35) cuerpo -> searchStack .

    VARIABLE        reduce using rule 35 (cuerpo -> searchStack .)
    IF              reduce using rule 35 (cuerpo -> searchStack .)
    PUTS            reduce using rule 35 (cuerpo -> searchStack .)
    FOR             reduce using rule 35 (cuerpo -> searchStack .)
    WHILE           reduce using rule 35 (cuerpo -> searchStack .)
    TRUE            reduce using rule 35 (cuerpo -> searchStack .)
    FALSE           reduce using rule 35 (cuerpo -> searchStack .)
    NUMBER          reduce using rule 35 (cuerpo -> searchStack .)
    STRING          reduce using rule 35 (cuerpo -> searchStack .)
    FLOAT           reduce using rule 35 (cuerpo -> searchStack .)
    LPAR            reduce using rule 35 (cuerpo -> searchStack .)
    END             reduce using rule 35 (cuerpo -> searchStack .)
    RETURN          reduce using rule 35 (cuerpo -> searchStack .)


state 83

    (36) asignacion -> VARIABLE . ASIGN expression
    (37) asignacion -> VARIABLE . ASIGN comparacion
    (38) asignacion -> VARIABLE . ASIGN callFuncion
    (39) asignacion -> VARIABLE . ASIGN diccionario
    (40) asignacion -> VARIABLE . ASIGN getValueHash
    (41) asignacion -> VARIABLE . ASIGN array
    (42) asignacion -> VARIABLE . ASIGN stack
    (43) asignacion -> VARIABLE . tipo_asignacion factor
    (44) asignacion -> VARIABLE . ASIGN opMatematicas
    (70) input -> VARIABLE . ASIGN GETS
    (135) callFuncion -> VARIABLE . LPAR RPAR
    (136) callFuncion -> VARIABLE . LPAR parametros RPAR
    (77) addValueHash -> VARIABLE . LCOR expression RCOR ASIGN expression
    (78) modValueHash -> VARIABLE . LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> VARIABLE . POINT DELETE LPAR expression RPAR
    (91) insertArray -> VARIABLE . POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> VARIABLE . POINT DELETE_AT LPAR NUMBER RPAR
    (99) pushStack -> VARIABLE . POINT PUSH LPAR factor RPAR
    (98) searchStack -> VARIABLE . POINT SEARCH LPAR factor RPAR
    (56) factor -> VARIABLE .
    (45) tipo_asignacion -> . PLUS ASIGN
    (46) tipo_asignacion -> . MINUS ASIGN
    (47) tipo_asignacion -> . TIMES ASIGN
    (48) tipo_asignacion -> . DIVIDE ASIGN
    (49) tipo_asignacion -> . EXPONENTIATION ASIGN

  ! shift/reduce conflict for ASIGN resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
    ASIGN           shift and go to state 54
    LPAR            shift and go to state 56
    LCOR            shift and go to state 57
    POINT           shift and go to state 145
    AND             reduce using rule 56 (factor -> VARIABLE .)
    OR              reduce using rule 56 (factor -> VARIABLE .)
    GREATER         reduce using rule 56 (factor -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 56 (factor -> VARIABLE .)
    MINOR           reduce using rule 56 (factor -> VARIABLE .)
    MINOR_OR_EQUAL  reduce using rule 56 (factor -> VARIABLE .)
    NOT             reduce using rule 56 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 56 (factor -> VARIABLE .)
    IF              reduce using rule 56 (factor -> VARIABLE .)
    PUTS            reduce using rule 56 (factor -> VARIABLE .)
    FOR             reduce using rule 56 (factor -> VARIABLE .)
    WHILE           reduce using rule 56 (factor -> VARIABLE .)
    TRUE            reduce using rule 56 (factor -> VARIABLE .)
    FALSE           reduce using rule 56 (factor -> VARIABLE .)
    NUMBER          reduce using rule 56 (factor -> VARIABLE .)
    STRING          reduce using rule 56 (factor -> VARIABLE .)
    FLOAT           reduce using rule 56 (factor -> VARIABLE .)
    END             reduce using rule 56 (factor -> VARIABLE .)
    RETURN          reduce using rule 56 (factor -> VARIABLE .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    EXPONENTIATION  shift and go to state 63

  ! ASIGN           [ reduce using rule 56 (factor -> VARIABLE .) ]
  ! LPAR            [ reduce using rule 56 (factor -> VARIABLE .) ]

    tipo_asignacion                shift and go to state 55

state 84

    (53) factor -> NUMBER .

    AND             reduce using rule 53 (factor -> NUMBER .)
    OR              reduce using rule 53 (factor -> NUMBER .)
    GREATER         reduce using rule 53 (factor -> NUMBER .)
    GREATER_OR_EQUAL reduce using rule 53 (factor -> NUMBER .)
    MINOR           reduce using rule 53 (factor -> NUMBER .)
    MINOR_OR_EQUAL  reduce using rule 53 (factor -> NUMBER .)
    ASIGN           reduce using rule 53 (factor -> NUMBER .)
    NOT             reduce using rule 53 (factor -> NUMBER .)
    VARIABLE        reduce using rule 53 (factor -> NUMBER .)
    IF              reduce using rule 53 (factor -> NUMBER .)
    PUTS            reduce using rule 53 (factor -> NUMBER .)
    FOR             reduce using rule 53 (factor -> NUMBER .)
    WHILE           reduce using rule 53 (factor -> NUMBER .)
    TRUE            reduce using rule 53 (factor -> NUMBER .)
    FALSE           reduce using rule 53 (factor -> NUMBER .)
    NUMBER          reduce using rule 53 (factor -> NUMBER .)
    STRING          reduce using rule 53 (factor -> NUMBER .)
    FLOAT           reduce using rule 53 (factor -> NUMBER .)
    LPAR            reduce using rule 53 (factor -> NUMBER .)
    END             reduce using rule 53 (factor -> NUMBER .)
    RETURN          reduce using rule 53 (factor -> NUMBER .)
    $end            reduce using rule 53 (factor -> NUMBER .)
    D_POINT         reduce using rule 53 (factor -> NUMBER .)
    RPAR            reduce using rule 53 (factor -> NUMBER .)
    RCOR            reduce using rule 53 (factor -> NUMBER .)
    COMMA           reduce using rule 53 (factor -> NUMBER .)
    RKEY            reduce using rule 53 (factor -> NUMBER .)


state 85

    (57) factor -> LPAR . expression RPAR
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 93
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 86

    (55) factor -> FLOAT .

    AND             reduce using rule 55 (factor -> FLOAT .)
    OR              reduce using rule 55 (factor -> FLOAT .)
    GREATER         reduce using rule 55 (factor -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 55 (factor -> FLOAT .)
    MINOR           reduce using rule 55 (factor -> FLOAT .)
    MINOR_OR_EQUAL  reduce using rule 55 (factor -> FLOAT .)
    ASIGN           reduce using rule 55 (factor -> FLOAT .)
    NOT             reduce using rule 55 (factor -> FLOAT .)
    VARIABLE        reduce using rule 55 (factor -> FLOAT .)
    IF              reduce using rule 55 (factor -> FLOAT .)
    PUTS            reduce using rule 55 (factor -> FLOAT .)
    FOR             reduce using rule 55 (factor -> FLOAT .)
    WHILE           reduce using rule 55 (factor -> FLOAT .)
    TRUE            reduce using rule 55 (factor -> FLOAT .)
    FALSE           reduce using rule 55 (factor -> FLOAT .)
    NUMBER          reduce using rule 55 (factor -> FLOAT .)
    STRING          reduce using rule 55 (factor -> FLOAT .)
    FLOAT           reduce using rule 55 (factor -> FLOAT .)
    LPAR            reduce using rule 55 (factor -> FLOAT .)
    END             reduce using rule 55 (factor -> FLOAT .)
    RETURN          reduce using rule 55 (factor -> FLOAT .)
    $end            reduce using rule 55 (factor -> FLOAT .)
    D_POINT         reduce using rule 55 (factor -> FLOAT .)
    RPAR            reduce using rule 55 (factor -> FLOAT .)
    RCOR            reduce using rule 55 (factor -> FLOAT .)
    COMMA           reduce using rule 55 (factor -> FLOAT .)
    RKEY            reduce using rule 55 (factor -> FLOAT .)


state 87

    (137) condicional -> IF comparacion . D_POINT repCuerpo END
    (138) condicional -> IF comparacion . D_POINT repCuerpo END cond_else

    D_POINT         shift and go to state 148


state 88

    (58) comparacion -> expression . comparador expression
    (59) comparacion -> expression . comparador expression AND comparacion
    (60) comparacion -> expression . comparador expression OR comparacion
    (61) comparacion -> expression . AND expression
    (62) comparacion -> expression . OR expression
    (63) comparador -> . GREATER
    (64) comparador -> . GREATER_OR_EQUAL
    (65) comparador -> . MINOR
    (66) comparador -> . MINOR_OR_EQUAL
    (67) comparador -> . ASIGN ASIGN
    (68) comparador -> . NOT ASIGN

    AND             shift and go to state 46
    OR              shift and go to state 47
    GREATER         shift and go to state 48
    GREATER_OR_EQUAL shift and go to state 49
    MINOR           shift and go to state 50
    MINOR_OR_EQUAL  shift and go to state 51
    ASIGN           shift and go to state 52
    NOT             shift and go to state 53

    comparador                     shift and go to state 45

state 89

    (56) factor -> VARIABLE .

    AND             reduce using rule 56 (factor -> VARIABLE .)
    OR              reduce using rule 56 (factor -> VARIABLE .)
    GREATER         reduce using rule 56 (factor -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 56 (factor -> VARIABLE .)
    MINOR           reduce using rule 56 (factor -> VARIABLE .)
    MINOR_OR_EQUAL  reduce using rule 56 (factor -> VARIABLE .)
    ASIGN           reduce using rule 56 (factor -> VARIABLE .)
    NOT             reduce using rule 56 (factor -> VARIABLE .)
    $end            reduce using rule 56 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 56 (factor -> VARIABLE .)
    IF              reduce using rule 56 (factor -> VARIABLE .)
    PUTS            reduce using rule 56 (factor -> VARIABLE .)
    FOR             reduce using rule 56 (factor -> VARIABLE .)
    WHILE           reduce using rule 56 (factor -> VARIABLE .)
    TRUE            reduce using rule 56 (factor -> VARIABLE .)
    FALSE           reduce using rule 56 (factor -> VARIABLE .)
    NUMBER          reduce using rule 56 (factor -> VARIABLE .)
    STRING          reduce using rule 56 (factor -> VARIABLE .)
    FLOAT           reduce using rule 56 (factor -> VARIABLE .)
    LPAR            reduce using rule 56 (factor -> VARIABLE .)
    END             reduce using rule 56 (factor -> VARIABLE .)
    RETURN          reduce using rule 56 (factor -> VARIABLE .)
    D_POINT         reduce using rule 56 (factor -> VARIABLE .)
    RPAR            reduce using rule 56 (factor -> VARIABLE .)
    RCOR            reduce using rule 56 (factor -> VARIABLE .)
    COMMA           reduce using rule 56 (factor -> VARIABLE .)
    RKEY            reduce using rule 56 (factor -> VARIABLE .)


state 90

    (82) while -> WHILE LPAR . comparacion RPAR repCuerpo END
    (83) while -> WHILE LPAR . comparacion RPAR repCuerpo END while
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    comparacion                    shift and go to state 149
    expression                     shift and go to state 88
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 91

    (122) exponenciacion -> LPAR operadores . RPAR EXPONENTIATION operadores
    (106) suma -> operadores . PLUS operadores
    (107) suma -> operadores . PLUS opMatematicas
    (108) suma -> operadores . PLUS LPAR operadores RPAR
    (109) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (111) resta -> operadores . MINUS operadores
    (112) resta -> operadores . MINUS opMatematicas
    (113) resta -> operadores . MINUS LPAR operadores RPAR
    (114) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> operadores . TIMES operadores
    (116) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (117) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (118) division -> operadores . DIVIDE operadores
    (119) division -> operadores . DIVIDE LPAR operadores RPAR
    (120) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 150
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    EXPONENTIATION  shift and go to state 104


state 92

    (123) exponenciacion -> LPAR opMatematicas . RPAR EXPONENTIATION operadores

    RPAR            shift and go to state 151


state 93

    (57) factor -> LPAR expression . RPAR

    RPAR            shift and go to state 152


state 94

    (125) operadores -> FLOAT .
    (55) factor -> FLOAT .

  ! reduce/reduce conflict for RPAR resolved using rule 55 (factor -> FLOAT .)
    PLUS            reduce using rule 125 (operadores -> FLOAT .)
    MINUS           reduce using rule 125 (operadores -> FLOAT .)
    TIMES           reduce using rule 125 (operadores -> FLOAT .)
    DIVIDE          reduce using rule 125 (operadores -> FLOAT .)
    EXPONENTIATION  reduce using rule 125 (operadores -> FLOAT .)
    RPAR            reduce using rule 55 (factor -> FLOAT .)

  ! RPAR            [ reduce using rule 125 (operadores -> FLOAT .) ]


state 95

    (126) enteros -> NUMBER .
    (53) factor -> NUMBER .

  ! reduce/reduce conflict for RPAR resolved using rule 53 (factor -> NUMBER .)
    PLUS            reduce using rule 126 (enteros -> NUMBER .)
    MINUS           reduce using rule 126 (enteros -> NUMBER .)
    TIMES           reduce using rule 126 (enteros -> NUMBER .)
    DIVIDE          reduce using rule 126 (enteros -> NUMBER .)
    EXPONENTIATION  reduce using rule 126 (enteros -> NUMBER .)
    RPAR            reduce using rule 53 (factor -> NUMBER .)

  ! RPAR            [ reduce using rule 126 (enteros -> NUMBER .) ]


state 96

    (105) suma -> VARIABLE . PLUS NUMBER
    (110) resta -> VARIABLE . MINUS NUMBER
    (56) factor -> VARIABLE .

    PLUS            shift and go to state 153
    MINUS           shift and go to state 154
    RPAR            reduce using rule 56 (factor -> VARIABLE .)


state 97

    (93) for -> FOR VARIABLE . IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> FOR VARIABLE . IN NUMBER POINT POINT NUMBER DO repCuerpo END for

    IN              shift and go to state 155


state 98

    (69) impresion -> PUTS factor .

    $end            reduce using rule 69 (impresion -> PUTS factor .)
    VARIABLE        reduce using rule 69 (impresion -> PUTS factor .)
    IF              reduce using rule 69 (impresion -> PUTS factor .)
    PUTS            reduce using rule 69 (impresion -> PUTS factor .)
    FOR             reduce using rule 69 (impresion -> PUTS factor .)
    WHILE           reduce using rule 69 (impresion -> PUTS factor .)
    TRUE            reduce using rule 69 (impresion -> PUTS factor .)
    FALSE           reduce using rule 69 (impresion -> PUTS factor .)
    NUMBER          reduce using rule 69 (impresion -> PUTS factor .)
    STRING          reduce using rule 69 (impresion -> PUTS factor .)
    FLOAT           reduce using rule 69 (impresion -> PUTS factor .)
    LPAR            reduce using rule 69 (impresion -> PUTS factor .)
    END             reduce using rule 69 (impresion -> PUTS factor .)
    RETURN          reduce using rule 69 (impresion -> PUTS factor .)


state 99

    (130) encabezado -> DEF VARIABLE . LPAR RPAR
    (131) encabezado -> DEF VARIABLE . LPAR parametros RPAR

    LPAR            shift and go to state 156


state 100

    (106) suma -> operadores PLUS . operadores
    (107) suma -> operadores PLUS . opMatematicas
    (108) suma -> operadores PLUS . LPAR operadores RPAR
    (109) suma -> operadores PLUS . LPAR opMatematicas RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    LPAR            shift and go to state 159
    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41
    VARIABLE        shift and go to state 162

    operadores                     shift and go to state 157
    opMatematicas                  shift and go to state 158
    enteros                        shift and go to state 44
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36

state 101

    (111) resta -> operadores MINUS . operadores
    (112) resta -> operadores MINUS . opMatematicas
    (113) resta -> operadores MINUS . LPAR operadores RPAR
    (114) resta -> operadores MINUS . LPAR opMatematicas RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    LPAR            shift and go to state 165
    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41
    VARIABLE        shift and go to state 162

    operadores                     shift and go to state 163
    opMatematicas                  shift and go to state 164
    enteros                        shift and go to state 44
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36

state 102

    (115) multiplicacion -> operadores TIMES . operadores
    (116) multiplicacion -> operadores TIMES . LPAR operadores RPAR
    (117) multiplicacion -> operadores TIMES . LPAR opMatematicas RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER

    LPAR            shift and go to state 167
    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41

    operadores                     shift and go to state 166
    enteros                        shift and go to state 44

state 103

    (118) division -> operadores DIVIDE . operadores
    (119) division -> operadores DIVIDE . LPAR operadores RPAR
    (120) division -> operadores DIVIDE . LPAR opMatematicas RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER

    LPAR            shift and go to state 169
    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41

    operadores                     shift and go to state 168
    enteros                        shift and go to state 44

state 104

    (121) exponenciacion -> operadores EXPONENTIATION . operadores
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER

    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41

    operadores                     shift and go to state 170
    enteros                        shift and go to state 44

state 105

    (127) enteros -> MINUS NUMBER .

    PLUS            reduce using rule 127 (enteros -> MINUS NUMBER .)
    MINUS           reduce using rule 127 (enteros -> MINUS NUMBER .)
    TIMES           reduce using rule 127 (enteros -> MINUS NUMBER .)
    DIVIDE          reduce using rule 127 (enteros -> MINUS NUMBER .)
    EXPONENTIATION  reduce using rule 127 (enteros -> MINUS NUMBER .)
    RPAR            reduce using rule 127 (enteros -> MINUS NUMBER .)
    $end            reduce using rule 127 (enteros -> MINUS NUMBER .)
    VARIABLE        reduce using rule 127 (enteros -> MINUS NUMBER .)
    IF              reduce using rule 127 (enteros -> MINUS NUMBER .)
    PUTS            reduce using rule 127 (enteros -> MINUS NUMBER .)
    FOR             reduce using rule 127 (enteros -> MINUS NUMBER .)
    WHILE           reduce using rule 127 (enteros -> MINUS NUMBER .)
    TRUE            reduce using rule 127 (enteros -> MINUS NUMBER .)
    FALSE           reduce using rule 127 (enteros -> MINUS NUMBER .)
    NUMBER          reduce using rule 127 (enteros -> MINUS NUMBER .)
    STRING          reduce using rule 127 (enteros -> MINUS NUMBER .)
    FLOAT           reduce using rule 127 (enteros -> MINUS NUMBER .)
    LPAR            reduce using rule 127 (enteros -> MINUS NUMBER .)
    END             reduce using rule 127 (enteros -> MINUS NUMBER .)
    RETURN          reduce using rule 127 (enteros -> MINUS NUMBER .)


state 106

    (58) comparacion -> expression comparador expression .
    (59) comparacion -> expression comparador expression . AND comparacion
    (60) comparacion -> expression comparador expression . OR comparacion

    $end            reduce using rule 58 (comparacion -> expression comparador expression .)
    VARIABLE        reduce using rule 58 (comparacion -> expression comparador expression .)
    IF              reduce using rule 58 (comparacion -> expression comparador expression .)
    PUTS            reduce using rule 58 (comparacion -> expression comparador expression .)
    FOR             reduce using rule 58 (comparacion -> expression comparador expression .)
    WHILE           reduce using rule 58 (comparacion -> expression comparador expression .)
    TRUE            reduce using rule 58 (comparacion -> expression comparador expression .)
    FALSE           reduce using rule 58 (comparacion -> expression comparador expression .)
    NUMBER          reduce using rule 58 (comparacion -> expression comparador expression .)
    STRING          reduce using rule 58 (comparacion -> expression comparador expression .)
    FLOAT           reduce using rule 58 (comparacion -> expression comparador expression .)
    LPAR            reduce using rule 58 (comparacion -> expression comparador expression .)
    END             reduce using rule 58 (comparacion -> expression comparador expression .)
    RETURN          reduce using rule 58 (comparacion -> expression comparador expression .)
    D_POINT         reduce using rule 58 (comparacion -> expression comparador expression .)
    RPAR            reduce using rule 58 (comparacion -> expression comparador expression .)
    AND             shift and go to state 171
    OR              shift and go to state 172


state 107

    (61) comparacion -> expression AND expression .

    $end            reduce using rule 61 (comparacion -> expression AND expression .)
    VARIABLE        reduce using rule 61 (comparacion -> expression AND expression .)
    IF              reduce using rule 61 (comparacion -> expression AND expression .)
    PUTS            reduce using rule 61 (comparacion -> expression AND expression .)
    FOR             reduce using rule 61 (comparacion -> expression AND expression .)
    WHILE           reduce using rule 61 (comparacion -> expression AND expression .)
    TRUE            reduce using rule 61 (comparacion -> expression AND expression .)
    FALSE           reduce using rule 61 (comparacion -> expression AND expression .)
    NUMBER          reduce using rule 61 (comparacion -> expression AND expression .)
    STRING          reduce using rule 61 (comparacion -> expression AND expression .)
    FLOAT           reduce using rule 61 (comparacion -> expression AND expression .)
    LPAR            reduce using rule 61 (comparacion -> expression AND expression .)
    END             reduce using rule 61 (comparacion -> expression AND expression .)
    RETURN          reduce using rule 61 (comparacion -> expression AND expression .)
    D_POINT         reduce using rule 61 (comparacion -> expression AND expression .)
    RPAR            reduce using rule 61 (comparacion -> expression AND expression .)


state 108

    (62) comparacion -> expression OR expression .

    $end            reduce using rule 62 (comparacion -> expression OR expression .)
    VARIABLE        reduce using rule 62 (comparacion -> expression OR expression .)
    IF              reduce using rule 62 (comparacion -> expression OR expression .)
    PUTS            reduce using rule 62 (comparacion -> expression OR expression .)
    FOR             reduce using rule 62 (comparacion -> expression OR expression .)
    WHILE           reduce using rule 62 (comparacion -> expression OR expression .)
    TRUE            reduce using rule 62 (comparacion -> expression OR expression .)
    FALSE           reduce using rule 62 (comparacion -> expression OR expression .)
    NUMBER          reduce using rule 62 (comparacion -> expression OR expression .)
    STRING          reduce using rule 62 (comparacion -> expression OR expression .)
    FLOAT           reduce using rule 62 (comparacion -> expression OR expression .)
    LPAR            reduce using rule 62 (comparacion -> expression OR expression .)
    END             reduce using rule 62 (comparacion -> expression OR expression .)
    RETURN          reduce using rule 62 (comparacion -> expression OR expression .)
    D_POINT         reduce using rule 62 (comparacion -> expression OR expression .)
    RPAR            reduce using rule 62 (comparacion -> expression OR expression .)


state 109

    (67) comparador -> ASIGN ASIGN .

    TRUE            reduce using rule 67 (comparador -> ASIGN ASIGN .)
    FALSE           reduce using rule 67 (comparador -> ASIGN ASIGN .)
    NUMBER          reduce using rule 67 (comparador -> ASIGN ASIGN .)
    STRING          reduce using rule 67 (comparador -> ASIGN ASIGN .)
    FLOAT           reduce using rule 67 (comparador -> ASIGN ASIGN .)
    VARIABLE        reduce using rule 67 (comparador -> ASIGN ASIGN .)
    LPAR            reduce using rule 67 (comparador -> ASIGN ASIGN .)


state 110

    (68) comparador -> NOT ASIGN .

    TRUE            reduce using rule 68 (comparador -> NOT ASIGN .)
    FALSE           reduce using rule 68 (comparador -> NOT ASIGN .)
    NUMBER          reduce using rule 68 (comparador -> NOT ASIGN .)
    STRING          reduce using rule 68 (comparador -> NOT ASIGN .)
    FLOAT           reduce using rule 68 (comparador -> NOT ASIGN .)
    VARIABLE        reduce using rule 68 (comparador -> NOT ASIGN .)
    LPAR            reduce using rule 68 (comparador -> NOT ASIGN .)


state 111

    (135) callFuncion -> VARIABLE . LPAR RPAR
    (136) callFuncion -> VARIABLE . LPAR parametros RPAR
    (76) getValueHash -> VARIABLE . LCOR expression RCOR
    (105) suma -> VARIABLE . PLUS NUMBER
    (110) resta -> VARIABLE . MINUS NUMBER
    (56) factor -> VARIABLE .

  ! shift/reduce conflict for LPAR resolved as shift
    LPAR            shift and go to state 56
    LCOR            shift and go to state 173
    PLUS            shift and go to state 153
    MINUS           shift and go to state 154
    AND             reduce using rule 56 (factor -> VARIABLE .)
    OR              reduce using rule 56 (factor -> VARIABLE .)
    GREATER         reduce using rule 56 (factor -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 56 (factor -> VARIABLE .)
    MINOR           reduce using rule 56 (factor -> VARIABLE .)
    MINOR_OR_EQUAL  reduce using rule 56 (factor -> VARIABLE .)
    ASIGN           reduce using rule 56 (factor -> VARIABLE .)
    NOT             reduce using rule 56 (factor -> VARIABLE .)
    $end            reduce using rule 56 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 56 (factor -> VARIABLE .)
    IF              reduce using rule 56 (factor -> VARIABLE .)
    PUTS            reduce using rule 56 (factor -> VARIABLE .)
    FOR             reduce using rule 56 (factor -> VARIABLE .)
    WHILE           reduce using rule 56 (factor -> VARIABLE .)
    TRUE            reduce using rule 56 (factor -> VARIABLE .)
    FALSE           reduce using rule 56 (factor -> VARIABLE .)
    NUMBER          reduce using rule 56 (factor -> VARIABLE .)
    STRING          reduce using rule 56 (factor -> VARIABLE .)
    FLOAT           reduce using rule 56 (factor -> VARIABLE .)
    END             reduce using rule 56 (factor -> VARIABLE .)
    RETURN          reduce using rule 56 (factor -> VARIABLE .)

  ! LPAR            [ reduce using rule 56 (factor -> VARIABLE .) ]


state 112

    (36) asignacion -> VARIABLE ASIGN expression .
    (58) comparacion -> expression . comparador expression
    (59) comparacion -> expression . comparador expression AND comparacion
    (60) comparacion -> expression . comparador expression OR comparacion
    (61) comparacion -> expression . AND expression
    (62) comparacion -> expression . OR expression
    (63) comparador -> . GREATER
    (64) comparador -> . GREATER_OR_EQUAL
    (65) comparador -> . MINOR
    (66) comparador -> . MINOR_OR_EQUAL
    (67) comparador -> . ASIGN ASIGN
    (68) comparador -> . NOT ASIGN

    $end            reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    VARIABLE        reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    IF              reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    PUTS            reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    FOR             reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    WHILE           reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    TRUE            reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    FALSE           reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    NUMBER          reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    STRING          reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    FLOAT           reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    LPAR            reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    END             reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    RETURN          reduce using rule 36 (asignacion -> VARIABLE ASIGN expression .)
    AND             shift and go to state 46
    OR              shift and go to state 47
    GREATER         shift and go to state 48
    GREATER_OR_EQUAL shift and go to state 49
    MINOR           shift and go to state 50
    MINOR_OR_EQUAL  shift and go to state 51
    ASIGN           shift and go to state 52
    NOT             shift and go to state 53

    comparador                     shift and go to state 45

state 113

    (37) asignacion -> VARIABLE ASIGN comparacion .

    $end            reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    VARIABLE        reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    IF              reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    PUTS            reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    FOR             reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    WHILE           reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    TRUE            reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    FALSE           reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    NUMBER          reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    STRING          reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    FLOAT           reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    LPAR            reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    END             reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)
    RETURN          reduce using rule 37 (asignacion -> VARIABLE ASIGN comparacion .)


state 114

    (38) asignacion -> VARIABLE ASIGN callFuncion .

    $end            reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    VARIABLE        reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    IF              reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    PUTS            reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    FOR             reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    WHILE           reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    TRUE            reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    FALSE           reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    NUMBER          reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    STRING          reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    FLOAT           reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    LPAR            reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    END             reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)
    RETURN          reduce using rule 38 (asignacion -> VARIABLE ASIGN callFuncion .)


state 115

    (39) asignacion -> VARIABLE ASIGN diccionario .

    $end            reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    VARIABLE        reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    IF              reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    PUTS            reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    FOR             reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    WHILE           reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    TRUE            reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    FALSE           reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    NUMBER          reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    STRING          reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    FLOAT           reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    LPAR            reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    END             reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)
    RETURN          reduce using rule 39 (asignacion -> VARIABLE ASIGN diccionario .)


state 116

    (40) asignacion -> VARIABLE ASIGN getValueHash .

    $end            reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    VARIABLE        reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    IF              reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    PUTS            reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    FOR             reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    WHILE           reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    TRUE            reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    FALSE           reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    NUMBER          reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    STRING          reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    FLOAT           reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    LPAR            reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    END             reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)
    RETURN          reduce using rule 40 (asignacion -> VARIABLE ASIGN getValueHash .)


state 117

    (41) asignacion -> VARIABLE ASIGN array .

    $end            reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    VARIABLE        reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    IF              reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    PUTS            reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    FOR             reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    WHILE           reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    TRUE            reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    FALSE           reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    NUMBER          reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    STRING          reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    FLOAT           reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    LPAR            reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    END             reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)
    RETURN          reduce using rule 41 (asignacion -> VARIABLE ASIGN array .)


state 118

    (42) asignacion -> VARIABLE ASIGN stack .

    $end            reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    VARIABLE        reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    IF              reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    PUTS            reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    FOR             reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    WHILE           reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    TRUE            reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    FALSE           reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    NUMBER          reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    STRING          reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    FLOAT           reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    LPAR            reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    END             reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)
    RETURN          reduce using rule 42 (asignacion -> VARIABLE ASIGN stack .)


state 119

    (44) asignacion -> VARIABLE ASIGN opMatematicas .

    $end            reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    VARIABLE        reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    IF              reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    PUTS            reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    FOR             reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    WHILE           reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    TRUE            reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    FALSE           reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    NUMBER          reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    STRING          reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    FLOAT           reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    LPAR            reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    END             reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)
    RETURN          reduce using rule 44 (asignacion -> VARIABLE ASIGN opMatematicas .)


state 120

    (70) input -> VARIABLE ASIGN GETS .

    $end            reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    VARIABLE        reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    IF              reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    PUTS            reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    FOR             reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    WHILE           reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    TRUE            reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    FALSE           reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    NUMBER          reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    STRING          reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    FLOAT           reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    LPAR            reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    END             reduce using rule 70 (input -> VARIABLE ASIGN GETS .)
    RETURN          reduce using rule 70 (input -> VARIABLE ASIGN GETS .)


state 121

    (73) diccionario -> LKEY . cuerpoHash RKEY
    (74) cuerpoHash -> . expression ASIGN GREATER expression
    (75) cuerpoHash -> . expression ASIGN GREATER expression COMMA cuerpoHash
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    cuerpoHash                     shift and go to state 174
    expression                     shift and go to state 175
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 122

    (88) array -> LCOR . parametrosA RCOR
    (89) array -> LCOR . RCOR
    (96) stack -> LCOR . parametrosA RCOR
    (97) stack -> LCOR . vacio RCOR
    (86) parametrosA -> . factor
    (87) parametrosA -> . factor COMMA parametrosA
    (95) vacio -> . 
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    RCOR            shift and go to state 177
                    shift and go to state 180
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    parametrosA                    shift and go to state 176
    vacio                          shift and go to state 178
    factor                         shift and go to state 179

state 123

    (43) asignacion -> VARIABLE tipo_asignacion factor .

    $end            reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    VARIABLE        reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    IF              reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    PUTS            reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    FOR             reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    WHILE           reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    TRUE            reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    FALSE           reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    NUMBER          reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    STRING          reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    FLOAT           reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    LPAR            reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    END             reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)
    RETURN          reduce using rule 43 (asignacion -> VARIABLE tipo_asignacion factor .)


state 124

    (128) parametros -> VARIABLE .
    (129) parametros -> VARIABLE . COMMA parametros

    RPAR            reduce using rule 128 (parametros -> VARIABLE .)
    COMMA           shift and go to state 181


state 125

    (135) callFuncion -> VARIABLE LPAR RPAR .

    $end            reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    VARIABLE        reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    IF              reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    PUTS            reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    FOR             reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    WHILE           reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    TRUE            reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    FALSE           reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    NUMBER          reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    STRING          reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    FLOAT           reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    LPAR            reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    END             reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)
    RETURN          reduce using rule 135 (callFuncion -> VARIABLE LPAR RPAR .)


state 126

    (136) callFuncion -> VARIABLE LPAR parametros . RPAR

    RPAR            shift and go to state 182


state 127

    (77) addValueHash -> VARIABLE LCOR expression . RCOR ASIGN expression
    (78) modValueHash -> VARIABLE LCOR expression . RCOR ASIGN expression

    RCOR            shift and go to state 183


state 128

    (80) metodoBoleano -> VARIABLE POINT VARIABLE . QUESTION LPAR expression RPAR
    (81) metodoBoleano -> VARIABLE POINT VARIABLE . QUESTION LPAR RPAR

    QUESTION        shift and go to state 184


state 129

    (79) deleteValueHash -> VARIABLE POINT DELETE . LPAR expression RPAR

    LPAR            shift and go to state 185


state 130

    (91) insertArray -> VARIABLE POINT INSERT . LPAR argumentosA RPAR

    LPAR            shift and go to state 186


state 131

    (92) deleteArray -> VARIABLE POINT DELETE_AT . LPAR NUMBER RPAR

    LPAR            shift and go to state 187


state 132

    (98) searchStack -> VARIABLE POINT SEARCH . LPAR factor RPAR

    LPAR            shift and go to state 188


state 133

    (99) pushStack -> VARIABLE POINT PUSH . LPAR factor RPAR

    LPAR            shift and go to state 189


state 134

    (105) suma -> VARIABLE PLUS NUMBER .

    $end            reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    RPAR            reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    VARIABLE        reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    IF              reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    PUTS            reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    FOR             reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    WHILE           reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    TRUE            reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    FALSE           reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    NUMBER          reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    STRING          reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    FLOAT           reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    LPAR            reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    END             reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)
    RETURN          reduce using rule 105 (suma -> VARIABLE PLUS NUMBER .)


state 135

    (45) tipo_asignacion -> PLUS ASIGN .

    NUMBER          reduce using rule 45 (tipo_asignacion -> PLUS ASIGN .)
    STRING          reduce using rule 45 (tipo_asignacion -> PLUS ASIGN .)
    FLOAT           reduce using rule 45 (tipo_asignacion -> PLUS ASIGN .)
    VARIABLE        reduce using rule 45 (tipo_asignacion -> PLUS ASIGN .)
    LPAR            reduce using rule 45 (tipo_asignacion -> PLUS ASIGN .)


state 136

    (110) resta -> VARIABLE MINUS NUMBER .

    $end            reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    RPAR            reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    VARIABLE        reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    IF              reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    PUTS            reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    FOR             reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    WHILE           reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    TRUE            reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    FALSE           reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    NUMBER          reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    STRING          reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    FLOAT           reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    LPAR            reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    END             reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)
    RETURN          reduce using rule 110 (resta -> VARIABLE MINUS NUMBER .)


state 137

    (46) tipo_asignacion -> MINUS ASIGN .

    NUMBER          reduce using rule 46 (tipo_asignacion -> MINUS ASIGN .)
    STRING          reduce using rule 46 (tipo_asignacion -> MINUS ASIGN .)
    FLOAT           reduce using rule 46 (tipo_asignacion -> MINUS ASIGN .)
    VARIABLE        reduce using rule 46 (tipo_asignacion -> MINUS ASIGN .)
    LPAR            reduce using rule 46 (tipo_asignacion -> MINUS ASIGN .)


state 138

    (47) tipo_asignacion -> TIMES ASIGN .

    NUMBER          reduce using rule 47 (tipo_asignacion -> TIMES ASIGN .)
    STRING          reduce using rule 47 (tipo_asignacion -> TIMES ASIGN .)
    FLOAT           reduce using rule 47 (tipo_asignacion -> TIMES ASIGN .)
    VARIABLE        reduce using rule 47 (tipo_asignacion -> TIMES ASIGN .)
    LPAR            reduce using rule 47 (tipo_asignacion -> TIMES ASIGN .)


state 139

    (48) tipo_asignacion -> DIVIDE ASIGN .

    NUMBER          reduce using rule 48 (tipo_asignacion -> DIVIDE ASIGN .)
    STRING          reduce using rule 48 (tipo_asignacion -> DIVIDE ASIGN .)
    FLOAT           reduce using rule 48 (tipo_asignacion -> DIVIDE ASIGN .)
    VARIABLE        reduce using rule 48 (tipo_asignacion -> DIVIDE ASIGN .)
    LPAR            reduce using rule 48 (tipo_asignacion -> DIVIDE ASIGN .)


state 140

    (49) tipo_asignacion -> EXPONENTIATION ASIGN .

    NUMBER          reduce using rule 49 (tipo_asignacion -> EXPONENTIATION ASIGN .)
    STRING          reduce using rule 49 (tipo_asignacion -> EXPONENTIATION ASIGN .)
    FLOAT           reduce using rule 49 (tipo_asignacion -> EXPONENTIATION ASIGN .)
    VARIABLE        reduce using rule 49 (tipo_asignacion -> EXPONENTIATION ASIGN .)
    LPAR            reduce using rule 49 (tipo_asignacion -> EXPONENTIATION ASIGN .)


state 141

    (132) funciones -> encabezado repCuerpo END .

    $end            reduce using rule 132 (funciones -> encabezado repCuerpo END .)


state 142

    (134) funciones -> encabezado repCuerpo RETURN . expression END
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 190
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 143

    (133) funciones -> encabezado RETURN expression . END

    END             shift and go to state 191


state 144

    (85) repCuerpo -> cuerpo repCuerpo .

    END             reduce using rule 85 (repCuerpo -> cuerpo repCuerpo .)
    RETURN          reduce using rule 85 (repCuerpo -> cuerpo repCuerpo .)


state 145

    (79) deleteValueHash -> VARIABLE POINT . DELETE LPAR expression RPAR
    (91) insertArray -> VARIABLE POINT . INSERT LPAR argumentosA RPAR
    (92) deleteArray -> VARIABLE POINT . DELETE_AT LPAR NUMBER RPAR
    (99) pushStack -> VARIABLE POINT . PUSH LPAR factor RPAR
    (98) searchStack -> VARIABLE POINT . SEARCH LPAR factor RPAR

    DELETE          shift and go to state 129
    INSERT          shift and go to state 130
    DELETE_AT       shift and go to state 131
    PUSH            shift and go to state 133
    SEARCH          shift and go to state 132


state 146

    (45) tipo_asignacion -> PLUS . ASIGN

    ASIGN           shift and go to state 135


state 147

    (46) tipo_asignacion -> MINUS . ASIGN

    ASIGN           shift and go to state 137


state 148

    (137) condicional -> IF comparacion D_POINT . repCuerpo END
    (138) condicional -> IF comparacion D_POINT . repCuerpo END cond_else
    (84) repCuerpo -> . cuerpo
    (85) repCuerpo -> . cuerpo repCuerpo
    (20) cuerpo -> . asignacion
    (21) cuerpo -> . expression
    (22) cuerpo -> . comparacion
    (23) cuerpo -> . condicional
    (24) cuerpo -> . impresion
    (25) cuerpo -> . for
    (26) cuerpo -> . while
    (27) cuerpo -> . input
    (28) cuerpo -> . callFuncion
    (29) cuerpo -> . addValueHash
    (30) cuerpo -> . modValueHash
    (31) cuerpo -> . deleteValueHash
    (32) cuerpo -> . insertArray
    (33) cuerpo -> . deleteArray
    (34) cuerpo -> . pushStack
    (35) cuerpo -> . searchStack
    (36) asignacion -> . VARIABLE ASIGN expression
    (37) asignacion -> . VARIABLE ASIGN comparacion
    (38) asignacion -> . VARIABLE ASIGN callFuncion
    (39) asignacion -> . VARIABLE ASIGN diccionario
    (40) asignacion -> . VARIABLE ASIGN getValueHash
    (41) asignacion -> . VARIABLE ASIGN array
    (42) asignacion -> . VARIABLE ASIGN stack
    (43) asignacion -> . VARIABLE tipo_asignacion factor
    (44) asignacion -> . VARIABLE ASIGN opMatematicas
    (50) expression -> . term
    (51) expression -> . boleano
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (137) condicional -> . IF comparacion D_POINT repCuerpo END
    (138) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (69) impresion -> . PUTS factor
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (83) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (70) input -> . VARIABLE ASIGN GETS
    (135) callFuncion -> . VARIABLE LPAR RPAR
    (136) callFuncion -> . VARIABLE LPAR parametros RPAR
    (77) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (91) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (99) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (98) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 83
    IF              shift and go to state 26
    PUTS            shift and go to state 31
    FOR             shift and go to state 29
    WHILE           shift and go to state 27
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    LPAR            shift and go to state 85

    comparacion                    shift and go to state 69
    repCuerpo                      shift and go to state 192
    cuerpo                         shift and go to state 67
    asignacion                     shift and go to state 68
    expression                     shift and go to state 66
    condicional                    shift and go to state 70
    impresion                      shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    input                          shift and go to state 74
    callFuncion                    shift and go to state 75
    addValueHash                   shift and go to state 76
    modValueHash                   shift and go to state 77
    deleteValueHash                shift and go to state 78
    insertArray                    shift and go to state 79
    deleteArray                    shift and go to state 80
    pushStack                      shift and go to state 81
    searchStack                    shift and go to state 82
    factor                         shift and go to state 22
    term                           shift and go to state 23
    boleano                        shift and go to state 24

state 149

    (82) while -> WHILE LPAR comparacion . RPAR repCuerpo END
    (83) while -> WHILE LPAR comparacion . RPAR repCuerpo END while

    RPAR            shift and go to state 193


state 150

    (122) exponenciacion -> LPAR operadores RPAR . EXPONENTIATION operadores

    EXPONENTIATION  shift and go to state 194


state 151

    (123) exponenciacion -> LPAR opMatematicas RPAR . EXPONENTIATION operadores

    EXPONENTIATION  shift and go to state 195


state 152

    (57) factor -> LPAR expression RPAR .

    AND             reduce using rule 57 (factor -> LPAR expression RPAR .)
    OR              reduce using rule 57 (factor -> LPAR expression RPAR .)
    GREATER         reduce using rule 57 (factor -> LPAR expression RPAR .)
    GREATER_OR_EQUAL reduce using rule 57 (factor -> LPAR expression RPAR .)
    MINOR           reduce using rule 57 (factor -> LPAR expression RPAR .)
    MINOR_OR_EQUAL  reduce using rule 57 (factor -> LPAR expression RPAR .)
    ASIGN           reduce using rule 57 (factor -> LPAR expression RPAR .)
    NOT             reduce using rule 57 (factor -> LPAR expression RPAR .)
    $end            reduce using rule 57 (factor -> LPAR expression RPAR .)
    VARIABLE        reduce using rule 57 (factor -> LPAR expression RPAR .)
    IF              reduce using rule 57 (factor -> LPAR expression RPAR .)
    PUTS            reduce using rule 57 (factor -> LPAR expression RPAR .)
    FOR             reduce using rule 57 (factor -> LPAR expression RPAR .)
    WHILE           reduce using rule 57 (factor -> LPAR expression RPAR .)
    TRUE            reduce using rule 57 (factor -> LPAR expression RPAR .)
    FALSE           reduce using rule 57 (factor -> LPAR expression RPAR .)
    NUMBER          reduce using rule 57 (factor -> LPAR expression RPAR .)
    STRING          reduce using rule 57 (factor -> LPAR expression RPAR .)
    FLOAT           reduce using rule 57 (factor -> LPAR expression RPAR .)
    LPAR            reduce using rule 57 (factor -> LPAR expression RPAR .)
    END             reduce using rule 57 (factor -> LPAR expression RPAR .)
    RETURN          reduce using rule 57 (factor -> LPAR expression RPAR .)
    RPAR            reduce using rule 57 (factor -> LPAR expression RPAR .)
    D_POINT         reduce using rule 57 (factor -> LPAR expression RPAR .)
    RCOR            reduce using rule 57 (factor -> LPAR expression RPAR .)
    COMMA           reduce using rule 57 (factor -> LPAR expression RPAR .)
    RKEY            reduce using rule 57 (factor -> LPAR expression RPAR .)


state 153

    (105) suma -> VARIABLE PLUS . NUMBER

    NUMBER          shift and go to state 134


state 154

    (110) resta -> VARIABLE MINUS . NUMBER

    NUMBER          shift and go to state 136


state 155

    (93) for -> FOR VARIABLE IN . NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> FOR VARIABLE IN . NUMBER POINT POINT NUMBER DO repCuerpo END for

    NUMBER          shift and go to state 196


state 156

    (130) encabezado -> DEF VARIABLE LPAR . RPAR
    (131) encabezado -> DEF VARIABLE LPAR . parametros RPAR
    (128) parametros -> . VARIABLE
    (129) parametros -> . VARIABLE COMMA parametros

    RPAR            shift and go to state 197
    VARIABLE        shift and go to state 124

    parametros                     shift and go to state 198

state 157

    (106) suma -> operadores PLUS operadores .
    (106) suma -> operadores . PLUS operadores
    (107) suma -> operadores . PLUS opMatematicas
    (108) suma -> operadores . PLUS LPAR operadores RPAR
    (109) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (111) resta -> operadores . MINUS operadores
    (112) resta -> operadores . MINUS opMatematicas
    (113) resta -> operadores . MINUS LPAR operadores RPAR
    (114) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> operadores . TIMES operadores
    (116) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (117) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (118) division -> operadores . DIVIDE operadores
    (119) division -> operadores . DIVIDE LPAR operadores RPAR
    (120) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> operadores . EXPONENTIATION operadores

    $end            reduce using rule 106 (suma -> operadores PLUS operadores .)
    RPAR            reduce using rule 106 (suma -> operadores PLUS operadores .)
    VARIABLE        reduce using rule 106 (suma -> operadores PLUS operadores .)
    IF              reduce using rule 106 (suma -> operadores PLUS operadores .)
    PUTS            reduce using rule 106 (suma -> operadores PLUS operadores .)
    FOR             reduce using rule 106 (suma -> operadores PLUS operadores .)
    WHILE           reduce using rule 106 (suma -> operadores PLUS operadores .)
    TRUE            reduce using rule 106 (suma -> operadores PLUS operadores .)
    FALSE           reduce using rule 106 (suma -> operadores PLUS operadores .)
    NUMBER          reduce using rule 106 (suma -> operadores PLUS operadores .)
    STRING          reduce using rule 106 (suma -> operadores PLUS operadores .)
    FLOAT           reduce using rule 106 (suma -> operadores PLUS operadores .)
    LPAR            reduce using rule 106 (suma -> operadores PLUS operadores .)
    END             reduce using rule 106 (suma -> operadores PLUS operadores .)
    RETURN          reduce using rule 106 (suma -> operadores PLUS operadores .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    EXPONENTIATION  shift and go to state 104


state 158

    (107) suma -> operadores PLUS opMatematicas .

    $end            reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    RPAR            reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    VARIABLE        reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    IF              reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    PUTS            reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    FOR             reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    WHILE           reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    TRUE            reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    FALSE           reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    NUMBER          reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    STRING          reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    FLOAT           reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    LPAR            reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    END             reduce using rule 107 (suma -> operadores PLUS opMatematicas .)
    RETURN          reduce using rule 107 (suma -> operadores PLUS opMatematicas .)


state 159

    (108) suma -> operadores PLUS LPAR . operadores RPAR
    (109) suma -> operadores PLUS LPAR . opMatematicas RPAR
    (122) exponenciacion -> LPAR . operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> LPAR . opMatematicas RPAR EXPONENTIATION operadores
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41
    VARIABLE        shift and go to state 162
    LPAR            shift and go to state 200

    operadores                     shift and go to state 199
    opMatematicas                  shift and go to state 201
    enteros                        shift and go to state 44
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36

state 160

    (125) operadores -> FLOAT .

    PLUS            reduce using rule 125 (operadores -> FLOAT .)
    MINUS           reduce using rule 125 (operadores -> FLOAT .)
    TIMES           reduce using rule 125 (operadores -> FLOAT .)
    DIVIDE          reduce using rule 125 (operadores -> FLOAT .)
    EXPONENTIATION  reduce using rule 125 (operadores -> FLOAT .)
    $end            reduce using rule 125 (operadores -> FLOAT .)
    RPAR            reduce using rule 125 (operadores -> FLOAT .)
    VARIABLE        reduce using rule 125 (operadores -> FLOAT .)
    IF              reduce using rule 125 (operadores -> FLOAT .)
    PUTS            reduce using rule 125 (operadores -> FLOAT .)
    FOR             reduce using rule 125 (operadores -> FLOAT .)
    WHILE           reduce using rule 125 (operadores -> FLOAT .)
    TRUE            reduce using rule 125 (operadores -> FLOAT .)
    FALSE           reduce using rule 125 (operadores -> FLOAT .)
    NUMBER          reduce using rule 125 (operadores -> FLOAT .)
    STRING          reduce using rule 125 (operadores -> FLOAT .)
    FLOAT           reduce using rule 125 (operadores -> FLOAT .)
    LPAR            reduce using rule 125 (operadores -> FLOAT .)
    END             reduce using rule 125 (operadores -> FLOAT .)
    RETURN          reduce using rule 125 (operadores -> FLOAT .)


state 161

    (126) enteros -> NUMBER .

    PLUS            reduce using rule 126 (enteros -> NUMBER .)
    MINUS           reduce using rule 126 (enteros -> NUMBER .)
    TIMES           reduce using rule 126 (enteros -> NUMBER .)
    DIVIDE          reduce using rule 126 (enteros -> NUMBER .)
    EXPONENTIATION  reduce using rule 126 (enteros -> NUMBER .)
    $end            reduce using rule 126 (enteros -> NUMBER .)
    RPAR            reduce using rule 126 (enteros -> NUMBER .)
    VARIABLE        reduce using rule 126 (enteros -> NUMBER .)
    IF              reduce using rule 126 (enteros -> NUMBER .)
    PUTS            reduce using rule 126 (enteros -> NUMBER .)
    FOR             reduce using rule 126 (enteros -> NUMBER .)
    WHILE           reduce using rule 126 (enteros -> NUMBER .)
    TRUE            reduce using rule 126 (enteros -> NUMBER .)
    FALSE           reduce using rule 126 (enteros -> NUMBER .)
    NUMBER          reduce using rule 126 (enteros -> NUMBER .)
    STRING          reduce using rule 126 (enteros -> NUMBER .)
    FLOAT           reduce using rule 126 (enteros -> NUMBER .)
    LPAR            reduce using rule 126 (enteros -> NUMBER .)
    END             reduce using rule 126 (enteros -> NUMBER .)
    RETURN          reduce using rule 126 (enteros -> NUMBER .)


state 162

    (105) suma -> VARIABLE . PLUS NUMBER
    (110) resta -> VARIABLE . MINUS NUMBER

    PLUS            shift and go to state 153
    MINUS           shift and go to state 154


state 163

    (111) resta -> operadores MINUS operadores .
    (106) suma -> operadores . PLUS operadores
    (107) suma -> operadores . PLUS opMatematicas
    (108) suma -> operadores . PLUS LPAR operadores RPAR
    (109) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (111) resta -> operadores . MINUS operadores
    (112) resta -> operadores . MINUS opMatematicas
    (113) resta -> operadores . MINUS LPAR operadores RPAR
    (114) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> operadores . TIMES operadores
    (116) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (117) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (118) division -> operadores . DIVIDE operadores
    (119) division -> operadores . DIVIDE LPAR operadores RPAR
    (120) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> operadores . EXPONENTIATION operadores

    $end            reduce using rule 111 (resta -> operadores MINUS operadores .)
    RPAR            reduce using rule 111 (resta -> operadores MINUS operadores .)
    VARIABLE        reduce using rule 111 (resta -> operadores MINUS operadores .)
    IF              reduce using rule 111 (resta -> operadores MINUS operadores .)
    PUTS            reduce using rule 111 (resta -> operadores MINUS operadores .)
    FOR             reduce using rule 111 (resta -> operadores MINUS operadores .)
    WHILE           reduce using rule 111 (resta -> operadores MINUS operadores .)
    TRUE            reduce using rule 111 (resta -> operadores MINUS operadores .)
    FALSE           reduce using rule 111 (resta -> operadores MINUS operadores .)
    NUMBER          reduce using rule 111 (resta -> operadores MINUS operadores .)
    STRING          reduce using rule 111 (resta -> operadores MINUS operadores .)
    FLOAT           reduce using rule 111 (resta -> operadores MINUS operadores .)
    LPAR            reduce using rule 111 (resta -> operadores MINUS operadores .)
    END             reduce using rule 111 (resta -> operadores MINUS operadores .)
    RETURN          reduce using rule 111 (resta -> operadores MINUS operadores .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    EXPONENTIATION  shift and go to state 104


state 164

    (112) resta -> operadores MINUS opMatematicas .

    $end            reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    RPAR            reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    VARIABLE        reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    IF              reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    PUTS            reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    FOR             reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    WHILE           reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    TRUE            reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    FALSE           reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    NUMBER          reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    STRING          reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    FLOAT           reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    LPAR            reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    END             reduce using rule 112 (resta -> operadores MINUS opMatematicas .)
    RETURN          reduce using rule 112 (resta -> operadores MINUS opMatematicas .)


state 165

    (113) resta -> operadores MINUS LPAR . operadores RPAR
    (114) resta -> operadores MINUS LPAR . opMatematicas RPAR
    (122) exponenciacion -> LPAR . operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> LPAR . opMatematicas RPAR EXPONENTIATION operadores
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41
    VARIABLE        shift and go to state 162
    LPAR            shift and go to state 200

    operadores                     shift and go to state 202
    opMatematicas                  shift and go to state 203
    enteros                        shift and go to state 44
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36

state 166

    (115) multiplicacion -> operadores TIMES operadores .

    $end            reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    RPAR            reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    VARIABLE        reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    IF              reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    PUTS            reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    FOR             reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    WHILE           reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    TRUE            reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    FALSE           reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    NUMBER          reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    STRING          reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    FLOAT           reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    LPAR            reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    END             reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)
    RETURN          reduce using rule 115 (multiplicacion -> operadores TIMES operadores .)


state 167

    (116) multiplicacion -> operadores TIMES LPAR . operadores RPAR
    (117) multiplicacion -> operadores TIMES LPAR . opMatematicas RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41
    VARIABLE        shift and go to state 162
    LPAR            shift and go to state 200

    operadores                     shift and go to state 204
    opMatematicas                  shift and go to state 205
    enteros                        shift and go to state 44
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36

state 168

    (118) division -> operadores DIVIDE operadores .

    $end            reduce using rule 118 (division -> operadores DIVIDE operadores .)
    RPAR            reduce using rule 118 (division -> operadores DIVIDE operadores .)
    VARIABLE        reduce using rule 118 (division -> operadores DIVIDE operadores .)
    IF              reduce using rule 118 (division -> operadores DIVIDE operadores .)
    PUTS            reduce using rule 118 (division -> operadores DIVIDE operadores .)
    FOR             reduce using rule 118 (division -> operadores DIVIDE operadores .)
    WHILE           reduce using rule 118 (division -> operadores DIVIDE operadores .)
    TRUE            reduce using rule 118 (division -> operadores DIVIDE operadores .)
    FALSE           reduce using rule 118 (division -> operadores DIVIDE operadores .)
    NUMBER          reduce using rule 118 (division -> operadores DIVIDE operadores .)
    STRING          reduce using rule 118 (division -> operadores DIVIDE operadores .)
    FLOAT           reduce using rule 118 (division -> operadores DIVIDE operadores .)
    LPAR            reduce using rule 118 (division -> operadores DIVIDE operadores .)
    END             reduce using rule 118 (division -> operadores DIVIDE operadores .)
    RETURN          reduce using rule 118 (division -> operadores DIVIDE operadores .)


state 169

    (119) division -> operadores DIVIDE LPAR . operadores RPAR
    (120) division -> operadores DIVIDE LPAR . opMatematicas RPAR
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41
    VARIABLE        shift and go to state 162
    LPAR            shift and go to state 200

    operadores                     shift and go to state 206
    opMatematicas                  shift and go to state 207
    enteros                        shift and go to state 44
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36

state 170

    (121) exponenciacion -> operadores EXPONENTIATION operadores .

    $end            reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    RPAR            reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    VARIABLE        reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    IF              reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    PUTS            reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    FOR             reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    WHILE           reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    TRUE            reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    FALSE           reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    NUMBER          reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    STRING          reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    FLOAT           reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    LPAR            reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    END             reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)
    RETURN          reduce using rule 121 (exponenciacion -> operadores EXPONENTIATION operadores .)


state 171

    (59) comparacion -> expression comparador expression AND . comparacion
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 88
    comparacion                    shift and go to state 208
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 172

    (60) comparacion -> expression comparador expression OR . comparacion
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 88
    comparacion                    shift and go to state 209
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 173

    (76) getValueHash -> VARIABLE LCOR . expression RCOR
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 210
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 174

    (73) diccionario -> LKEY cuerpoHash . RKEY

    RKEY            shift and go to state 211


state 175

    (74) cuerpoHash -> expression . ASIGN GREATER expression
    (75) cuerpoHash -> expression . ASIGN GREATER expression COMMA cuerpoHash

    ASIGN           shift and go to state 212


state 176

    (88) array -> LCOR parametrosA . RCOR
    (96) stack -> LCOR parametrosA . RCOR

    RCOR            shift and go to state 213


state 177

    (89) array -> LCOR RCOR .

    $end            reduce using rule 89 (array -> LCOR RCOR .)
    VARIABLE        reduce using rule 89 (array -> LCOR RCOR .)
    IF              reduce using rule 89 (array -> LCOR RCOR .)
    PUTS            reduce using rule 89 (array -> LCOR RCOR .)
    FOR             reduce using rule 89 (array -> LCOR RCOR .)
    WHILE           reduce using rule 89 (array -> LCOR RCOR .)
    TRUE            reduce using rule 89 (array -> LCOR RCOR .)
    FALSE           reduce using rule 89 (array -> LCOR RCOR .)
    NUMBER          reduce using rule 89 (array -> LCOR RCOR .)
    STRING          reduce using rule 89 (array -> LCOR RCOR .)
    FLOAT           reduce using rule 89 (array -> LCOR RCOR .)
    LPAR            reduce using rule 89 (array -> LCOR RCOR .)
    END             reduce using rule 89 (array -> LCOR RCOR .)
    RETURN          reduce using rule 89 (array -> LCOR RCOR .)


state 178

    (97) stack -> LCOR vacio . RCOR

    RCOR            shift and go to state 214


state 179

    (86) parametrosA -> factor .
    (87) parametrosA -> factor . COMMA parametrosA

    RCOR            reduce using rule 86 (parametrosA -> factor .)
    COMMA           shift and go to state 215


state 180

    (95) vacio ->  .

    RCOR            reduce using rule 95 (vacio ->  .)


state 181

    (129) parametros -> VARIABLE COMMA . parametros
    (128) parametros -> . VARIABLE
    (129) parametros -> . VARIABLE COMMA parametros

    VARIABLE        shift and go to state 124

    parametros                     shift and go to state 216

state 182

    (136) callFuncion -> VARIABLE LPAR parametros RPAR .

    $end            reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    VARIABLE        reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    IF              reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    PUTS            reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    FOR             reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    WHILE           reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    TRUE            reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    FALSE           reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    NUMBER          reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    STRING          reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    FLOAT           reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    LPAR            reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    END             reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    RETURN          reduce using rule 136 (callFuncion -> VARIABLE LPAR parametros RPAR .)


state 183

    (77) addValueHash -> VARIABLE LCOR expression RCOR . ASIGN expression
    (78) modValueHash -> VARIABLE LCOR expression RCOR . ASIGN expression

    ASIGN           shift and go to state 217


state 184

    (80) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION . LPAR expression RPAR
    (81) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION . LPAR RPAR

    LPAR            shift and go to state 218


state 185

    (79) deleteValueHash -> VARIABLE POINT DELETE LPAR . expression RPAR
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 219
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 186

    (91) insertArray -> VARIABLE POINT INSERT LPAR . argumentosA RPAR
    (90) argumentosA -> . NUMBER COMMA factor

    NUMBER          shift and go to state 221

    argumentosA                    shift and go to state 220

state 187

    (92) deleteArray -> VARIABLE POINT DELETE_AT LPAR . NUMBER RPAR

    NUMBER          shift and go to state 222


state 188

    (98) searchStack -> VARIABLE POINT SEARCH LPAR . factor RPAR
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    factor                         shift and go to state 223

state 189

    (99) pushStack -> VARIABLE POINT PUSH LPAR . factor RPAR
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    factor                         shift and go to state 224

state 190

    (134) funciones -> encabezado repCuerpo RETURN expression . END

    END             shift and go to state 225


state 191

    (133) funciones -> encabezado RETURN expression END .

    $end            reduce using rule 133 (funciones -> encabezado RETURN expression END .)


state 192

    (137) condicional -> IF comparacion D_POINT repCuerpo . END
    (138) condicional -> IF comparacion D_POINT repCuerpo . END cond_else

    END             shift and go to state 226


state 193

    (82) while -> WHILE LPAR comparacion RPAR . repCuerpo END
    (83) while -> WHILE LPAR comparacion RPAR . repCuerpo END while
    (84) repCuerpo -> . cuerpo
    (85) repCuerpo -> . cuerpo repCuerpo
    (20) cuerpo -> . asignacion
    (21) cuerpo -> . expression
    (22) cuerpo -> . comparacion
    (23) cuerpo -> . condicional
    (24) cuerpo -> . impresion
    (25) cuerpo -> . for
    (26) cuerpo -> . while
    (27) cuerpo -> . input
    (28) cuerpo -> . callFuncion
    (29) cuerpo -> . addValueHash
    (30) cuerpo -> . modValueHash
    (31) cuerpo -> . deleteValueHash
    (32) cuerpo -> . insertArray
    (33) cuerpo -> . deleteArray
    (34) cuerpo -> . pushStack
    (35) cuerpo -> . searchStack
    (36) asignacion -> . VARIABLE ASIGN expression
    (37) asignacion -> . VARIABLE ASIGN comparacion
    (38) asignacion -> . VARIABLE ASIGN callFuncion
    (39) asignacion -> . VARIABLE ASIGN diccionario
    (40) asignacion -> . VARIABLE ASIGN getValueHash
    (41) asignacion -> . VARIABLE ASIGN array
    (42) asignacion -> . VARIABLE ASIGN stack
    (43) asignacion -> . VARIABLE tipo_asignacion factor
    (44) asignacion -> . VARIABLE ASIGN opMatematicas
    (50) expression -> . term
    (51) expression -> . boleano
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (137) condicional -> . IF comparacion D_POINT repCuerpo END
    (138) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (69) impresion -> . PUTS factor
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (83) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (70) input -> . VARIABLE ASIGN GETS
    (135) callFuncion -> . VARIABLE LPAR RPAR
    (136) callFuncion -> . VARIABLE LPAR parametros RPAR
    (77) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (91) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (99) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (98) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 83
    IF              shift and go to state 26
    PUTS            shift and go to state 31
    FOR             shift and go to state 29
    WHILE           shift and go to state 27
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    LPAR            shift and go to state 85

    comparacion                    shift and go to state 69
    repCuerpo                      shift and go to state 227
    while                          shift and go to state 73
    cuerpo                         shift and go to state 67
    asignacion                     shift and go to state 68
    expression                     shift and go to state 66
    condicional                    shift and go to state 70
    impresion                      shift and go to state 71
    for                            shift and go to state 72
    input                          shift and go to state 74
    callFuncion                    shift and go to state 75
    addValueHash                   shift and go to state 76
    modValueHash                   shift and go to state 77
    deleteValueHash                shift and go to state 78
    insertArray                    shift and go to state 79
    deleteArray                    shift and go to state 80
    pushStack                      shift and go to state 81
    searchStack                    shift and go to state 82
    factor                         shift and go to state 22
    term                           shift and go to state 23
    boleano                        shift and go to state 24

state 194

    (122) exponenciacion -> LPAR operadores RPAR EXPONENTIATION . operadores
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER

    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41

    operadores                     shift and go to state 228
    enteros                        shift and go to state 44

state 195

    (123) exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION . operadores
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER

    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41

    operadores                     shift and go to state 229
    enteros                        shift and go to state 44

state 196

    (93) for -> FOR VARIABLE IN NUMBER . POINT POINT NUMBER DO repCuerpo END
    (94) for -> FOR VARIABLE IN NUMBER . POINT POINT NUMBER DO repCuerpo END for

    POINT           shift and go to state 230


state 197

    (130) encabezado -> DEF VARIABLE LPAR RPAR .

    RETURN          reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    VARIABLE        reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    IF              reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    PUTS            reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    FOR             reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    WHILE           reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    TRUE            reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    FALSE           reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    NUMBER          reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    STRING          reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    FLOAT           reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)
    LPAR            reduce using rule 130 (encabezado -> DEF VARIABLE LPAR RPAR .)


state 198

    (131) encabezado -> DEF VARIABLE LPAR parametros . RPAR

    RPAR            shift and go to state 231


state 199

    (108) suma -> operadores PLUS LPAR operadores . RPAR
    (122) exponenciacion -> LPAR operadores . RPAR EXPONENTIATION operadores
    (106) suma -> operadores . PLUS operadores
    (107) suma -> operadores . PLUS opMatematicas
    (108) suma -> operadores . PLUS LPAR operadores RPAR
    (109) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (111) resta -> operadores . MINUS operadores
    (112) resta -> operadores . MINUS opMatematicas
    (113) resta -> operadores . MINUS LPAR operadores RPAR
    (114) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> operadores . TIMES operadores
    (116) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (117) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (118) division -> operadores . DIVIDE operadores
    (119) division -> operadores . DIVIDE LPAR operadores RPAR
    (120) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 232
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    EXPONENTIATION  shift and go to state 104


state 200

    (122) exponenciacion -> LPAR . operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> LPAR . opMatematicas RPAR EXPONENTIATION operadores
    (124) operadores -> . enteros
    (125) operadores -> . FLOAT
    (100) opMatematicas -> . suma
    (101) opMatematicas -> . resta
    (102) opMatematicas -> . multiplicacion
    (103) opMatematicas -> . division
    (104) opMatematicas -> . exponenciacion
    (126) enteros -> . NUMBER
    (127) enteros -> . MINUS NUMBER
    (105) suma -> . VARIABLE PLUS NUMBER
    (106) suma -> . operadores PLUS operadores
    (107) suma -> . operadores PLUS opMatematicas
    (108) suma -> . operadores PLUS LPAR operadores RPAR
    (109) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (110) resta -> . VARIABLE MINUS NUMBER
    (111) resta -> . operadores MINUS operadores
    (112) resta -> . operadores MINUS opMatematicas
    (113) resta -> . operadores MINUS LPAR operadores RPAR
    (114) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> . operadores TIMES operadores
    (116) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (117) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (118) division -> . operadores DIVIDE operadores
    (119) division -> . operadores DIVIDE LPAR operadores RPAR
    (120) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> . operadores EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (123) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 160
    NUMBER          shift and go to state 161
    MINUS           shift and go to state 41
    VARIABLE        shift and go to state 162
    LPAR            shift and go to state 200

    operadores                     shift and go to state 91
    opMatematicas                  shift and go to state 92
    enteros                        shift and go to state 44
    suma                           shift and go to state 32
    resta                          shift and go to state 33
    multiplicacion                 shift and go to state 34
    division                       shift and go to state 35
    exponenciacion                 shift and go to state 36

state 201

    (109) suma -> operadores PLUS LPAR opMatematicas . RPAR
    (123) exponenciacion -> LPAR opMatematicas . RPAR EXPONENTIATION operadores

    RPAR            shift and go to state 233


state 202

    (113) resta -> operadores MINUS LPAR operadores . RPAR
    (122) exponenciacion -> LPAR operadores . RPAR EXPONENTIATION operadores
    (106) suma -> operadores . PLUS operadores
    (107) suma -> operadores . PLUS opMatematicas
    (108) suma -> operadores . PLUS LPAR operadores RPAR
    (109) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (111) resta -> operadores . MINUS operadores
    (112) resta -> operadores . MINUS opMatematicas
    (113) resta -> operadores . MINUS LPAR operadores RPAR
    (114) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> operadores . TIMES operadores
    (116) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (117) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (118) division -> operadores . DIVIDE operadores
    (119) division -> operadores . DIVIDE LPAR operadores RPAR
    (120) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 234
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    EXPONENTIATION  shift and go to state 104


state 203

    (114) resta -> operadores MINUS LPAR opMatematicas . RPAR
    (123) exponenciacion -> LPAR opMatematicas . RPAR EXPONENTIATION operadores

    RPAR            shift and go to state 235


state 204

    (116) multiplicacion -> operadores TIMES LPAR operadores . RPAR
    (106) suma -> operadores . PLUS operadores
    (107) suma -> operadores . PLUS opMatematicas
    (108) suma -> operadores . PLUS LPAR operadores RPAR
    (109) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (111) resta -> operadores . MINUS operadores
    (112) resta -> operadores . MINUS opMatematicas
    (113) resta -> operadores . MINUS LPAR operadores RPAR
    (114) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> operadores . TIMES operadores
    (116) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (117) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (118) division -> operadores . DIVIDE operadores
    (119) division -> operadores . DIVIDE LPAR operadores RPAR
    (120) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 236
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    EXPONENTIATION  shift and go to state 104


state 205

    (117) multiplicacion -> operadores TIMES LPAR opMatematicas . RPAR

    RPAR            shift and go to state 237


state 206

    (119) division -> operadores DIVIDE LPAR operadores . RPAR
    (106) suma -> operadores . PLUS operadores
    (107) suma -> operadores . PLUS opMatematicas
    (108) suma -> operadores . PLUS LPAR operadores RPAR
    (109) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (111) resta -> operadores . MINUS operadores
    (112) resta -> operadores . MINUS opMatematicas
    (113) resta -> operadores . MINUS LPAR operadores RPAR
    (114) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (115) multiplicacion -> operadores . TIMES operadores
    (116) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (117) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (118) division -> operadores . DIVIDE operadores
    (119) division -> operadores . DIVIDE LPAR operadores RPAR
    (120) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (121) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 238
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    EXPONENTIATION  shift and go to state 104


state 207

    (120) division -> operadores DIVIDE LPAR opMatematicas . RPAR

    RPAR            shift and go to state 239


state 208

    (59) comparacion -> expression comparador expression AND comparacion .

    $end            reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    VARIABLE        reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    IF              reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    PUTS            reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    FOR             reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    WHILE           reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    TRUE            reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    FALSE           reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    NUMBER          reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    STRING          reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    FLOAT           reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    LPAR            reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    END             reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    RETURN          reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    D_POINT         reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)
    RPAR            reduce using rule 59 (comparacion -> expression comparador expression AND comparacion .)


state 209

    (60) comparacion -> expression comparador expression OR comparacion .

    $end            reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    VARIABLE        reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    IF              reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    PUTS            reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    FOR             reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    WHILE           reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    TRUE            reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    FALSE           reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    NUMBER          reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    STRING          reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    FLOAT           reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    LPAR            reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    END             reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    RETURN          reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    D_POINT         reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)
    RPAR            reduce using rule 60 (comparacion -> expression comparador expression OR comparacion .)


state 210

    (76) getValueHash -> VARIABLE LCOR expression . RCOR

    RCOR            shift and go to state 240


state 211

    (73) diccionario -> LKEY cuerpoHash RKEY .

    $end            reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    VARIABLE        reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    IF              reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    PUTS            reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    FOR             reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    WHILE           reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    TRUE            reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    FALSE           reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    NUMBER          reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    STRING          reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    FLOAT           reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    LPAR            reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    END             reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)
    RETURN          reduce using rule 73 (diccionario -> LKEY cuerpoHash RKEY .)


state 212

    (74) cuerpoHash -> expression ASIGN . GREATER expression
    (75) cuerpoHash -> expression ASIGN . GREATER expression COMMA cuerpoHash

    GREATER         shift and go to state 241


state 213

    (88) array -> LCOR parametrosA RCOR .
    (96) stack -> LCOR parametrosA RCOR .

  ! reduce/reduce conflict for $end resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for IF resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for PUTS resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for FOR resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for WHILE resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for TRUE resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for FALSE resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for NUMBER resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for STRING resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for FLOAT resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for LPAR resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for END resolved using rule 88 (array -> LCOR parametrosA RCOR .)
  ! reduce/reduce conflict for RETURN resolved using rule 88 (array -> LCOR parametrosA RCOR .)
    $end            reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    VARIABLE        reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    IF              reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    PUTS            reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    FOR             reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    WHILE           reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    TRUE            reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    FALSE           reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    NUMBER          reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    STRING          reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    FLOAT           reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    LPAR            reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    END             reduce using rule 88 (array -> LCOR parametrosA RCOR .)
    RETURN          reduce using rule 88 (array -> LCOR parametrosA RCOR .)

  ! $end            [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! VARIABLE        [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! IF              [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! PUTS            [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! FOR             [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! WHILE           [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! TRUE            [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! FALSE           [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! NUMBER          [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! STRING          [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! FLOAT           [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! LPAR            [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! END             [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]
  ! RETURN          [ reduce using rule 96 (stack -> LCOR parametrosA RCOR .) ]


state 214

    (97) stack -> LCOR vacio RCOR .

    $end            reduce using rule 97 (stack -> LCOR vacio RCOR .)
    VARIABLE        reduce using rule 97 (stack -> LCOR vacio RCOR .)
    IF              reduce using rule 97 (stack -> LCOR vacio RCOR .)
    PUTS            reduce using rule 97 (stack -> LCOR vacio RCOR .)
    FOR             reduce using rule 97 (stack -> LCOR vacio RCOR .)
    WHILE           reduce using rule 97 (stack -> LCOR vacio RCOR .)
    TRUE            reduce using rule 97 (stack -> LCOR vacio RCOR .)
    FALSE           reduce using rule 97 (stack -> LCOR vacio RCOR .)
    NUMBER          reduce using rule 97 (stack -> LCOR vacio RCOR .)
    STRING          reduce using rule 97 (stack -> LCOR vacio RCOR .)
    FLOAT           reduce using rule 97 (stack -> LCOR vacio RCOR .)
    LPAR            reduce using rule 97 (stack -> LCOR vacio RCOR .)
    END             reduce using rule 97 (stack -> LCOR vacio RCOR .)
    RETURN          reduce using rule 97 (stack -> LCOR vacio RCOR .)


state 215

    (87) parametrosA -> factor COMMA . parametrosA
    (86) parametrosA -> . factor
    (87) parametrosA -> . factor COMMA parametrosA
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    factor                         shift and go to state 179
    parametrosA                    shift and go to state 242

state 216

    (129) parametros -> VARIABLE COMMA parametros .

    RPAR            reduce using rule 129 (parametros -> VARIABLE COMMA parametros .)


state 217

    (77) addValueHash -> VARIABLE LCOR expression RCOR ASIGN . expression
    (78) modValueHash -> VARIABLE LCOR expression RCOR ASIGN . expression
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 243
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 218

    (80) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR . expression RPAR
    (81) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR . RPAR
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    RPAR            shift and go to state 245
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 244
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 219

    (79) deleteValueHash -> VARIABLE POINT DELETE LPAR expression . RPAR

    RPAR            shift and go to state 246


state 220

    (91) insertArray -> VARIABLE POINT INSERT LPAR argumentosA . RPAR

    RPAR            shift and go to state 247


state 221

    (90) argumentosA -> NUMBER . COMMA factor

    COMMA           shift and go to state 248


state 222

    (92) deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER . RPAR

    RPAR            shift and go to state 249


state 223

    (98) searchStack -> VARIABLE POINT SEARCH LPAR factor . RPAR

    RPAR            shift and go to state 250


state 224

    (99) pushStack -> VARIABLE POINT PUSH LPAR factor . RPAR

    RPAR            shift and go to state 251


state 225

    (134) funciones -> encabezado repCuerpo RETURN expression END .

    $end            reduce using rule 134 (funciones -> encabezado repCuerpo RETURN expression END .)


state 226

    (137) condicional -> IF comparacion D_POINT repCuerpo END .
    (138) condicional -> IF comparacion D_POINT repCuerpo END . cond_else
    (139) cond_else -> . ELSE D_POINT repCuerpo END

    $end            reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    VARIABLE        reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    IF              reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    PUTS            reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    FOR             reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    WHILE           reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    TRUE            reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    FALSE           reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    NUMBER          reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    STRING          reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    FLOAT           reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    LPAR            reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    END             reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    RETURN          reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END .)
    ELSE            shift and go to state 253

    cond_else                      shift and go to state 252

state 227

    (82) while -> WHILE LPAR comparacion RPAR repCuerpo . END
    (83) while -> WHILE LPAR comparacion RPAR repCuerpo . END while

    END             shift and go to state 254


state 228

    (122) exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .

    $end            reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    RPAR            reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    VARIABLE        reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    IF              reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    PUTS            reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    FOR             reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    WHILE           reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    TRUE            reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    FALSE           reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    NUMBER          reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    STRING          reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    FLOAT           reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    LPAR            reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    END             reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    RETURN          reduce using rule 122 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)


state 229

    (123) exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .

    $end            reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    RPAR            reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    VARIABLE        reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    IF              reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    PUTS            reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    FOR             reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    WHILE           reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    TRUE            reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    FALSE           reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    NUMBER          reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    STRING          reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    FLOAT           reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    LPAR            reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    END             reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    RETURN          reduce using rule 123 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)


state 230

    (93) for -> FOR VARIABLE IN NUMBER POINT . POINT NUMBER DO repCuerpo END
    (94) for -> FOR VARIABLE IN NUMBER POINT . POINT NUMBER DO repCuerpo END for

    POINT           shift and go to state 255


state 231

    (131) encabezado -> DEF VARIABLE LPAR parametros RPAR .

    RETURN          reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    VARIABLE        reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    IF              reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    PUTS            reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    FOR             reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    WHILE           reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    TRUE            reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    FALSE           reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    NUMBER          reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    STRING          reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    FLOAT           reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    LPAR            reduce using rule 131 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)


state 232

    (108) suma -> operadores PLUS LPAR operadores RPAR .
    (122) exponenciacion -> LPAR operadores RPAR . EXPONENTIATION operadores

    $end            reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    RPAR            reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    VARIABLE        reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    IF              reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    PUTS            reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    FOR             reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    WHILE           reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    TRUE            reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    FALSE           reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    NUMBER          reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    STRING          reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    FLOAT           reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    LPAR            reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    END             reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    RETURN          reduce using rule 108 (suma -> operadores PLUS LPAR operadores RPAR .)
    EXPONENTIATION  shift and go to state 194


state 233

    (109) suma -> operadores PLUS LPAR opMatematicas RPAR .
    (123) exponenciacion -> LPAR opMatematicas RPAR . EXPONENTIATION operadores

    $end            reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    RPAR            reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    VARIABLE        reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    IF              reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    PUTS            reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    FOR             reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    WHILE           reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    TRUE            reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    FALSE           reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    NUMBER          reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    STRING          reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    FLOAT           reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    LPAR            reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    END             reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    RETURN          reduce using rule 109 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    EXPONENTIATION  shift and go to state 195


state 234

    (113) resta -> operadores MINUS LPAR operadores RPAR .
    (122) exponenciacion -> LPAR operadores RPAR . EXPONENTIATION operadores

    $end            reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    RPAR            reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    VARIABLE        reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    IF              reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    PUTS            reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    FOR             reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    WHILE           reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    TRUE            reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    FALSE           reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    NUMBER          reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    STRING          reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    FLOAT           reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    LPAR            reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    END             reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    RETURN          reduce using rule 113 (resta -> operadores MINUS LPAR operadores RPAR .)
    EXPONENTIATION  shift and go to state 194


state 235

    (114) resta -> operadores MINUS LPAR opMatematicas RPAR .
    (123) exponenciacion -> LPAR opMatematicas RPAR . EXPONENTIATION operadores

    $end            reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    RPAR            reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    VARIABLE        reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    IF              reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    PUTS            reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    FOR             reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    WHILE           reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    TRUE            reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    FALSE           reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    NUMBER          reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    STRING          reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    FLOAT           reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    LPAR            reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    END             reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    RETURN          reduce using rule 114 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    EXPONENTIATION  shift and go to state 195


state 236

    (116) multiplicacion -> operadores TIMES LPAR operadores RPAR .

    $end            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    RPAR            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    VARIABLE        reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    IF              reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    PUTS            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    FOR             reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    WHILE           reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    TRUE            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    FALSE           reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    NUMBER          reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    STRING          reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    FLOAT           reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    LPAR            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    END             reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    RETURN          reduce using rule 116 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)


state 237

    (117) multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .

    $end            reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    RPAR            reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    VARIABLE        reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    IF              reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    PUTS            reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    FOR             reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    WHILE           reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    TRUE            reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    FALSE           reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    NUMBER          reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    STRING          reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    FLOAT           reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    LPAR            reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    END             reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    RETURN          reduce using rule 117 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)


state 238

    (119) division -> operadores DIVIDE LPAR operadores RPAR .

    $end            reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    RPAR            reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    VARIABLE        reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    IF              reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    PUTS            reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    FOR             reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    WHILE           reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    TRUE            reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    FALSE           reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    NUMBER          reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    STRING          reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    FLOAT           reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    LPAR            reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    END             reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)
    RETURN          reduce using rule 119 (division -> operadores DIVIDE LPAR operadores RPAR .)


state 239

    (120) division -> operadores DIVIDE LPAR opMatematicas RPAR .

    $end            reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    RPAR            reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    VARIABLE        reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    IF              reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    PUTS            reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    FOR             reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    WHILE           reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    TRUE            reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    FALSE           reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    NUMBER          reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    STRING          reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    FLOAT           reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    LPAR            reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    END             reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    RETURN          reduce using rule 120 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)


state 240

    (76) getValueHash -> VARIABLE LCOR expression RCOR .

    $end            reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    VARIABLE        reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    IF              reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    PUTS            reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    FOR             reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    WHILE           reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    TRUE            reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    FALSE           reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    NUMBER          reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    STRING          reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    FLOAT           reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    LPAR            reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    END             reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)
    RETURN          reduce using rule 76 (getValueHash -> VARIABLE LCOR expression RCOR .)


state 241

    (74) cuerpoHash -> expression ASIGN GREATER . expression
    (75) cuerpoHash -> expression ASIGN GREATER . expression COMMA cuerpoHash
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 256
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 242

    (87) parametrosA -> factor COMMA parametrosA .

    RCOR            reduce using rule 87 (parametrosA -> factor COMMA parametrosA .)


state 243

    (77) addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .
    (78) modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .

  ! reduce/reduce conflict for $end resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for IF resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for PUTS resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for FOR resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for LPAR resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    $end            reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    VARIABLE        reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    IF              reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    PUTS            reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    FOR             reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    WHILE           reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    TRUE            reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    FALSE           reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    NUMBER          reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    STRING          reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    FLOAT           reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    LPAR            reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    END             reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    RETURN          reduce using rule 77 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)

  ! $end            [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! VARIABLE        [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! IF              [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! PUTS            [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! FOR             [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! WHILE           [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! TRUE            [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! FALSE           [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! NUMBER          [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! STRING          [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! FLOAT           [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! LPAR            [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! END             [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! RETURN          [ reduce using rule 78 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]


state 244

    (80) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR expression . RPAR

    RPAR            shift and go to state 257


state 245

    (81) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR RPAR .

    $end            reduce using rule 81 (metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR RPAR .)


state 246

    (79) deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .

    $end            reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    VARIABLE        reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    IF              reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    PUTS            reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    FOR             reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    WHILE           reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    TRUE            reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    FALSE           reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    NUMBER          reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    STRING          reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    FLOAT           reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    LPAR            reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    END             reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    RETURN          reduce using rule 79 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)


state 247

    (91) insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .

    $end            reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    VARIABLE        reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    IF              reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    PUTS            reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    FOR             reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    WHILE           reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    TRUE            reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    FALSE           reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    NUMBER          reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    STRING          reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    FLOAT           reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    LPAR            reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    END             reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    RETURN          reduce using rule 91 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)


state 248

    (90) argumentosA -> NUMBER COMMA . factor
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    factor                         shift and go to state 258

state 249

    (92) deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .

    $end            reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    VARIABLE        reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    IF              reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    PUTS            reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    FOR             reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    WHILE           reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    TRUE            reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    FALSE           reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    NUMBER          reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    STRING          reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    FLOAT           reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    LPAR            reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    END             reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    RETURN          reduce using rule 92 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)


state 250

    (98) searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .

    $end            reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    VARIABLE        reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    IF              reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    PUTS            reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    FOR             reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    WHILE           reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    TRUE            reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    FALSE           reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    NUMBER          reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    STRING          reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    FLOAT           reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    LPAR            reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    END             reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    RETURN          reduce using rule 98 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)


state 251

    (99) pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .

    $end            reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    VARIABLE        reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    IF              reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    PUTS            reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    FOR             reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    WHILE           reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    TRUE            reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    FALSE           reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    NUMBER          reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    STRING          reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    FLOAT           reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    LPAR            reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    END             reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    RETURN          reduce using rule 99 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)


state 252

    (138) condicional -> IF comparacion D_POINT repCuerpo END cond_else .

    $end            reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    VARIABLE        reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    IF              reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    PUTS            reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    FOR             reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    WHILE           reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    TRUE            reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    FALSE           reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    NUMBER          reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    STRING          reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    FLOAT           reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    LPAR            reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    END             reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    RETURN          reduce using rule 138 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)


state 253

    (139) cond_else -> ELSE . D_POINT repCuerpo END

    D_POINT         shift and go to state 259


state 254

    (82) while -> WHILE LPAR comparacion RPAR repCuerpo END .
    (83) while -> WHILE LPAR comparacion RPAR repCuerpo END . while
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (83) while -> . WHILE LPAR comparacion RPAR repCuerpo END while

  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    VARIABLE        reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    IF              reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    PUTS            reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    FOR             reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    TRUE            reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    FALSE           reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    NUMBER          reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    STRING          reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    FLOAT           reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    LPAR            reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    END             reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    RETURN          reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    WHILE           shift and go to state 27

  ! WHILE           [ reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END .) ]

    while                          shift and go to state 260

state 255

    (93) for -> FOR VARIABLE IN NUMBER POINT POINT . NUMBER DO repCuerpo END
    (94) for -> FOR VARIABLE IN NUMBER POINT POINT . NUMBER DO repCuerpo END for

    NUMBER          shift and go to state 261


state 256

    (74) cuerpoHash -> expression ASIGN GREATER expression .
    (75) cuerpoHash -> expression ASIGN GREATER expression . COMMA cuerpoHash

    RKEY            reduce using rule 74 (cuerpoHash -> expression ASIGN GREATER expression .)
    COMMA           shift and go to state 262


state 257

    (80) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR expression RPAR .

    $end            reduce using rule 80 (metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR expression RPAR .)


state 258

    (90) argumentosA -> NUMBER COMMA factor .

    RPAR            reduce using rule 90 (argumentosA -> NUMBER COMMA factor .)


state 259

    (139) cond_else -> ELSE D_POINT . repCuerpo END
    (84) repCuerpo -> . cuerpo
    (85) repCuerpo -> . cuerpo repCuerpo
    (20) cuerpo -> . asignacion
    (21) cuerpo -> . expression
    (22) cuerpo -> . comparacion
    (23) cuerpo -> . condicional
    (24) cuerpo -> . impresion
    (25) cuerpo -> . for
    (26) cuerpo -> . while
    (27) cuerpo -> . input
    (28) cuerpo -> . callFuncion
    (29) cuerpo -> . addValueHash
    (30) cuerpo -> . modValueHash
    (31) cuerpo -> . deleteValueHash
    (32) cuerpo -> . insertArray
    (33) cuerpo -> . deleteArray
    (34) cuerpo -> . pushStack
    (35) cuerpo -> . searchStack
    (36) asignacion -> . VARIABLE ASIGN expression
    (37) asignacion -> . VARIABLE ASIGN comparacion
    (38) asignacion -> . VARIABLE ASIGN callFuncion
    (39) asignacion -> . VARIABLE ASIGN diccionario
    (40) asignacion -> . VARIABLE ASIGN getValueHash
    (41) asignacion -> . VARIABLE ASIGN array
    (42) asignacion -> . VARIABLE ASIGN stack
    (43) asignacion -> . VARIABLE tipo_asignacion factor
    (44) asignacion -> . VARIABLE ASIGN opMatematicas
    (50) expression -> . term
    (51) expression -> . boleano
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (137) condicional -> . IF comparacion D_POINT repCuerpo END
    (138) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (69) impresion -> . PUTS factor
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (83) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (70) input -> . VARIABLE ASIGN GETS
    (135) callFuncion -> . VARIABLE LPAR RPAR
    (136) callFuncion -> . VARIABLE LPAR parametros RPAR
    (77) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (91) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (99) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (98) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 83
    IF              shift and go to state 26
    PUTS            shift and go to state 31
    FOR             shift and go to state 29
    WHILE           shift and go to state 27
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    LPAR            shift and go to state 85

    repCuerpo                      shift and go to state 263
    cuerpo                         shift and go to state 67
    asignacion                     shift and go to state 68
    expression                     shift and go to state 66
    comparacion                    shift and go to state 69
    condicional                    shift and go to state 70
    impresion                      shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    input                          shift and go to state 74
    callFuncion                    shift and go to state 75
    addValueHash                   shift and go to state 76
    modValueHash                   shift and go to state 77
    deleteValueHash                shift and go to state 78
    insertArray                    shift and go to state 79
    deleteArray                    shift and go to state 80
    pushStack                      shift and go to state 81
    searchStack                    shift and go to state 82
    factor                         shift and go to state 22
    term                           shift and go to state 23
    boleano                        shift and go to state 24

state 260

    (83) while -> WHILE LPAR comparacion RPAR repCuerpo END while .

    $end            reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    VARIABLE        reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    IF              reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    PUTS            reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    FOR             reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    WHILE           reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    TRUE            reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    FALSE           reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    NUMBER          reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    STRING          reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    FLOAT           reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    LPAR            reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    END             reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    RETURN          reduce using rule 83 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)


state 261

    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER . DO repCuerpo END
    (94) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER . DO repCuerpo END for

    DO              shift and go to state 264


state 262

    (75) cuerpoHash -> expression ASIGN GREATER expression COMMA . cuerpoHash
    (74) cuerpoHash -> . expression ASIGN GREATER expression
    (75) cuerpoHash -> . expression ASIGN GREATER expression COMMA cuerpoHash
    (50) expression -> . term
    (51) expression -> . boleano
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    VARIABLE        shift and go to state 89
    LPAR            shift and go to state 85

    expression                     shift and go to state 175
    cuerpoHash                     shift and go to state 265
    term                           shift and go to state 23
    boleano                        shift and go to state 24
    factor                         shift and go to state 22

state 263

    (139) cond_else -> ELSE D_POINT repCuerpo . END

    END             shift and go to state 266


state 264

    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO . repCuerpo END
    (94) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO . repCuerpo END for
    (84) repCuerpo -> . cuerpo
    (85) repCuerpo -> . cuerpo repCuerpo
    (20) cuerpo -> . asignacion
    (21) cuerpo -> . expression
    (22) cuerpo -> . comparacion
    (23) cuerpo -> . condicional
    (24) cuerpo -> . impresion
    (25) cuerpo -> . for
    (26) cuerpo -> . while
    (27) cuerpo -> . input
    (28) cuerpo -> . callFuncion
    (29) cuerpo -> . addValueHash
    (30) cuerpo -> . modValueHash
    (31) cuerpo -> . deleteValueHash
    (32) cuerpo -> . insertArray
    (33) cuerpo -> . deleteArray
    (34) cuerpo -> . pushStack
    (35) cuerpo -> . searchStack
    (36) asignacion -> . VARIABLE ASIGN expression
    (37) asignacion -> . VARIABLE ASIGN comparacion
    (38) asignacion -> . VARIABLE ASIGN callFuncion
    (39) asignacion -> . VARIABLE ASIGN diccionario
    (40) asignacion -> . VARIABLE ASIGN getValueHash
    (41) asignacion -> . VARIABLE ASIGN array
    (42) asignacion -> . VARIABLE ASIGN stack
    (43) asignacion -> . VARIABLE tipo_asignacion factor
    (44) asignacion -> . VARIABLE ASIGN opMatematicas
    (50) expression -> . term
    (51) expression -> . boleano
    (58) comparacion -> . expression comparador expression
    (59) comparacion -> . expression comparador expression AND comparacion
    (60) comparacion -> . expression comparador expression OR comparacion
    (61) comparacion -> . expression AND expression
    (62) comparacion -> . expression OR expression
    (137) condicional -> . IF comparacion D_POINT repCuerpo END
    (138) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (69) impresion -> . PUTS factor
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (83) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (70) input -> . VARIABLE ASIGN GETS
    (135) callFuncion -> . VARIABLE LPAR RPAR
    (136) callFuncion -> . VARIABLE LPAR parametros RPAR
    (77) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (79) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (91) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (92) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (99) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (98) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (52) term -> . factor
    (71) boleano -> . TRUE
    (72) boleano -> . FALSE
    (53) factor -> . NUMBER
    (54) factor -> . STRING
    (55) factor -> . FLOAT
    (56) factor -> . VARIABLE
    (57) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 83
    IF              shift and go to state 26
    PUTS            shift and go to state 31
    FOR             shift and go to state 29
    WHILE           shift and go to state 27
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 84
    STRING          shift and go to state 42
    FLOAT           shift and go to state 86
    LPAR            shift and go to state 85

    repCuerpo                      shift and go to state 267
    for                            shift and go to state 72
    cuerpo                         shift and go to state 67
    asignacion                     shift and go to state 68
    expression                     shift and go to state 66
    comparacion                    shift and go to state 69
    condicional                    shift and go to state 70
    impresion                      shift and go to state 71
    while                          shift and go to state 73
    input                          shift and go to state 74
    callFuncion                    shift and go to state 75
    addValueHash                   shift and go to state 76
    modValueHash                   shift and go to state 77
    deleteValueHash                shift and go to state 78
    insertArray                    shift and go to state 79
    deleteArray                    shift and go to state 80
    pushStack                      shift and go to state 81
    searchStack                    shift and go to state 82
    factor                         shift and go to state 22
    term                           shift and go to state 23
    boleano                        shift and go to state 24

state 265

    (75) cuerpoHash -> expression ASIGN GREATER expression COMMA cuerpoHash .

    RKEY            reduce using rule 75 (cuerpoHash -> expression ASIGN GREATER expression COMMA cuerpoHash .)


state 266

    (139) cond_else -> ELSE D_POINT repCuerpo END .

    $end            reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    VARIABLE        reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    IF              reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    PUTS            reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    FOR             reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    WHILE           reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    TRUE            reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    FALSE           reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    NUMBER          reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    STRING          reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    FLOAT           reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    LPAR            reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    END             reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)
    RETURN          reduce using rule 139 (cond_else -> ELSE D_POINT repCuerpo END .)


state 267

    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo . END
    (94) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo . END for

    END             shift and go to state 268


state 268

    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .
    (94) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END . for
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (94) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for

  ! shift/reduce conflict for FOR resolved as shift
    $end            reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    VARIABLE        reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    IF              reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    PUTS            reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    WHILE           reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    TRUE            reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    FALSE           reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    NUMBER          reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    STRING          reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    FLOAT           reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    LPAR            reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    END             reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    RETURN          reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    FOR             shift and go to state 29

  ! FOR             [ reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .) ]

    for                            shift and go to state 269

state 269

    (94) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .

    $end            reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    VARIABLE        reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    IF              reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    PUTS            reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    FOR             reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    WHILE           reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    TRUE            reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    FALSE           reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    NUMBER          reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    STRING          reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    FLOAT           reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    LPAR            reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    END             reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    RETURN          reduce using rule 94 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASIGN in state 21 resolved as shift
WARNING: shift/reduce conflict for ASIGN in state 83 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 83 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 111 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 254 resolved as shift
WARNING: shift/reduce conflict for FOR in state 268 resolved as shift
WARNING: reduce/reduce conflict in state 94 resolved using rule (factor -> FLOAT)
WARNING: rejected rule (operadores -> FLOAT) in state 94
WARNING: reduce/reduce conflict in state 95 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (enteros -> NUMBER) in state 95
WARNING: reduce/reduce conflict in state 213 resolved using rule (array -> LCOR parametrosA RCOR)
WARNING: rejected rule (stack -> LCOR parametrosA RCOR) in state 213
WARNING: reduce/reduce conflict in state 243 resolved using rule (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression)
WARNING: rejected rule (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression) in state 243
WARNING: Rule (stack -> LCOR parametrosA RCOR) is never reduced
WARNING: Rule (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression) is never reduced
