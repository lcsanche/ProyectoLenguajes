Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> asignacion
Rule 2     instrucciones -> expression
Rule 3     instrucciones -> funciones
Rule 4     instrucciones -> comparacion
Rule 5     instrucciones -> condicional
Rule 6     instrucciones -> while
Rule 7     instrucciones -> for
Rule 8     instrucciones -> impresion
Rule 9     instrucciones -> input
Rule 10    instrucciones -> callFuncion
Rule 11    instrucciones -> addValueHash
Rule 12    instrucciones -> modValueHash
Rule 13    instrucciones -> deleteValueHash
Rule 14    instrucciones -> insertArray
Rule 15    instrucciones -> deleteArray
Rule 16    instrucciones -> searchStack
Rule 17    instrucciones -> pushStack
Rule 18    instrucciones -> metodoBoleano
Rule 19    cuerpo -> asignacion
Rule 20    cuerpo -> expression
Rule 21    cuerpo -> comparacion
Rule 22    cuerpo -> condicional
Rule 23    cuerpo -> impresion
Rule 24    cuerpo -> for
Rule 25    cuerpo -> while
Rule 26    cuerpo -> input
Rule 27    cuerpo -> callFuncion
Rule 28    cuerpo -> addValueHash
Rule 29    cuerpo -> modValueHash
Rule 30    cuerpo -> deleteValueHash
Rule 31    cuerpo -> insertArray
Rule 32    cuerpo -> deleteArray
Rule 33    cuerpo -> pushStack
Rule 34    cuerpo -> searchStack
Rule 35    asignacion -> VARIABLE ASIGN expression
Rule 36    asignacion -> VARIABLE ASIGN comparacion
Rule 37    asignacion -> VARIABLE ASIGN callFuncion
Rule 38    asignacion -> VARIABLE ASIGN diccionario
Rule 39    asignacion -> VARIABLE ASIGN getValueHash
Rule 40    asignacion -> VARIABLE ASIGN array
Rule 41    asignacion -> VARIABLE ASIGN stack
Rule 42    asignacion -> VARIABLE tipo_asignacion factor
Rule 43    asignacion -> VARIABLE ASIGN opMatematicas
Rule 44    tipo_asignacion -> PLUS ASIGN
Rule 45    tipo_asignacion -> MINUS ASIGN
Rule 46    tipo_asignacion -> TIMES ASIGN
Rule 47    tipo_asignacion -> DIVIDE ASIGN
Rule 48    tipo_asignacion -> EXPONENTIATION ASIGN
Rule 49    expression -> term
Rule 50    expression -> boleano
Rule 51    term -> factor
Rule 52    factor -> NUMBER
Rule 53    factor -> STRING
Rule 54    factor -> FLOAT
Rule 55    factor -> VARIABLE
Rule 56    factor -> LPAR expression RPAR
Rule 57    comparacion -> expression comparador expression
Rule 58    comparacion -> expression comparador expression AND comparacion
Rule 59    comparacion -> expression comparador expression OR comparacion
Rule 60    comparacion -> expression AND expression
Rule 61    comparacion -> expression OR expression
Rule 62    comparador -> GREATER
Rule 63    comparador -> GREATER_OR_EQUAL
Rule 64    comparador -> MINOR
Rule 65    comparador -> MINOR_OR_EQUAL
Rule 66    comparador -> ASIGN ASIGN
Rule 67    comparador -> NOT ASIGN
Rule 68    impresion -> PUTS factor
Rule 69    input -> VARIABLE ASIGN GETS
Rule 70    boleano -> TRUE
Rule 71    boleano -> FALSE
Rule 72    diccionario -> LKEY cuerpoHash RKEY
Rule 73    cuerpoHash -> expression ASIGN GREATER expression
Rule 74    cuerpoHash -> expression ASIGN GREATER expression COMMA cuerpoHash
Rule 75    getValueHash -> VARIABLE LCOR expression RCOR
Rule 76    addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression
Rule 77    modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression
Rule 78    deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR
Rule 79    metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR expression RPAR
Rule 80    metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR RPAR
Rule 81    while -> WHILE LPAR comparacion RPAR repCuerpo END
Rule 82    while -> WHILE LPAR comparacion RPAR repCuerpo END while
Rule 83    repCuerpo -> cuerpo
Rule 84    repCuerpo -> cuerpo repCuerpo
Rule 85    parametrosA -> factor
Rule 86    parametrosA -> factor COMMA parametrosA
Rule 87    array -> LCOR parametrosA RCOR
Rule 88    array -> LCOR RCOR
Rule 89    argumentosA -> NUMBER COMMA factor
Rule 90    insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR
Rule 91    deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
Rule 92    for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
Rule 93    for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
Rule 94    vacio -> <empty>
Rule 95    stack -> STACK LPAR parametrosA RPAR
Rule 96    stack -> STACK LPAR vacio RPAR
Rule 97    searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR
Rule 98    pushStack -> VARIABLE POINT PUSH LPAR factor RPAR
Rule 99    opMatematicas -> suma
Rule 100   opMatematicas -> resta
Rule 101   opMatematicas -> multiplicacion
Rule 102   opMatematicas -> division
Rule 103   opMatematicas -> exponenciacion
Rule 104   suma -> VARIABLE PLUS NUMBER
Rule 105   suma -> operadores PLUS operadores
Rule 106   suma -> operadores PLUS opMatematicas
Rule 107   suma -> operadores PLUS LPAR operadores RPAR
Rule 108   suma -> operadores PLUS LPAR opMatematicas RPAR
Rule 109   resta -> VARIABLE MINUS NUMBER
Rule 110   resta -> operadores MINUS operadores
Rule 111   resta -> operadores MINUS opMatematicas
Rule 112   resta -> operadores MINUS LPAR operadores RPAR
Rule 113   resta -> operadores MINUS LPAR opMatematicas RPAR
Rule 114   multiplicacion -> operadores TIMES operadores
Rule 115   multiplicacion -> operadores TIMES LPAR operadores RPAR
Rule 116   multiplicacion -> operadores TIMES LPAR opMatematicas RPAR
Rule 117   division -> operadores DIVIDE operadores
Rule 118   division -> operadores DIVIDE LPAR operadores RPAR
Rule 119   division -> operadores DIVIDE LPAR opMatematicas RPAR
Rule 120   exponenciacion -> operadores EXPONENTIATION operadores
Rule 121   exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores
Rule 122   exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores
Rule 123   operadores -> enteros
Rule 124   operadores -> FLOAT
Rule 125   enteros -> NUMBER
Rule 126   enteros -> MINUS NUMBER
Rule 127   parametros -> VARIABLE
Rule 128   parametros -> VARIABLE COMMA parametros
Rule 129   encabezado -> DEF VARIABLE LPAR RPAR
Rule 130   encabezado -> DEF VARIABLE LPAR parametros RPAR
Rule 131   funciones -> encabezado repCuerpo END
Rule 132   funciones -> encabezado RETURN expression END
Rule 133   funciones -> encabezado repCuerpo RETURN expression END
Rule 134   callFuncion -> VARIABLE LPAR RPAR
Rule 135   callFuncion -> VARIABLE LPAR parametros RPAR
Rule 136   condicional -> IF comparacion D_POINT repCuerpo END
Rule 137   condicional -> IF comparacion D_POINT repCuerpo END cond_else
Rule 138   cond_else -> ELSE D_POINT repCuerpo END

Terminals, with rules where they appear

AND                  : 58 60
ASIGN                : 35 36 37 38 39 40 41 43 44 45 46 47 48 66 66 67 69 73 74 76 77
COMMA                : 74 86 89 128
DEF                  : 129 130
DELETE               : 78
DELETE_AT            : 91
DIVIDE               : 47 117 118 119
DO                   : 92 93
D_POINT              : 136 137 138
ELSE                 : 138
END                  : 81 82 92 93 131 132 133 136 137 138
EXPONENTIATION       : 48 120 121 122
FALSE                : 71
FLOAT                : 54 124
FOR                  : 92 93
GETS                 : 69
GREATER              : 62 73 74
GREATER_OR_EQUAL     : 63
IF                   : 136 137
IN                   : 92 93
INSERT               : 90
LCOR                 : 75 76 77 87 88
LKEY                 : 72
LPAR                 : 56 78 79 80 81 82 90 91 95 96 97 98 107 108 112 113 115 116 118 119 121 122 129 130 134 135
MINOR                : 64
MINOR_OR_EQUAL       : 65
MINUS                : 45 109 110 111 112 113 126
NOT                  : 67
NUMBER               : 52 89 91 92 92 93 93 104 109 125 126
OR                   : 59 61
PLUS                 : 44 104 105 106 107 108
POINT                : 78 79 80 90 91 92 92 93 93 97 98
PUSH                 : 98
PUTS                 : 68
QUESTION             : 79 80
RCOR                 : 75 76 77 87 88
RETURN               : 132 133
RKEY                 : 72
RPAR                 : 56 78 79 80 81 82 90 91 95 96 97 98 107 108 112 113 115 116 118 119 121 122 129 130 134 135
SEARCH               : 97
STACK                : 95 96
STRING               : 53
TIMES                : 46 114 115 116
TRUE                 : 70
VARIABLE             : 35 36 37 38 39 40 41 42 43 55 69 75 76 77 78 79 79 80 80 90 91 92 93 97 98 104 109 127 128 129 130 134 135
WHILE                : 81 82
error                : 

Nonterminals, with rules where they appear

addValueHash         : 11 28
argumentosA          : 90
array                : 40
asignacion           : 1 19
boleano              : 50
callFuncion          : 10 27 37
comparacion          : 4 21 36 58 59 81 82 136 137
comparador           : 57 58 59
cond_else            : 137
condicional          : 5 22
cuerpo               : 83 84
cuerpoHash           : 72 74
deleteArray          : 15 32
deleteValueHash      : 13 30
diccionario          : 38
division             : 102
encabezado           : 131 132 133
enteros              : 123
exponenciacion       : 103
expression           : 2 20 35 56 57 57 58 58 59 59 60 60 61 61 73 73 74 74 75 76 76 77 77 78 79 132 133
factor               : 42 51 68 85 86 89 97 98
for                  : 7 24 93
funciones            : 3
getValueHash         : 39
impresion            : 8 23
input                : 9 26
insertArray          : 14 31
instrucciones        : 0
metodoBoleano        : 18
modValueHash         : 12 29
multiplicacion       : 101
opMatematicas        : 43 106 108 111 113 116 119 122
operadores           : 105 105 106 107 107 108 110 110 111 112 112 113 114 114 115 115 116 117 117 118 118 119 120 120 121 121 122
parametros           : 128 130 135
parametrosA          : 86 87 95
pushStack            : 17 33
repCuerpo            : 81 82 84 92 93 131 133 136 137 138
resta                : 100
searchStack          : 16 34
stack                : 41
suma                 : 99
term                 : 49
tipo_asignacion      : 42
vacio                : 96
while                : 6 25 82

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expression
    (3) instrucciones -> . funciones
    (4) instrucciones -> . comparacion
    (5) instrucciones -> . condicional
    (6) instrucciones -> . while
    (7) instrucciones -> . for
    (8) instrucciones -> . impresion
    (9) instrucciones -> . input
    (10) instrucciones -> . callFuncion
    (11) instrucciones -> . addValueHash
    (12) instrucciones -> . modValueHash
    (13) instrucciones -> . deleteValueHash
    (14) instrucciones -> . insertArray
    (15) instrucciones -> . deleteArray
    (16) instrucciones -> . searchStack
    (17) instrucciones -> . pushStack
    (18) instrucciones -> . metodoBoleano
    (35) asignacion -> . VARIABLE ASIGN expression
    (36) asignacion -> . VARIABLE ASIGN comparacion
    (37) asignacion -> . VARIABLE ASIGN callFuncion
    (38) asignacion -> . VARIABLE ASIGN diccionario
    (39) asignacion -> . VARIABLE ASIGN getValueHash
    (40) asignacion -> . VARIABLE ASIGN array
    (41) asignacion -> . VARIABLE ASIGN stack
    (42) asignacion -> . VARIABLE tipo_asignacion factor
    (43) asignacion -> . VARIABLE ASIGN opMatematicas
    (49) expression -> . term
    (50) expression -> . boleano
    (131) funciones -> . encabezado repCuerpo END
    (132) funciones -> . encabezado RETURN expression END
    (133) funciones -> . encabezado repCuerpo RETURN expression END
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (136) condicional -> . IF comparacion D_POINT repCuerpo END
    (137) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (81) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (92) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (68) impresion -> . PUTS factor
    (69) input -> . VARIABLE ASIGN GETS
    (134) callFuncion -> . VARIABLE LPAR RPAR
    (135) callFuncion -> . VARIABLE LPAR parametros RPAR
    (76) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (77) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (90) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (97) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (98) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (79) metodoBoleano -> . VARIABLE POINT VARIABLE QUESTION LPAR expression RPAR
    (80) metodoBoleano -> . VARIABLE POINT VARIABLE QUESTION LPAR RPAR
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (129) encabezado -> . DEF VARIABLE LPAR RPAR
    (130) encabezado -> . DEF VARIABLE LPAR parametros RPAR
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 20
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 28
    PUTS            shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    DEF             shift and go to state 33
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAR            shift and go to state 27

    instrucciones                  shift and go to state 1
    asignacion                     shift and go to state 2
    expression                     shift and go to state 3
    funciones                      shift and go to state 4
    comparacion                    shift and go to state 5
    condicional                    shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    impresion                      shift and go to state 9
    input                          shift and go to state 10
    callFuncion                    shift and go to state 11
    addValueHash                   shift and go to state 12
    modValueHash                   shift and go to state 13
    deleteValueHash                shift and go to state 14
    insertArray                    shift and go to state 15
    deleteArray                    shift and go to state 16
    searchStack                    shift and go to state 17
    pushStack                      shift and go to state 18
    metodoBoleano                  shift and go to state 19
    factor                         shift and go to state 21
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    encabezado                     shift and go to state 24

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> asignacion .

    $end            reduce using rule 1 (instrucciones -> asignacion .)


state 3

    (2) instrucciones -> expression .
    (57) comparacion -> expression . comparador expression
    (58) comparacion -> expression . comparador expression AND comparacion
    (59) comparacion -> expression . comparador expression OR comparacion
    (60) comparacion -> expression . AND expression
    (61) comparacion -> expression . OR expression
    (62) comparador -> . GREATER
    (63) comparador -> . GREATER_OR_EQUAL
    (64) comparador -> . MINOR
    (65) comparador -> . MINOR_OR_EQUAL
    (66) comparador -> . ASIGN ASIGN
    (67) comparador -> . NOT ASIGN

    $end            reduce using rule 2 (instrucciones -> expression .)
    AND             shift and go to state 37
    OR              shift and go to state 38
    GREATER         shift and go to state 39
    GREATER_OR_EQUAL shift and go to state 40
    MINOR           shift and go to state 41
    MINOR_OR_EQUAL  shift and go to state 42
    ASIGN           shift and go to state 43
    NOT             shift and go to state 44

    comparador                     shift and go to state 36

state 4

    (3) instrucciones -> funciones .

    $end            reduce using rule 3 (instrucciones -> funciones .)


state 5

    (4) instrucciones -> comparacion .

    $end            reduce using rule 4 (instrucciones -> comparacion .)


state 6

    (5) instrucciones -> condicional .

    $end            reduce using rule 5 (instrucciones -> condicional .)


state 7

    (6) instrucciones -> while .

    $end            reduce using rule 6 (instrucciones -> while .)


state 8

    (7) instrucciones -> for .

    $end            reduce using rule 7 (instrucciones -> for .)


state 9

    (8) instrucciones -> impresion .

    $end            reduce using rule 8 (instrucciones -> impresion .)


state 10

    (9) instrucciones -> input .

    $end            reduce using rule 9 (instrucciones -> input .)


state 11

    (10) instrucciones -> callFuncion .

    $end            reduce using rule 10 (instrucciones -> callFuncion .)


state 12

    (11) instrucciones -> addValueHash .

    $end            reduce using rule 11 (instrucciones -> addValueHash .)


state 13

    (12) instrucciones -> modValueHash .

    $end            reduce using rule 12 (instrucciones -> modValueHash .)


state 14

    (13) instrucciones -> deleteValueHash .

    $end            reduce using rule 13 (instrucciones -> deleteValueHash .)


state 15

    (14) instrucciones -> insertArray .

    $end            reduce using rule 14 (instrucciones -> insertArray .)


state 16

    (15) instrucciones -> deleteArray .

    $end            reduce using rule 15 (instrucciones -> deleteArray .)


state 17

    (16) instrucciones -> searchStack .

    $end            reduce using rule 16 (instrucciones -> searchStack .)


state 18

    (17) instrucciones -> pushStack .

    $end            reduce using rule 17 (instrucciones -> pushStack .)


state 19

    (18) instrucciones -> metodoBoleano .

    $end            reduce using rule 18 (instrucciones -> metodoBoleano .)


state 20

    (35) asignacion -> VARIABLE . ASIGN expression
    (36) asignacion -> VARIABLE . ASIGN comparacion
    (37) asignacion -> VARIABLE . ASIGN callFuncion
    (38) asignacion -> VARIABLE . ASIGN diccionario
    (39) asignacion -> VARIABLE . ASIGN getValueHash
    (40) asignacion -> VARIABLE . ASIGN array
    (41) asignacion -> VARIABLE . ASIGN stack
    (42) asignacion -> VARIABLE . tipo_asignacion factor
    (43) asignacion -> VARIABLE . ASIGN opMatematicas
    (69) input -> VARIABLE . ASIGN GETS
    (134) callFuncion -> VARIABLE . LPAR RPAR
    (135) callFuncion -> VARIABLE . LPAR parametros RPAR
    (76) addValueHash -> VARIABLE . LCOR expression RCOR ASIGN expression
    (77) modValueHash -> VARIABLE . LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> VARIABLE . POINT DELETE LPAR expression RPAR
    (90) insertArray -> VARIABLE . POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> VARIABLE . POINT DELETE_AT LPAR NUMBER RPAR
    (97) searchStack -> VARIABLE . POINT SEARCH LPAR factor RPAR
    (98) pushStack -> VARIABLE . POINT PUSH LPAR factor RPAR
    (79) metodoBoleano -> VARIABLE . POINT VARIABLE QUESTION LPAR expression RPAR
    (80) metodoBoleano -> VARIABLE . POINT VARIABLE QUESTION LPAR RPAR
    (55) factor -> VARIABLE .
    (44) tipo_asignacion -> . PLUS ASIGN
    (45) tipo_asignacion -> . MINUS ASIGN
    (46) tipo_asignacion -> . TIMES ASIGN
    (47) tipo_asignacion -> . DIVIDE ASIGN
    (48) tipo_asignacion -> . EXPONENTIATION ASIGN

  ! shift/reduce conflict for ASIGN resolved as shift
    ASIGN           shift and go to state 45
    LPAR            shift and go to state 47
    LCOR            shift and go to state 48
    POINT           shift and go to state 49
    AND             reduce using rule 55 (factor -> VARIABLE .)
    OR              reduce using rule 55 (factor -> VARIABLE .)
    GREATER         reduce using rule 55 (factor -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 55 (factor -> VARIABLE .)
    MINOR           reduce using rule 55 (factor -> VARIABLE .)
    MINOR_OR_EQUAL  reduce using rule 55 (factor -> VARIABLE .)
    NOT             reduce using rule 55 (factor -> VARIABLE .)
    $end            reduce using rule 55 (factor -> VARIABLE .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    EXPONENTIATION  shift and go to state 54

  ! ASIGN           [ reduce using rule 55 (factor -> VARIABLE .) ]

    tipo_asignacion                shift and go to state 46

state 21

    (51) term -> factor .

    AND             reduce using rule 51 (term -> factor .)
    OR              reduce using rule 51 (term -> factor .)
    GREATER         reduce using rule 51 (term -> factor .)
    GREATER_OR_EQUAL reduce using rule 51 (term -> factor .)
    MINOR           reduce using rule 51 (term -> factor .)
    MINOR_OR_EQUAL  reduce using rule 51 (term -> factor .)
    ASIGN           reduce using rule 51 (term -> factor .)
    NOT             reduce using rule 51 (term -> factor .)
    $end            reduce using rule 51 (term -> factor .)
    VARIABLE        reduce using rule 51 (term -> factor .)
    IF              reduce using rule 51 (term -> factor .)
    PUTS            reduce using rule 51 (term -> factor .)
    FOR             reduce using rule 51 (term -> factor .)
    WHILE           reduce using rule 51 (term -> factor .)
    TRUE            reduce using rule 51 (term -> factor .)
    FALSE           reduce using rule 51 (term -> factor .)
    NUMBER          reduce using rule 51 (term -> factor .)
    STRING          reduce using rule 51 (term -> factor .)
    FLOAT           reduce using rule 51 (term -> factor .)
    LPAR            reduce using rule 51 (term -> factor .)
    END             reduce using rule 51 (term -> factor .)
    RETURN          reduce using rule 51 (term -> factor .)
    RPAR            reduce using rule 51 (term -> factor .)
    D_POINT         reduce using rule 51 (term -> factor .)
    RCOR            reduce using rule 51 (term -> factor .)
    COMMA           reduce using rule 51 (term -> factor .)
    RKEY            reduce using rule 51 (term -> factor .)


state 22

    (49) expression -> term .

    AND             reduce using rule 49 (expression -> term .)
    OR              reduce using rule 49 (expression -> term .)
    GREATER         reduce using rule 49 (expression -> term .)
    GREATER_OR_EQUAL reduce using rule 49 (expression -> term .)
    MINOR           reduce using rule 49 (expression -> term .)
    MINOR_OR_EQUAL  reduce using rule 49 (expression -> term .)
    ASIGN           reduce using rule 49 (expression -> term .)
    NOT             reduce using rule 49 (expression -> term .)
    $end            reduce using rule 49 (expression -> term .)
    VARIABLE        reduce using rule 49 (expression -> term .)
    IF              reduce using rule 49 (expression -> term .)
    PUTS            reduce using rule 49 (expression -> term .)
    FOR             reduce using rule 49 (expression -> term .)
    WHILE           reduce using rule 49 (expression -> term .)
    TRUE            reduce using rule 49 (expression -> term .)
    FALSE           reduce using rule 49 (expression -> term .)
    NUMBER          reduce using rule 49 (expression -> term .)
    STRING          reduce using rule 49 (expression -> term .)
    FLOAT           reduce using rule 49 (expression -> term .)
    LPAR            reduce using rule 49 (expression -> term .)
    END             reduce using rule 49 (expression -> term .)
    RETURN          reduce using rule 49 (expression -> term .)
    RPAR            reduce using rule 49 (expression -> term .)
    D_POINT         reduce using rule 49 (expression -> term .)
    RCOR            reduce using rule 49 (expression -> term .)
    COMMA           reduce using rule 49 (expression -> term .)
    RKEY            reduce using rule 49 (expression -> term .)


state 23

    (50) expression -> boleano .

    AND             reduce using rule 50 (expression -> boleano .)
    OR              reduce using rule 50 (expression -> boleano .)
    GREATER         reduce using rule 50 (expression -> boleano .)
    GREATER_OR_EQUAL reduce using rule 50 (expression -> boleano .)
    MINOR           reduce using rule 50 (expression -> boleano .)
    MINOR_OR_EQUAL  reduce using rule 50 (expression -> boleano .)
    ASIGN           reduce using rule 50 (expression -> boleano .)
    NOT             reduce using rule 50 (expression -> boleano .)
    $end            reduce using rule 50 (expression -> boleano .)
    VARIABLE        reduce using rule 50 (expression -> boleano .)
    IF              reduce using rule 50 (expression -> boleano .)
    PUTS            reduce using rule 50 (expression -> boleano .)
    FOR             reduce using rule 50 (expression -> boleano .)
    WHILE           reduce using rule 50 (expression -> boleano .)
    TRUE            reduce using rule 50 (expression -> boleano .)
    FALSE           reduce using rule 50 (expression -> boleano .)
    NUMBER          reduce using rule 50 (expression -> boleano .)
    STRING          reduce using rule 50 (expression -> boleano .)
    FLOAT           reduce using rule 50 (expression -> boleano .)
    LPAR            reduce using rule 50 (expression -> boleano .)
    END             reduce using rule 50 (expression -> boleano .)
    RETURN          reduce using rule 50 (expression -> boleano .)
    RPAR            reduce using rule 50 (expression -> boleano .)
    D_POINT         reduce using rule 50 (expression -> boleano .)
    RCOR            reduce using rule 50 (expression -> boleano .)
    COMMA           reduce using rule 50 (expression -> boleano .)
    RKEY            reduce using rule 50 (expression -> boleano .)


state 24

    (131) funciones -> encabezado . repCuerpo END
    (132) funciones -> encabezado . RETURN expression END
    (133) funciones -> encabezado . repCuerpo RETURN expression END
    (83) repCuerpo -> . cuerpo
    (84) repCuerpo -> . cuerpo repCuerpo
    (19) cuerpo -> . asignacion
    (20) cuerpo -> . expression
    (21) cuerpo -> . comparacion
    (22) cuerpo -> . condicional
    (23) cuerpo -> . impresion
    (24) cuerpo -> . for
    (25) cuerpo -> . while
    (26) cuerpo -> . input
    (27) cuerpo -> . callFuncion
    (28) cuerpo -> . addValueHash
    (29) cuerpo -> . modValueHash
    (30) cuerpo -> . deleteValueHash
    (31) cuerpo -> . insertArray
    (32) cuerpo -> . deleteArray
    (33) cuerpo -> . pushStack
    (34) cuerpo -> . searchStack
    (35) asignacion -> . VARIABLE ASIGN expression
    (36) asignacion -> . VARIABLE ASIGN comparacion
    (37) asignacion -> . VARIABLE ASIGN callFuncion
    (38) asignacion -> . VARIABLE ASIGN diccionario
    (39) asignacion -> . VARIABLE ASIGN getValueHash
    (40) asignacion -> . VARIABLE ASIGN array
    (41) asignacion -> . VARIABLE ASIGN stack
    (42) asignacion -> . VARIABLE tipo_asignacion factor
    (43) asignacion -> . VARIABLE ASIGN opMatematicas
    (49) expression -> . term
    (50) expression -> . boleano
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (136) condicional -> . IF comparacion D_POINT repCuerpo END
    (137) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (68) impresion -> . PUTS factor
    (92) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (81) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (69) input -> . VARIABLE ASIGN GETS
    (134) callFuncion -> . VARIABLE LPAR RPAR
    (135) callFuncion -> . VARIABLE LPAR parametros RPAR
    (76) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (77) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (90) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (98) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (97) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    RETURN          shift and go to state 56
    VARIABLE        shift and go to state 74
    IF              shift and go to state 25
    PUTS            shift and go to state 30
    FOR             shift and go to state 28
    WHILE           shift and go to state 26
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAR            shift and go to state 27

    repCuerpo                      shift and go to state 55
    expression                     shift and go to state 57
    cuerpo                         shift and go to state 58
    asignacion                     shift and go to state 59
    comparacion                    shift and go to state 60
    condicional                    shift and go to state 61
    impresion                      shift and go to state 62
    for                            shift and go to state 63
    while                          shift and go to state 64
    input                          shift and go to state 65
    callFuncion                    shift and go to state 66
    addValueHash                   shift and go to state 67
    modValueHash                   shift and go to state 68
    deleteValueHash                shift and go to state 69
    insertArray                    shift and go to state 70
    deleteArray                    shift and go to state 71
    pushStack                      shift and go to state 72
    searchStack                    shift and go to state 73
    factor                         shift and go to state 21
    term                           shift and go to state 22
    boleano                        shift and go to state 23

state 25

    (136) condicional -> IF . comparacion D_POINT repCuerpo END
    (137) condicional -> IF . comparacion D_POINT repCuerpo END cond_else
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    comparacion                    shift and go to state 75
    expression                     shift and go to state 76
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 26

    (81) while -> WHILE . LPAR comparacion RPAR repCuerpo END
    (82) while -> WHILE . LPAR comparacion RPAR repCuerpo END while

    LPAR            shift and go to state 78


state 27

    (56) factor -> LPAR . expression RPAR
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 79
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 28

    (92) for -> FOR . VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> FOR . VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for

    VARIABLE        shift and go to state 80


state 29

    (52) factor -> NUMBER .

    AND             reduce using rule 52 (factor -> NUMBER .)
    OR              reduce using rule 52 (factor -> NUMBER .)
    GREATER         reduce using rule 52 (factor -> NUMBER .)
    GREATER_OR_EQUAL reduce using rule 52 (factor -> NUMBER .)
    MINOR           reduce using rule 52 (factor -> NUMBER .)
    MINOR_OR_EQUAL  reduce using rule 52 (factor -> NUMBER .)
    ASIGN           reduce using rule 52 (factor -> NUMBER .)
    NOT             reduce using rule 52 (factor -> NUMBER .)
    $end            reduce using rule 52 (factor -> NUMBER .)
    VARIABLE        reduce using rule 52 (factor -> NUMBER .)
    IF              reduce using rule 52 (factor -> NUMBER .)
    PUTS            reduce using rule 52 (factor -> NUMBER .)
    FOR             reduce using rule 52 (factor -> NUMBER .)
    WHILE           reduce using rule 52 (factor -> NUMBER .)
    TRUE            reduce using rule 52 (factor -> NUMBER .)
    FALSE           reduce using rule 52 (factor -> NUMBER .)
    NUMBER          reduce using rule 52 (factor -> NUMBER .)
    STRING          reduce using rule 52 (factor -> NUMBER .)
    FLOAT           reduce using rule 52 (factor -> NUMBER .)
    LPAR            reduce using rule 52 (factor -> NUMBER .)
    END             reduce using rule 52 (factor -> NUMBER .)
    RETURN          reduce using rule 52 (factor -> NUMBER .)
    RPAR            reduce using rule 52 (factor -> NUMBER .)
    D_POINT         reduce using rule 52 (factor -> NUMBER .)
    RCOR            reduce using rule 52 (factor -> NUMBER .)
    COMMA           reduce using rule 52 (factor -> NUMBER .)
    RKEY            reduce using rule 52 (factor -> NUMBER .)


state 30

    (68) impresion -> PUTS . factor
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    factor                         shift and go to state 81

state 31

    (70) boleano -> TRUE .

    AND             reduce using rule 70 (boleano -> TRUE .)
    OR              reduce using rule 70 (boleano -> TRUE .)
    GREATER         reduce using rule 70 (boleano -> TRUE .)
    GREATER_OR_EQUAL reduce using rule 70 (boleano -> TRUE .)
    MINOR           reduce using rule 70 (boleano -> TRUE .)
    MINOR_OR_EQUAL  reduce using rule 70 (boleano -> TRUE .)
    ASIGN           reduce using rule 70 (boleano -> TRUE .)
    NOT             reduce using rule 70 (boleano -> TRUE .)
    $end            reduce using rule 70 (boleano -> TRUE .)
    VARIABLE        reduce using rule 70 (boleano -> TRUE .)
    IF              reduce using rule 70 (boleano -> TRUE .)
    PUTS            reduce using rule 70 (boleano -> TRUE .)
    FOR             reduce using rule 70 (boleano -> TRUE .)
    WHILE           reduce using rule 70 (boleano -> TRUE .)
    TRUE            reduce using rule 70 (boleano -> TRUE .)
    FALSE           reduce using rule 70 (boleano -> TRUE .)
    NUMBER          reduce using rule 70 (boleano -> TRUE .)
    STRING          reduce using rule 70 (boleano -> TRUE .)
    FLOAT           reduce using rule 70 (boleano -> TRUE .)
    LPAR            reduce using rule 70 (boleano -> TRUE .)
    END             reduce using rule 70 (boleano -> TRUE .)
    RETURN          reduce using rule 70 (boleano -> TRUE .)
    RPAR            reduce using rule 70 (boleano -> TRUE .)
    D_POINT         reduce using rule 70 (boleano -> TRUE .)
    RCOR            reduce using rule 70 (boleano -> TRUE .)
    COMMA           reduce using rule 70 (boleano -> TRUE .)
    RKEY            reduce using rule 70 (boleano -> TRUE .)


state 32

    (71) boleano -> FALSE .

    AND             reduce using rule 71 (boleano -> FALSE .)
    OR              reduce using rule 71 (boleano -> FALSE .)
    GREATER         reduce using rule 71 (boleano -> FALSE .)
    GREATER_OR_EQUAL reduce using rule 71 (boleano -> FALSE .)
    MINOR           reduce using rule 71 (boleano -> FALSE .)
    MINOR_OR_EQUAL  reduce using rule 71 (boleano -> FALSE .)
    ASIGN           reduce using rule 71 (boleano -> FALSE .)
    NOT             reduce using rule 71 (boleano -> FALSE .)
    $end            reduce using rule 71 (boleano -> FALSE .)
    VARIABLE        reduce using rule 71 (boleano -> FALSE .)
    IF              reduce using rule 71 (boleano -> FALSE .)
    PUTS            reduce using rule 71 (boleano -> FALSE .)
    FOR             reduce using rule 71 (boleano -> FALSE .)
    WHILE           reduce using rule 71 (boleano -> FALSE .)
    TRUE            reduce using rule 71 (boleano -> FALSE .)
    FALSE           reduce using rule 71 (boleano -> FALSE .)
    NUMBER          reduce using rule 71 (boleano -> FALSE .)
    STRING          reduce using rule 71 (boleano -> FALSE .)
    FLOAT           reduce using rule 71 (boleano -> FALSE .)
    LPAR            reduce using rule 71 (boleano -> FALSE .)
    END             reduce using rule 71 (boleano -> FALSE .)
    RETURN          reduce using rule 71 (boleano -> FALSE .)
    RPAR            reduce using rule 71 (boleano -> FALSE .)
    D_POINT         reduce using rule 71 (boleano -> FALSE .)
    RCOR            reduce using rule 71 (boleano -> FALSE .)
    COMMA           reduce using rule 71 (boleano -> FALSE .)
    RKEY            reduce using rule 71 (boleano -> FALSE .)


state 33

    (129) encabezado -> DEF . VARIABLE LPAR RPAR
    (130) encabezado -> DEF . VARIABLE LPAR parametros RPAR

    VARIABLE        shift and go to state 82


state 34

    (53) factor -> STRING .

    AND             reduce using rule 53 (factor -> STRING .)
    OR              reduce using rule 53 (factor -> STRING .)
    GREATER         reduce using rule 53 (factor -> STRING .)
    GREATER_OR_EQUAL reduce using rule 53 (factor -> STRING .)
    MINOR           reduce using rule 53 (factor -> STRING .)
    MINOR_OR_EQUAL  reduce using rule 53 (factor -> STRING .)
    ASIGN           reduce using rule 53 (factor -> STRING .)
    NOT             reduce using rule 53 (factor -> STRING .)
    $end            reduce using rule 53 (factor -> STRING .)
    VARIABLE        reduce using rule 53 (factor -> STRING .)
    IF              reduce using rule 53 (factor -> STRING .)
    PUTS            reduce using rule 53 (factor -> STRING .)
    FOR             reduce using rule 53 (factor -> STRING .)
    WHILE           reduce using rule 53 (factor -> STRING .)
    TRUE            reduce using rule 53 (factor -> STRING .)
    FALSE           reduce using rule 53 (factor -> STRING .)
    NUMBER          reduce using rule 53 (factor -> STRING .)
    STRING          reduce using rule 53 (factor -> STRING .)
    FLOAT           reduce using rule 53 (factor -> STRING .)
    LPAR            reduce using rule 53 (factor -> STRING .)
    END             reduce using rule 53 (factor -> STRING .)
    RETURN          reduce using rule 53 (factor -> STRING .)
    RPAR            reduce using rule 53 (factor -> STRING .)
    D_POINT         reduce using rule 53 (factor -> STRING .)
    RCOR            reduce using rule 53 (factor -> STRING .)
    COMMA           reduce using rule 53 (factor -> STRING .)
    RKEY            reduce using rule 53 (factor -> STRING .)


state 35

    (54) factor -> FLOAT .

    AND             reduce using rule 54 (factor -> FLOAT .)
    OR              reduce using rule 54 (factor -> FLOAT .)
    GREATER         reduce using rule 54 (factor -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 54 (factor -> FLOAT .)
    MINOR           reduce using rule 54 (factor -> FLOAT .)
    MINOR_OR_EQUAL  reduce using rule 54 (factor -> FLOAT .)
    ASIGN           reduce using rule 54 (factor -> FLOAT .)
    NOT             reduce using rule 54 (factor -> FLOAT .)
    $end            reduce using rule 54 (factor -> FLOAT .)
    VARIABLE        reduce using rule 54 (factor -> FLOAT .)
    IF              reduce using rule 54 (factor -> FLOAT .)
    PUTS            reduce using rule 54 (factor -> FLOAT .)
    FOR             reduce using rule 54 (factor -> FLOAT .)
    WHILE           reduce using rule 54 (factor -> FLOAT .)
    TRUE            reduce using rule 54 (factor -> FLOAT .)
    FALSE           reduce using rule 54 (factor -> FLOAT .)
    NUMBER          reduce using rule 54 (factor -> FLOAT .)
    STRING          reduce using rule 54 (factor -> FLOAT .)
    FLOAT           reduce using rule 54 (factor -> FLOAT .)
    LPAR            reduce using rule 54 (factor -> FLOAT .)
    END             reduce using rule 54 (factor -> FLOAT .)
    RETURN          reduce using rule 54 (factor -> FLOAT .)
    RPAR            reduce using rule 54 (factor -> FLOAT .)
    D_POINT         reduce using rule 54 (factor -> FLOAT .)
    RCOR            reduce using rule 54 (factor -> FLOAT .)
    COMMA           reduce using rule 54 (factor -> FLOAT .)
    RKEY            reduce using rule 54 (factor -> FLOAT .)


state 36

    (57) comparacion -> expression comparador . expression
    (58) comparacion -> expression comparador . expression AND comparacion
    (59) comparacion -> expression comparador . expression OR comparacion
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 83
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 37

    (60) comparacion -> expression AND . expression
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 84
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 38

    (61) comparacion -> expression OR . expression
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 85
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 39

    (62) comparador -> GREATER .

    TRUE            reduce using rule 62 (comparador -> GREATER .)
    FALSE           reduce using rule 62 (comparador -> GREATER .)
    NUMBER          reduce using rule 62 (comparador -> GREATER .)
    STRING          reduce using rule 62 (comparador -> GREATER .)
    FLOAT           reduce using rule 62 (comparador -> GREATER .)
    VARIABLE        reduce using rule 62 (comparador -> GREATER .)
    LPAR            reduce using rule 62 (comparador -> GREATER .)


state 40

    (63) comparador -> GREATER_OR_EQUAL .

    TRUE            reduce using rule 63 (comparador -> GREATER_OR_EQUAL .)
    FALSE           reduce using rule 63 (comparador -> GREATER_OR_EQUAL .)
    NUMBER          reduce using rule 63 (comparador -> GREATER_OR_EQUAL .)
    STRING          reduce using rule 63 (comparador -> GREATER_OR_EQUAL .)
    FLOAT           reduce using rule 63 (comparador -> GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 63 (comparador -> GREATER_OR_EQUAL .)
    LPAR            reduce using rule 63 (comparador -> GREATER_OR_EQUAL .)


state 41

    (64) comparador -> MINOR .

    TRUE            reduce using rule 64 (comparador -> MINOR .)
    FALSE           reduce using rule 64 (comparador -> MINOR .)
    NUMBER          reduce using rule 64 (comparador -> MINOR .)
    STRING          reduce using rule 64 (comparador -> MINOR .)
    FLOAT           reduce using rule 64 (comparador -> MINOR .)
    VARIABLE        reduce using rule 64 (comparador -> MINOR .)
    LPAR            reduce using rule 64 (comparador -> MINOR .)


state 42

    (65) comparador -> MINOR_OR_EQUAL .

    TRUE            reduce using rule 65 (comparador -> MINOR_OR_EQUAL .)
    FALSE           reduce using rule 65 (comparador -> MINOR_OR_EQUAL .)
    NUMBER          reduce using rule 65 (comparador -> MINOR_OR_EQUAL .)
    STRING          reduce using rule 65 (comparador -> MINOR_OR_EQUAL .)
    FLOAT           reduce using rule 65 (comparador -> MINOR_OR_EQUAL .)
    VARIABLE        reduce using rule 65 (comparador -> MINOR_OR_EQUAL .)
    LPAR            reduce using rule 65 (comparador -> MINOR_OR_EQUAL .)


state 43

    (66) comparador -> ASIGN . ASIGN

    ASIGN           shift and go to state 86


state 44

    (67) comparador -> NOT . ASIGN

    ASIGN           shift and go to state 87


state 45

    (35) asignacion -> VARIABLE ASIGN . expression
    (36) asignacion -> VARIABLE ASIGN . comparacion
    (37) asignacion -> VARIABLE ASIGN . callFuncion
    (38) asignacion -> VARIABLE ASIGN . diccionario
    (39) asignacion -> VARIABLE ASIGN . getValueHash
    (40) asignacion -> VARIABLE ASIGN . array
    (41) asignacion -> VARIABLE ASIGN . stack
    (43) asignacion -> VARIABLE ASIGN . opMatematicas
    (69) input -> VARIABLE ASIGN . GETS
    (49) expression -> . term
    (50) expression -> . boleano
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (134) callFuncion -> . VARIABLE LPAR RPAR
    (135) callFuncion -> . VARIABLE LPAR parametros RPAR
    (72) diccionario -> . LKEY cuerpoHash RKEY
    (75) getValueHash -> . VARIABLE LCOR expression RCOR
    (87) array -> . LCOR parametrosA RCOR
    (88) array -> . LCOR RCOR
    (95) stack -> . STACK LPAR parametrosA RPAR
    (96) stack -> . STACK LPAR vacio RPAR
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER

    GETS            shift and go to state 97
    VARIABLE        shift and go to state 88
    LKEY            shift and go to state 99
    LCOR            shift and go to state 100
    STACK           shift and go to state 101
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LPAR            shift and go to state 98
    NUMBER          shift and go to state 107
    STRING          shift and go to state 34
    FLOAT           shift and go to state 110
    MINUS           shift and go to state 109

    expression                     shift and go to state 89
    comparacion                    shift and go to state 90
    callFuncion                    shift and go to state 91
    diccionario                    shift and go to state 92
    getValueHash                   shift and go to state 93
    array                          shift and go to state 94
    stack                          shift and go to state 95
    opMatematicas                  shift and go to state 96
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106
    factor                         shift and go to state 21
    operadores                     shift and go to state 108
    enteros                        shift and go to state 111

state 46

    (42) asignacion -> VARIABLE tipo_asignacion . factor
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    factor                         shift and go to state 112

state 47

    (134) callFuncion -> VARIABLE LPAR . RPAR
    (135) callFuncion -> VARIABLE LPAR . parametros RPAR
    (127) parametros -> . VARIABLE
    (128) parametros -> . VARIABLE COMMA parametros

    RPAR            shift and go to state 114
    VARIABLE        shift and go to state 113

    parametros                     shift and go to state 115

state 48

    (76) addValueHash -> VARIABLE LCOR . expression RCOR ASIGN expression
    (77) modValueHash -> VARIABLE LCOR . expression RCOR ASIGN expression
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 116
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 49

    (78) deleteValueHash -> VARIABLE POINT . DELETE LPAR expression RPAR
    (90) insertArray -> VARIABLE POINT . INSERT LPAR argumentosA RPAR
    (91) deleteArray -> VARIABLE POINT . DELETE_AT LPAR NUMBER RPAR
    (97) searchStack -> VARIABLE POINT . SEARCH LPAR factor RPAR
    (98) pushStack -> VARIABLE POINT . PUSH LPAR factor RPAR
    (79) metodoBoleano -> VARIABLE POINT . VARIABLE QUESTION LPAR expression RPAR
    (80) metodoBoleano -> VARIABLE POINT . VARIABLE QUESTION LPAR RPAR

    DELETE          shift and go to state 118
    INSERT          shift and go to state 119
    DELETE_AT       shift and go to state 120
    SEARCH          shift and go to state 121
    PUSH            shift and go to state 122
    VARIABLE        shift and go to state 117


state 50

    (44) tipo_asignacion -> PLUS . ASIGN

    ASIGN           shift and go to state 123


state 51

    (45) tipo_asignacion -> MINUS . ASIGN

    ASIGN           shift and go to state 124


state 52

    (46) tipo_asignacion -> TIMES . ASIGN

    ASIGN           shift and go to state 125


state 53

    (47) tipo_asignacion -> DIVIDE . ASIGN

    ASIGN           shift and go to state 126


state 54

    (48) tipo_asignacion -> EXPONENTIATION . ASIGN

    ASIGN           shift and go to state 127


state 55

    (131) funciones -> encabezado repCuerpo . END
    (133) funciones -> encabezado repCuerpo . RETURN expression END

    END             shift and go to state 128
    RETURN          shift and go to state 129


state 56

    (132) funciones -> encabezado RETURN . expression END
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 130
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 57

    (20) cuerpo -> expression .
    (57) comparacion -> expression . comparador expression
    (58) comparacion -> expression . comparador expression AND comparacion
    (59) comparacion -> expression . comparador expression OR comparacion
    (60) comparacion -> expression . AND expression
    (61) comparacion -> expression . OR expression
    (62) comparador -> . GREATER
    (63) comparador -> . GREATER_OR_EQUAL
    (64) comparador -> . MINOR
    (65) comparador -> . MINOR_OR_EQUAL
    (66) comparador -> . ASIGN ASIGN
    (67) comparador -> . NOT ASIGN

    VARIABLE        reduce using rule 20 (cuerpo -> expression .)
    IF              reduce using rule 20 (cuerpo -> expression .)
    PUTS            reduce using rule 20 (cuerpo -> expression .)
    FOR             reduce using rule 20 (cuerpo -> expression .)
    WHILE           reduce using rule 20 (cuerpo -> expression .)
    TRUE            reduce using rule 20 (cuerpo -> expression .)
    FALSE           reduce using rule 20 (cuerpo -> expression .)
    NUMBER          reduce using rule 20 (cuerpo -> expression .)
    STRING          reduce using rule 20 (cuerpo -> expression .)
    FLOAT           reduce using rule 20 (cuerpo -> expression .)
    LPAR            reduce using rule 20 (cuerpo -> expression .)
    END             reduce using rule 20 (cuerpo -> expression .)
    RETURN          reduce using rule 20 (cuerpo -> expression .)
    AND             shift and go to state 37
    OR              shift and go to state 38
    GREATER         shift and go to state 39
    GREATER_OR_EQUAL shift and go to state 40
    MINOR           shift and go to state 41
    MINOR_OR_EQUAL  shift and go to state 42
    ASIGN           shift and go to state 43
    NOT             shift and go to state 44

    comparador                     shift and go to state 36

state 58

    (83) repCuerpo -> cuerpo .
    (84) repCuerpo -> cuerpo . repCuerpo
    (83) repCuerpo -> . cuerpo
    (84) repCuerpo -> . cuerpo repCuerpo
    (19) cuerpo -> . asignacion
    (20) cuerpo -> . expression
    (21) cuerpo -> . comparacion
    (22) cuerpo -> . condicional
    (23) cuerpo -> . impresion
    (24) cuerpo -> . for
    (25) cuerpo -> . while
    (26) cuerpo -> . input
    (27) cuerpo -> . callFuncion
    (28) cuerpo -> . addValueHash
    (29) cuerpo -> . modValueHash
    (30) cuerpo -> . deleteValueHash
    (31) cuerpo -> . insertArray
    (32) cuerpo -> . deleteArray
    (33) cuerpo -> . pushStack
    (34) cuerpo -> . searchStack
    (35) asignacion -> . VARIABLE ASIGN expression
    (36) asignacion -> . VARIABLE ASIGN comparacion
    (37) asignacion -> . VARIABLE ASIGN callFuncion
    (38) asignacion -> . VARIABLE ASIGN diccionario
    (39) asignacion -> . VARIABLE ASIGN getValueHash
    (40) asignacion -> . VARIABLE ASIGN array
    (41) asignacion -> . VARIABLE ASIGN stack
    (42) asignacion -> . VARIABLE tipo_asignacion factor
    (43) asignacion -> . VARIABLE ASIGN opMatematicas
    (49) expression -> . term
    (50) expression -> . boleano
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (136) condicional -> . IF comparacion D_POINT repCuerpo END
    (137) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (68) impresion -> . PUTS factor
    (92) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (81) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (69) input -> . VARIABLE ASIGN GETS
    (134) callFuncion -> . VARIABLE LPAR RPAR
    (135) callFuncion -> . VARIABLE LPAR parametros RPAR
    (76) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (77) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (90) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (98) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (97) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    END             reduce using rule 83 (repCuerpo -> cuerpo .)
    RETURN          reduce using rule 83 (repCuerpo -> cuerpo .)
    VARIABLE        shift and go to state 74
    IF              shift and go to state 25
    PUTS            shift and go to state 30
    FOR             shift and go to state 28
    WHILE           shift and go to state 26
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAR            shift and go to state 27

    cuerpo                         shift and go to state 58
    repCuerpo                      shift and go to state 131
    asignacion                     shift and go to state 59
    expression                     shift and go to state 57
    comparacion                    shift and go to state 60
    condicional                    shift and go to state 61
    impresion                      shift and go to state 62
    for                            shift and go to state 63
    while                          shift and go to state 64
    input                          shift and go to state 65
    callFuncion                    shift and go to state 66
    addValueHash                   shift and go to state 67
    modValueHash                   shift and go to state 68
    deleteValueHash                shift and go to state 69
    insertArray                    shift and go to state 70
    deleteArray                    shift and go to state 71
    pushStack                      shift and go to state 72
    searchStack                    shift and go to state 73
    factor                         shift and go to state 21
    term                           shift and go to state 22
    boleano                        shift and go to state 23

state 59

    (19) cuerpo -> asignacion .

    VARIABLE        reduce using rule 19 (cuerpo -> asignacion .)
    IF              reduce using rule 19 (cuerpo -> asignacion .)
    PUTS            reduce using rule 19 (cuerpo -> asignacion .)
    FOR             reduce using rule 19 (cuerpo -> asignacion .)
    WHILE           reduce using rule 19 (cuerpo -> asignacion .)
    TRUE            reduce using rule 19 (cuerpo -> asignacion .)
    FALSE           reduce using rule 19 (cuerpo -> asignacion .)
    NUMBER          reduce using rule 19 (cuerpo -> asignacion .)
    STRING          reduce using rule 19 (cuerpo -> asignacion .)
    FLOAT           reduce using rule 19 (cuerpo -> asignacion .)
    LPAR            reduce using rule 19 (cuerpo -> asignacion .)
    END             reduce using rule 19 (cuerpo -> asignacion .)
    RETURN          reduce using rule 19 (cuerpo -> asignacion .)


state 60

    (21) cuerpo -> comparacion .

    VARIABLE        reduce using rule 21 (cuerpo -> comparacion .)
    IF              reduce using rule 21 (cuerpo -> comparacion .)
    PUTS            reduce using rule 21 (cuerpo -> comparacion .)
    FOR             reduce using rule 21 (cuerpo -> comparacion .)
    WHILE           reduce using rule 21 (cuerpo -> comparacion .)
    TRUE            reduce using rule 21 (cuerpo -> comparacion .)
    FALSE           reduce using rule 21 (cuerpo -> comparacion .)
    NUMBER          reduce using rule 21 (cuerpo -> comparacion .)
    STRING          reduce using rule 21 (cuerpo -> comparacion .)
    FLOAT           reduce using rule 21 (cuerpo -> comparacion .)
    LPAR            reduce using rule 21 (cuerpo -> comparacion .)
    END             reduce using rule 21 (cuerpo -> comparacion .)
    RETURN          reduce using rule 21 (cuerpo -> comparacion .)


state 61

    (22) cuerpo -> condicional .

    VARIABLE        reduce using rule 22 (cuerpo -> condicional .)
    IF              reduce using rule 22 (cuerpo -> condicional .)
    PUTS            reduce using rule 22 (cuerpo -> condicional .)
    FOR             reduce using rule 22 (cuerpo -> condicional .)
    WHILE           reduce using rule 22 (cuerpo -> condicional .)
    TRUE            reduce using rule 22 (cuerpo -> condicional .)
    FALSE           reduce using rule 22 (cuerpo -> condicional .)
    NUMBER          reduce using rule 22 (cuerpo -> condicional .)
    STRING          reduce using rule 22 (cuerpo -> condicional .)
    FLOAT           reduce using rule 22 (cuerpo -> condicional .)
    LPAR            reduce using rule 22 (cuerpo -> condicional .)
    END             reduce using rule 22 (cuerpo -> condicional .)
    RETURN          reduce using rule 22 (cuerpo -> condicional .)


state 62

    (23) cuerpo -> impresion .

    VARIABLE        reduce using rule 23 (cuerpo -> impresion .)
    IF              reduce using rule 23 (cuerpo -> impresion .)
    PUTS            reduce using rule 23 (cuerpo -> impresion .)
    FOR             reduce using rule 23 (cuerpo -> impresion .)
    WHILE           reduce using rule 23 (cuerpo -> impresion .)
    TRUE            reduce using rule 23 (cuerpo -> impresion .)
    FALSE           reduce using rule 23 (cuerpo -> impresion .)
    NUMBER          reduce using rule 23 (cuerpo -> impresion .)
    STRING          reduce using rule 23 (cuerpo -> impresion .)
    FLOAT           reduce using rule 23 (cuerpo -> impresion .)
    LPAR            reduce using rule 23 (cuerpo -> impresion .)
    END             reduce using rule 23 (cuerpo -> impresion .)
    RETURN          reduce using rule 23 (cuerpo -> impresion .)


state 63

    (24) cuerpo -> for .

    VARIABLE        reduce using rule 24 (cuerpo -> for .)
    IF              reduce using rule 24 (cuerpo -> for .)
    PUTS            reduce using rule 24 (cuerpo -> for .)
    FOR             reduce using rule 24 (cuerpo -> for .)
    WHILE           reduce using rule 24 (cuerpo -> for .)
    TRUE            reduce using rule 24 (cuerpo -> for .)
    FALSE           reduce using rule 24 (cuerpo -> for .)
    NUMBER          reduce using rule 24 (cuerpo -> for .)
    STRING          reduce using rule 24 (cuerpo -> for .)
    FLOAT           reduce using rule 24 (cuerpo -> for .)
    LPAR            reduce using rule 24 (cuerpo -> for .)
    END             reduce using rule 24 (cuerpo -> for .)
    RETURN          reduce using rule 24 (cuerpo -> for .)


state 64

    (25) cuerpo -> while .

    VARIABLE        reduce using rule 25 (cuerpo -> while .)
    IF              reduce using rule 25 (cuerpo -> while .)
    PUTS            reduce using rule 25 (cuerpo -> while .)
    FOR             reduce using rule 25 (cuerpo -> while .)
    WHILE           reduce using rule 25 (cuerpo -> while .)
    TRUE            reduce using rule 25 (cuerpo -> while .)
    FALSE           reduce using rule 25 (cuerpo -> while .)
    NUMBER          reduce using rule 25 (cuerpo -> while .)
    STRING          reduce using rule 25 (cuerpo -> while .)
    FLOAT           reduce using rule 25 (cuerpo -> while .)
    LPAR            reduce using rule 25 (cuerpo -> while .)
    END             reduce using rule 25 (cuerpo -> while .)
    RETURN          reduce using rule 25 (cuerpo -> while .)


state 65

    (26) cuerpo -> input .

    VARIABLE        reduce using rule 26 (cuerpo -> input .)
    IF              reduce using rule 26 (cuerpo -> input .)
    PUTS            reduce using rule 26 (cuerpo -> input .)
    FOR             reduce using rule 26 (cuerpo -> input .)
    WHILE           reduce using rule 26 (cuerpo -> input .)
    TRUE            reduce using rule 26 (cuerpo -> input .)
    FALSE           reduce using rule 26 (cuerpo -> input .)
    NUMBER          reduce using rule 26 (cuerpo -> input .)
    STRING          reduce using rule 26 (cuerpo -> input .)
    FLOAT           reduce using rule 26 (cuerpo -> input .)
    LPAR            reduce using rule 26 (cuerpo -> input .)
    END             reduce using rule 26 (cuerpo -> input .)
    RETURN          reduce using rule 26 (cuerpo -> input .)


state 66

    (27) cuerpo -> callFuncion .

    VARIABLE        reduce using rule 27 (cuerpo -> callFuncion .)
    IF              reduce using rule 27 (cuerpo -> callFuncion .)
    PUTS            reduce using rule 27 (cuerpo -> callFuncion .)
    FOR             reduce using rule 27 (cuerpo -> callFuncion .)
    WHILE           reduce using rule 27 (cuerpo -> callFuncion .)
    TRUE            reduce using rule 27 (cuerpo -> callFuncion .)
    FALSE           reduce using rule 27 (cuerpo -> callFuncion .)
    NUMBER          reduce using rule 27 (cuerpo -> callFuncion .)
    STRING          reduce using rule 27 (cuerpo -> callFuncion .)
    FLOAT           reduce using rule 27 (cuerpo -> callFuncion .)
    LPAR            reduce using rule 27 (cuerpo -> callFuncion .)
    END             reduce using rule 27 (cuerpo -> callFuncion .)
    RETURN          reduce using rule 27 (cuerpo -> callFuncion .)


state 67

    (28) cuerpo -> addValueHash .

    VARIABLE        reduce using rule 28 (cuerpo -> addValueHash .)
    IF              reduce using rule 28 (cuerpo -> addValueHash .)
    PUTS            reduce using rule 28 (cuerpo -> addValueHash .)
    FOR             reduce using rule 28 (cuerpo -> addValueHash .)
    WHILE           reduce using rule 28 (cuerpo -> addValueHash .)
    TRUE            reduce using rule 28 (cuerpo -> addValueHash .)
    FALSE           reduce using rule 28 (cuerpo -> addValueHash .)
    NUMBER          reduce using rule 28 (cuerpo -> addValueHash .)
    STRING          reduce using rule 28 (cuerpo -> addValueHash .)
    FLOAT           reduce using rule 28 (cuerpo -> addValueHash .)
    LPAR            reduce using rule 28 (cuerpo -> addValueHash .)
    END             reduce using rule 28 (cuerpo -> addValueHash .)
    RETURN          reduce using rule 28 (cuerpo -> addValueHash .)


state 68

    (29) cuerpo -> modValueHash .

    VARIABLE        reduce using rule 29 (cuerpo -> modValueHash .)
    IF              reduce using rule 29 (cuerpo -> modValueHash .)
    PUTS            reduce using rule 29 (cuerpo -> modValueHash .)
    FOR             reduce using rule 29 (cuerpo -> modValueHash .)
    WHILE           reduce using rule 29 (cuerpo -> modValueHash .)
    TRUE            reduce using rule 29 (cuerpo -> modValueHash .)
    FALSE           reduce using rule 29 (cuerpo -> modValueHash .)
    NUMBER          reduce using rule 29 (cuerpo -> modValueHash .)
    STRING          reduce using rule 29 (cuerpo -> modValueHash .)
    FLOAT           reduce using rule 29 (cuerpo -> modValueHash .)
    LPAR            reduce using rule 29 (cuerpo -> modValueHash .)
    END             reduce using rule 29 (cuerpo -> modValueHash .)
    RETURN          reduce using rule 29 (cuerpo -> modValueHash .)


state 69

    (30) cuerpo -> deleteValueHash .

    VARIABLE        reduce using rule 30 (cuerpo -> deleteValueHash .)
    IF              reduce using rule 30 (cuerpo -> deleteValueHash .)
    PUTS            reduce using rule 30 (cuerpo -> deleteValueHash .)
    FOR             reduce using rule 30 (cuerpo -> deleteValueHash .)
    WHILE           reduce using rule 30 (cuerpo -> deleteValueHash .)
    TRUE            reduce using rule 30 (cuerpo -> deleteValueHash .)
    FALSE           reduce using rule 30 (cuerpo -> deleteValueHash .)
    NUMBER          reduce using rule 30 (cuerpo -> deleteValueHash .)
    STRING          reduce using rule 30 (cuerpo -> deleteValueHash .)
    FLOAT           reduce using rule 30 (cuerpo -> deleteValueHash .)
    LPAR            reduce using rule 30 (cuerpo -> deleteValueHash .)
    END             reduce using rule 30 (cuerpo -> deleteValueHash .)
    RETURN          reduce using rule 30 (cuerpo -> deleteValueHash .)


state 70

    (31) cuerpo -> insertArray .

    VARIABLE        reduce using rule 31 (cuerpo -> insertArray .)
    IF              reduce using rule 31 (cuerpo -> insertArray .)
    PUTS            reduce using rule 31 (cuerpo -> insertArray .)
    FOR             reduce using rule 31 (cuerpo -> insertArray .)
    WHILE           reduce using rule 31 (cuerpo -> insertArray .)
    TRUE            reduce using rule 31 (cuerpo -> insertArray .)
    FALSE           reduce using rule 31 (cuerpo -> insertArray .)
    NUMBER          reduce using rule 31 (cuerpo -> insertArray .)
    STRING          reduce using rule 31 (cuerpo -> insertArray .)
    FLOAT           reduce using rule 31 (cuerpo -> insertArray .)
    LPAR            reduce using rule 31 (cuerpo -> insertArray .)
    END             reduce using rule 31 (cuerpo -> insertArray .)
    RETURN          reduce using rule 31 (cuerpo -> insertArray .)


state 71

    (32) cuerpo -> deleteArray .

    VARIABLE        reduce using rule 32 (cuerpo -> deleteArray .)
    IF              reduce using rule 32 (cuerpo -> deleteArray .)
    PUTS            reduce using rule 32 (cuerpo -> deleteArray .)
    FOR             reduce using rule 32 (cuerpo -> deleteArray .)
    WHILE           reduce using rule 32 (cuerpo -> deleteArray .)
    TRUE            reduce using rule 32 (cuerpo -> deleteArray .)
    FALSE           reduce using rule 32 (cuerpo -> deleteArray .)
    NUMBER          reduce using rule 32 (cuerpo -> deleteArray .)
    STRING          reduce using rule 32 (cuerpo -> deleteArray .)
    FLOAT           reduce using rule 32 (cuerpo -> deleteArray .)
    LPAR            reduce using rule 32 (cuerpo -> deleteArray .)
    END             reduce using rule 32 (cuerpo -> deleteArray .)
    RETURN          reduce using rule 32 (cuerpo -> deleteArray .)


state 72

    (33) cuerpo -> pushStack .

    VARIABLE        reduce using rule 33 (cuerpo -> pushStack .)
    IF              reduce using rule 33 (cuerpo -> pushStack .)
    PUTS            reduce using rule 33 (cuerpo -> pushStack .)
    FOR             reduce using rule 33 (cuerpo -> pushStack .)
    WHILE           reduce using rule 33 (cuerpo -> pushStack .)
    TRUE            reduce using rule 33 (cuerpo -> pushStack .)
    FALSE           reduce using rule 33 (cuerpo -> pushStack .)
    NUMBER          reduce using rule 33 (cuerpo -> pushStack .)
    STRING          reduce using rule 33 (cuerpo -> pushStack .)
    FLOAT           reduce using rule 33 (cuerpo -> pushStack .)
    LPAR            reduce using rule 33 (cuerpo -> pushStack .)
    END             reduce using rule 33 (cuerpo -> pushStack .)
    RETURN          reduce using rule 33 (cuerpo -> pushStack .)


state 73

    (34) cuerpo -> searchStack .

    VARIABLE        reduce using rule 34 (cuerpo -> searchStack .)
    IF              reduce using rule 34 (cuerpo -> searchStack .)
    PUTS            reduce using rule 34 (cuerpo -> searchStack .)
    FOR             reduce using rule 34 (cuerpo -> searchStack .)
    WHILE           reduce using rule 34 (cuerpo -> searchStack .)
    TRUE            reduce using rule 34 (cuerpo -> searchStack .)
    FALSE           reduce using rule 34 (cuerpo -> searchStack .)
    NUMBER          reduce using rule 34 (cuerpo -> searchStack .)
    STRING          reduce using rule 34 (cuerpo -> searchStack .)
    FLOAT           reduce using rule 34 (cuerpo -> searchStack .)
    LPAR            reduce using rule 34 (cuerpo -> searchStack .)
    END             reduce using rule 34 (cuerpo -> searchStack .)
    RETURN          reduce using rule 34 (cuerpo -> searchStack .)


state 74

    (35) asignacion -> VARIABLE . ASIGN expression
    (36) asignacion -> VARIABLE . ASIGN comparacion
    (37) asignacion -> VARIABLE . ASIGN callFuncion
    (38) asignacion -> VARIABLE . ASIGN diccionario
    (39) asignacion -> VARIABLE . ASIGN getValueHash
    (40) asignacion -> VARIABLE . ASIGN array
    (41) asignacion -> VARIABLE . ASIGN stack
    (42) asignacion -> VARIABLE . tipo_asignacion factor
    (43) asignacion -> VARIABLE . ASIGN opMatematicas
    (69) input -> VARIABLE . ASIGN GETS
    (134) callFuncion -> VARIABLE . LPAR RPAR
    (135) callFuncion -> VARIABLE . LPAR parametros RPAR
    (76) addValueHash -> VARIABLE . LCOR expression RCOR ASIGN expression
    (77) modValueHash -> VARIABLE . LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> VARIABLE . POINT DELETE LPAR expression RPAR
    (90) insertArray -> VARIABLE . POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> VARIABLE . POINT DELETE_AT LPAR NUMBER RPAR
    (98) pushStack -> VARIABLE . POINT PUSH LPAR factor RPAR
    (97) searchStack -> VARIABLE . POINT SEARCH LPAR factor RPAR
    (55) factor -> VARIABLE .
    (44) tipo_asignacion -> . PLUS ASIGN
    (45) tipo_asignacion -> . MINUS ASIGN
    (46) tipo_asignacion -> . TIMES ASIGN
    (47) tipo_asignacion -> . DIVIDE ASIGN
    (48) tipo_asignacion -> . EXPONENTIATION ASIGN

  ! shift/reduce conflict for ASIGN resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
    ASIGN           shift and go to state 45
    LPAR            shift and go to state 47
    LCOR            shift and go to state 48
    POINT           shift and go to state 132
    AND             reduce using rule 55 (factor -> VARIABLE .)
    OR              reduce using rule 55 (factor -> VARIABLE .)
    GREATER         reduce using rule 55 (factor -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 55 (factor -> VARIABLE .)
    MINOR           reduce using rule 55 (factor -> VARIABLE .)
    MINOR_OR_EQUAL  reduce using rule 55 (factor -> VARIABLE .)
    NOT             reduce using rule 55 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 55 (factor -> VARIABLE .)
    IF              reduce using rule 55 (factor -> VARIABLE .)
    PUTS            reduce using rule 55 (factor -> VARIABLE .)
    FOR             reduce using rule 55 (factor -> VARIABLE .)
    WHILE           reduce using rule 55 (factor -> VARIABLE .)
    TRUE            reduce using rule 55 (factor -> VARIABLE .)
    FALSE           reduce using rule 55 (factor -> VARIABLE .)
    NUMBER          reduce using rule 55 (factor -> VARIABLE .)
    STRING          reduce using rule 55 (factor -> VARIABLE .)
    FLOAT           reduce using rule 55 (factor -> VARIABLE .)
    END             reduce using rule 55 (factor -> VARIABLE .)
    RETURN          reduce using rule 55 (factor -> VARIABLE .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    EXPONENTIATION  shift and go to state 54

  ! ASIGN           [ reduce using rule 55 (factor -> VARIABLE .) ]
  ! LPAR            [ reduce using rule 55 (factor -> VARIABLE .) ]

    tipo_asignacion                shift and go to state 46

state 75

    (136) condicional -> IF comparacion . D_POINT repCuerpo END
    (137) condicional -> IF comparacion . D_POINT repCuerpo END cond_else

    D_POINT         shift and go to state 133


state 76

    (57) comparacion -> expression . comparador expression
    (58) comparacion -> expression . comparador expression AND comparacion
    (59) comparacion -> expression . comparador expression OR comparacion
    (60) comparacion -> expression . AND expression
    (61) comparacion -> expression . OR expression
    (62) comparador -> . GREATER
    (63) comparador -> . GREATER_OR_EQUAL
    (64) comparador -> . MINOR
    (65) comparador -> . MINOR_OR_EQUAL
    (66) comparador -> . ASIGN ASIGN
    (67) comparador -> . NOT ASIGN

    AND             shift and go to state 37
    OR              shift and go to state 38
    GREATER         shift and go to state 39
    GREATER_OR_EQUAL shift and go to state 40
    MINOR           shift and go to state 41
    MINOR_OR_EQUAL  shift and go to state 42
    ASIGN           shift and go to state 43
    NOT             shift and go to state 44

    comparador                     shift and go to state 36

state 77

    (55) factor -> VARIABLE .

    AND             reduce using rule 55 (factor -> VARIABLE .)
    OR              reduce using rule 55 (factor -> VARIABLE .)
    GREATER         reduce using rule 55 (factor -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 55 (factor -> VARIABLE .)
    MINOR           reduce using rule 55 (factor -> VARIABLE .)
    MINOR_OR_EQUAL  reduce using rule 55 (factor -> VARIABLE .)
    ASIGN           reduce using rule 55 (factor -> VARIABLE .)
    NOT             reduce using rule 55 (factor -> VARIABLE .)
    RPAR            reduce using rule 55 (factor -> VARIABLE .)
    $end            reduce using rule 55 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 55 (factor -> VARIABLE .)
    IF              reduce using rule 55 (factor -> VARIABLE .)
    PUTS            reduce using rule 55 (factor -> VARIABLE .)
    FOR             reduce using rule 55 (factor -> VARIABLE .)
    WHILE           reduce using rule 55 (factor -> VARIABLE .)
    TRUE            reduce using rule 55 (factor -> VARIABLE .)
    FALSE           reduce using rule 55 (factor -> VARIABLE .)
    NUMBER          reduce using rule 55 (factor -> VARIABLE .)
    STRING          reduce using rule 55 (factor -> VARIABLE .)
    FLOAT           reduce using rule 55 (factor -> VARIABLE .)
    LPAR            reduce using rule 55 (factor -> VARIABLE .)
    END             reduce using rule 55 (factor -> VARIABLE .)
    RETURN          reduce using rule 55 (factor -> VARIABLE .)
    D_POINT         reduce using rule 55 (factor -> VARIABLE .)
    RCOR            reduce using rule 55 (factor -> VARIABLE .)
    COMMA           reduce using rule 55 (factor -> VARIABLE .)
    RKEY            reduce using rule 55 (factor -> VARIABLE .)


state 78

    (81) while -> WHILE LPAR . comparacion RPAR repCuerpo END
    (82) while -> WHILE LPAR . comparacion RPAR repCuerpo END while
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    comparacion                    shift and go to state 134
    expression                     shift and go to state 76
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 79

    (56) factor -> LPAR expression . RPAR

    RPAR            shift and go to state 135


state 80

    (92) for -> FOR VARIABLE . IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> FOR VARIABLE . IN NUMBER POINT POINT NUMBER DO repCuerpo END for

    IN              shift and go to state 136


state 81

    (68) impresion -> PUTS factor .

    $end            reduce using rule 68 (impresion -> PUTS factor .)
    VARIABLE        reduce using rule 68 (impresion -> PUTS factor .)
    IF              reduce using rule 68 (impresion -> PUTS factor .)
    PUTS            reduce using rule 68 (impresion -> PUTS factor .)
    FOR             reduce using rule 68 (impresion -> PUTS factor .)
    WHILE           reduce using rule 68 (impresion -> PUTS factor .)
    TRUE            reduce using rule 68 (impresion -> PUTS factor .)
    FALSE           reduce using rule 68 (impresion -> PUTS factor .)
    NUMBER          reduce using rule 68 (impresion -> PUTS factor .)
    STRING          reduce using rule 68 (impresion -> PUTS factor .)
    FLOAT           reduce using rule 68 (impresion -> PUTS factor .)
    LPAR            reduce using rule 68 (impresion -> PUTS factor .)
    END             reduce using rule 68 (impresion -> PUTS factor .)
    RETURN          reduce using rule 68 (impresion -> PUTS factor .)


state 82

    (129) encabezado -> DEF VARIABLE . LPAR RPAR
    (130) encabezado -> DEF VARIABLE . LPAR parametros RPAR

    LPAR            shift and go to state 137


state 83

    (57) comparacion -> expression comparador expression .
    (58) comparacion -> expression comparador expression . AND comparacion
    (59) comparacion -> expression comparador expression . OR comparacion

    $end            reduce using rule 57 (comparacion -> expression comparador expression .)
    VARIABLE        reduce using rule 57 (comparacion -> expression comparador expression .)
    IF              reduce using rule 57 (comparacion -> expression comparador expression .)
    PUTS            reduce using rule 57 (comparacion -> expression comparador expression .)
    FOR             reduce using rule 57 (comparacion -> expression comparador expression .)
    WHILE           reduce using rule 57 (comparacion -> expression comparador expression .)
    TRUE            reduce using rule 57 (comparacion -> expression comparador expression .)
    FALSE           reduce using rule 57 (comparacion -> expression comparador expression .)
    NUMBER          reduce using rule 57 (comparacion -> expression comparador expression .)
    STRING          reduce using rule 57 (comparacion -> expression comparador expression .)
    FLOAT           reduce using rule 57 (comparacion -> expression comparador expression .)
    LPAR            reduce using rule 57 (comparacion -> expression comparador expression .)
    END             reduce using rule 57 (comparacion -> expression comparador expression .)
    RETURN          reduce using rule 57 (comparacion -> expression comparador expression .)
    D_POINT         reduce using rule 57 (comparacion -> expression comparador expression .)
    RPAR            reduce using rule 57 (comparacion -> expression comparador expression .)
    AND             shift and go to state 138
    OR              shift and go to state 139


state 84

    (60) comparacion -> expression AND expression .

    $end            reduce using rule 60 (comparacion -> expression AND expression .)
    VARIABLE        reduce using rule 60 (comparacion -> expression AND expression .)
    IF              reduce using rule 60 (comparacion -> expression AND expression .)
    PUTS            reduce using rule 60 (comparacion -> expression AND expression .)
    FOR             reduce using rule 60 (comparacion -> expression AND expression .)
    WHILE           reduce using rule 60 (comparacion -> expression AND expression .)
    TRUE            reduce using rule 60 (comparacion -> expression AND expression .)
    FALSE           reduce using rule 60 (comparacion -> expression AND expression .)
    NUMBER          reduce using rule 60 (comparacion -> expression AND expression .)
    STRING          reduce using rule 60 (comparacion -> expression AND expression .)
    FLOAT           reduce using rule 60 (comparacion -> expression AND expression .)
    LPAR            reduce using rule 60 (comparacion -> expression AND expression .)
    END             reduce using rule 60 (comparacion -> expression AND expression .)
    RETURN          reduce using rule 60 (comparacion -> expression AND expression .)
    D_POINT         reduce using rule 60 (comparacion -> expression AND expression .)
    RPAR            reduce using rule 60 (comparacion -> expression AND expression .)


state 85

    (61) comparacion -> expression OR expression .

    $end            reduce using rule 61 (comparacion -> expression OR expression .)
    VARIABLE        reduce using rule 61 (comparacion -> expression OR expression .)
    IF              reduce using rule 61 (comparacion -> expression OR expression .)
    PUTS            reduce using rule 61 (comparacion -> expression OR expression .)
    FOR             reduce using rule 61 (comparacion -> expression OR expression .)
    WHILE           reduce using rule 61 (comparacion -> expression OR expression .)
    TRUE            reduce using rule 61 (comparacion -> expression OR expression .)
    FALSE           reduce using rule 61 (comparacion -> expression OR expression .)
    NUMBER          reduce using rule 61 (comparacion -> expression OR expression .)
    STRING          reduce using rule 61 (comparacion -> expression OR expression .)
    FLOAT           reduce using rule 61 (comparacion -> expression OR expression .)
    LPAR            reduce using rule 61 (comparacion -> expression OR expression .)
    END             reduce using rule 61 (comparacion -> expression OR expression .)
    RETURN          reduce using rule 61 (comparacion -> expression OR expression .)
    D_POINT         reduce using rule 61 (comparacion -> expression OR expression .)
    RPAR            reduce using rule 61 (comparacion -> expression OR expression .)


state 86

    (66) comparador -> ASIGN ASIGN .

    TRUE            reduce using rule 66 (comparador -> ASIGN ASIGN .)
    FALSE           reduce using rule 66 (comparador -> ASIGN ASIGN .)
    NUMBER          reduce using rule 66 (comparador -> ASIGN ASIGN .)
    STRING          reduce using rule 66 (comparador -> ASIGN ASIGN .)
    FLOAT           reduce using rule 66 (comparador -> ASIGN ASIGN .)
    VARIABLE        reduce using rule 66 (comparador -> ASIGN ASIGN .)
    LPAR            reduce using rule 66 (comparador -> ASIGN ASIGN .)


state 87

    (67) comparador -> NOT ASIGN .

    TRUE            reduce using rule 67 (comparador -> NOT ASIGN .)
    FALSE           reduce using rule 67 (comparador -> NOT ASIGN .)
    NUMBER          reduce using rule 67 (comparador -> NOT ASIGN .)
    STRING          reduce using rule 67 (comparador -> NOT ASIGN .)
    FLOAT           reduce using rule 67 (comparador -> NOT ASIGN .)
    VARIABLE        reduce using rule 67 (comparador -> NOT ASIGN .)
    LPAR            reduce using rule 67 (comparador -> NOT ASIGN .)


state 88

    (134) callFuncion -> VARIABLE . LPAR RPAR
    (135) callFuncion -> VARIABLE . LPAR parametros RPAR
    (75) getValueHash -> VARIABLE . LCOR expression RCOR
    (104) suma -> VARIABLE . PLUS NUMBER
    (109) resta -> VARIABLE . MINUS NUMBER
    (55) factor -> VARIABLE .

  ! shift/reduce conflict for LPAR resolved as shift
    LPAR            shift and go to state 47
    LCOR            shift and go to state 140
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    AND             reduce using rule 55 (factor -> VARIABLE .)
    OR              reduce using rule 55 (factor -> VARIABLE .)
    GREATER         reduce using rule 55 (factor -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 55 (factor -> VARIABLE .)
    MINOR           reduce using rule 55 (factor -> VARIABLE .)
    MINOR_OR_EQUAL  reduce using rule 55 (factor -> VARIABLE .)
    ASIGN           reduce using rule 55 (factor -> VARIABLE .)
    NOT             reduce using rule 55 (factor -> VARIABLE .)
    $end            reduce using rule 55 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 55 (factor -> VARIABLE .)
    IF              reduce using rule 55 (factor -> VARIABLE .)
    PUTS            reduce using rule 55 (factor -> VARIABLE .)
    FOR             reduce using rule 55 (factor -> VARIABLE .)
    WHILE           reduce using rule 55 (factor -> VARIABLE .)
    TRUE            reduce using rule 55 (factor -> VARIABLE .)
    FALSE           reduce using rule 55 (factor -> VARIABLE .)
    NUMBER          reduce using rule 55 (factor -> VARIABLE .)
    STRING          reduce using rule 55 (factor -> VARIABLE .)
    FLOAT           reduce using rule 55 (factor -> VARIABLE .)
    END             reduce using rule 55 (factor -> VARIABLE .)
    RETURN          reduce using rule 55 (factor -> VARIABLE .)

  ! LPAR            [ reduce using rule 55 (factor -> VARIABLE .) ]


state 89

    (35) asignacion -> VARIABLE ASIGN expression .
    (57) comparacion -> expression . comparador expression
    (58) comparacion -> expression . comparador expression AND comparacion
    (59) comparacion -> expression . comparador expression OR comparacion
    (60) comparacion -> expression . AND expression
    (61) comparacion -> expression . OR expression
    (62) comparador -> . GREATER
    (63) comparador -> . GREATER_OR_EQUAL
    (64) comparador -> . MINOR
    (65) comparador -> . MINOR_OR_EQUAL
    (66) comparador -> . ASIGN ASIGN
    (67) comparador -> . NOT ASIGN

    $end            reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    VARIABLE        reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    IF              reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    PUTS            reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    FOR             reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    WHILE           reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    TRUE            reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    FALSE           reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    NUMBER          reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    STRING          reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    FLOAT           reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    LPAR            reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    END             reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    RETURN          reduce using rule 35 (asignacion -> VARIABLE ASIGN expression .)
    AND             shift and go to state 37
    OR              shift and go to state 38
    GREATER         shift and go to state 39
    GREATER_OR_EQUAL shift and go to state 40
    MINOR           shift and go to state 41
    MINOR_OR_EQUAL  shift and go to state 42
    ASIGN           shift and go to state 43
    NOT             shift and go to state 44

    comparador                     shift and go to state 36

state 90

    (36) asignacion -> VARIABLE ASIGN comparacion .

    $end            reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    VARIABLE        reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    IF              reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    PUTS            reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    FOR             reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    WHILE           reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    TRUE            reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    FALSE           reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    NUMBER          reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    STRING          reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    FLOAT           reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    LPAR            reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    END             reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)
    RETURN          reduce using rule 36 (asignacion -> VARIABLE ASIGN comparacion .)


state 91

    (37) asignacion -> VARIABLE ASIGN callFuncion .

    $end            reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    VARIABLE        reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    IF              reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    PUTS            reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    FOR             reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    WHILE           reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    TRUE            reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    FALSE           reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    NUMBER          reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    STRING          reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    FLOAT           reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    LPAR            reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    END             reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)
    RETURN          reduce using rule 37 (asignacion -> VARIABLE ASIGN callFuncion .)


state 92

    (38) asignacion -> VARIABLE ASIGN diccionario .

    $end            reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    VARIABLE        reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    IF              reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    PUTS            reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    FOR             reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    WHILE           reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    TRUE            reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    FALSE           reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    NUMBER          reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    STRING          reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    FLOAT           reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    LPAR            reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    END             reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)
    RETURN          reduce using rule 38 (asignacion -> VARIABLE ASIGN diccionario .)


state 93

    (39) asignacion -> VARIABLE ASIGN getValueHash .

    $end            reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    VARIABLE        reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    IF              reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    PUTS            reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    FOR             reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    WHILE           reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    TRUE            reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    FALSE           reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    NUMBER          reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    STRING          reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    FLOAT           reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    LPAR            reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    END             reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)
    RETURN          reduce using rule 39 (asignacion -> VARIABLE ASIGN getValueHash .)


state 94

    (40) asignacion -> VARIABLE ASIGN array .

    $end            reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    VARIABLE        reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    IF              reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    PUTS            reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    FOR             reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    WHILE           reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    TRUE            reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    FALSE           reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    NUMBER          reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    STRING          reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    FLOAT           reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    LPAR            reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    END             reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)
    RETURN          reduce using rule 40 (asignacion -> VARIABLE ASIGN array .)


state 95

    (41) asignacion -> VARIABLE ASIGN stack .

    $end            reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    VARIABLE        reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    IF              reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    PUTS            reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    FOR             reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    WHILE           reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    TRUE            reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    FALSE           reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    NUMBER          reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    STRING          reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    FLOAT           reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    LPAR            reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    END             reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)
    RETURN          reduce using rule 41 (asignacion -> VARIABLE ASIGN stack .)


state 96

    (43) asignacion -> VARIABLE ASIGN opMatematicas .

    $end            reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    VARIABLE        reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    IF              reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    PUTS            reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    FOR             reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    WHILE           reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    TRUE            reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    FALSE           reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    NUMBER          reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    STRING          reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    FLOAT           reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    LPAR            reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    END             reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)
    RETURN          reduce using rule 43 (asignacion -> VARIABLE ASIGN opMatematicas .)


state 97

    (69) input -> VARIABLE ASIGN GETS .

    $end            reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    VARIABLE        reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    IF              reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    PUTS            reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    FOR             reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    WHILE           reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    TRUE            reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    FALSE           reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    NUMBER          reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    STRING          reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    FLOAT           reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    LPAR            reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    END             reduce using rule 69 (input -> VARIABLE ASIGN GETS .)
    RETURN          reduce using rule 69 (input -> VARIABLE ASIGN GETS .)


state 98

    (121) exponenciacion -> LPAR . operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> LPAR . opMatematicas RPAR EXPONENTIATION operadores
    (56) factor -> LPAR . expression RPAR
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (49) expression -> . term
    (50) expression -> . boleano
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    FLOAT           shift and go to state 145
    NUMBER          shift and go to state 146
    MINUS           shift and go to state 109
    VARIABLE        shift and go to state 147
    LPAR            shift and go to state 98
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    STRING          shift and go to state 34

    operadores                     shift and go to state 143
    opMatematicas                  shift and go to state 144
    expression                     shift and go to state 79
    enteros                        shift and go to state 111
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 99

    (72) diccionario -> LKEY . cuerpoHash RKEY
    (73) cuerpoHash -> . expression ASIGN GREATER expression
    (74) cuerpoHash -> . expression ASIGN GREATER expression COMMA cuerpoHash
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    cuerpoHash                     shift and go to state 148
    expression                     shift and go to state 149
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 100

    (87) array -> LCOR . parametrosA RCOR
    (88) array -> LCOR . RCOR
    (85) parametrosA -> . factor
    (86) parametrosA -> . factor COMMA parametrosA
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    RCOR            shift and go to state 151
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    parametrosA                    shift and go to state 150
    factor                         shift and go to state 152

state 101

    (95) stack -> STACK . LPAR parametrosA RPAR
    (96) stack -> STACK . LPAR vacio RPAR

    LPAR            shift and go to state 153


state 102

    (99) opMatematicas -> suma .

    $end            reduce using rule 99 (opMatematicas -> suma .)
    VARIABLE        reduce using rule 99 (opMatematicas -> suma .)
    IF              reduce using rule 99 (opMatematicas -> suma .)
    PUTS            reduce using rule 99 (opMatematicas -> suma .)
    FOR             reduce using rule 99 (opMatematicas -> suma .)
    WHILE           reduce using rule 99 (opMatematicas -> suma .)
    TRUE            reduce using rule 99 (opMatematicas -> suma .)
    FALSE           reduce using rule 99 (opMatematicas -> suma .)
    NUMBER          reduce using rule 99 (opMatematicas -> suma .)
    STRING          reduce using rule 99 (opMatematicas -> suma .)
    FLOAT           reduce using rule 99 (opMatematicas -> suma .)
    LPAR            reduce using rule 99 (opMatematicas -> suma .)
    END             reduce using rule 99 (opMatematicas -> suma .)
    RETURN          reduce using rule 99 (opMatematicas -> suma .)
    RPAR            reduce using rule 99 (opMatematicas -> suma .)


state 103

    (100) opMatematicas -> resta .

    $end            reduce using rule 100 (opMatematicas -> resta .)
    VARIABLE        reduce using rule 100 (opMatematicas -> resta .)
    IF              reduce using rule 100 (opMatematicas -> resta .)
    PUTS            reduce using rule 100 (opMatematicas -> resta .)
    FOR             reduce using rule 100 (opMatematicas -> resta .)
    WHILE           reduce using rule 100 (opMatematicas -> resta .)
    TRUE            reduce using rule 100 (opMatematicas -> resta .)
    FALSE           reduce using rule 100 (opMatematicas -> resta .)
    NUMBER          reduce using rule 100 (opMatematicas -> resta .)
    STRING          reduce using rule 100 (opMatematicas -> resta .)
    FLOAT           reduce using rule 100 (opMatematicas -> resta .)
    LPAR            reduce using rule 100 (opMatematicas -> resta .)
    END             reduce using rule 100 (opMatematicas -> resta .)
    RETURN          reduce using rule 100 (opMatematicas -> resta .)
    RPAR            reduce using rule 100 (opMatematicas -> resta .)


state 104

    (101) opMatematicas -> multiplicacion .

    $end            reduce using rule 101 (opMatematicas -> multiplicacion .)
    VARIABLE        reduce using rule 101 (opMatematicas -> multiplicacion .)
    IF              reduce using rule 101 (opMatematicas -> multiplicacion .)
    PUTS            reduce using rule 101 (opMatematicas -> multiplicacion .)
    FOR             reduce using rule 101 (opMatematicas -> multiplicacion .)
    WHILE           reduce using rule 101 (opMatematicas -> multiplicacion .)
    TRUE            reduce using rule 101 (opMatematicas -> multiplicacion .)
    FALSE           reduce using rule 101 (opMatematicas -> multiplicacion .)
    NUMBER          reduce using rule 101 (opMatematicas -> multiplicacion .)
    STRING          reduce using rule 101 (opMatematicas -> multiplicacion .)
    FLOAT           reduce using rule 101 (opMatematicas -> multiplicacion .)
    LPAR            reduce using rule 101 (opMatematicas -> multiplicacion .)
    END             reduce using rule 101 (opMatematicas -> multiplicacion .)
    RETURN          reduce using rule 101 (opMatematicas -> multiplicacion .)
    RPAR            reduce using rule 101 (opMatematicas -> multiplicacion .)


state 105

    (102) opMatematicas -> division .

    $end            reduce using rule 102 (opMatematicas -> division .)
    VARIABLE        reduce using rule 102 (opMatematicas -> division .)
    IF              reduce using rule 102 (opMatematicas -> division .)
    PUTS            reduce using rule 102 (opMatematicas -> division .)
    FOR             reduce using rule 102 (opMatematicas -> division .)
    WHILE           reduce using rule 102 (opMatematicas -> division .)
    TRUE            reduce using rule 102 (opMatematicas -> division .)
    FALSE           reduce using rule 102 (opMatematicas -> division .)
    NUMBER          reduce using rule 102 (opMatematicas -> division .)
    STRING          reduce using rule 102 (opMatematicas -> division .)
    FLOAT           reduce using rule 102 (opMatematicas -> division .)
    LPAR            reduce using rule 102 (opMatematicas -> division .)
    END             reduce using rule 102 (opMatematicas -> division .)
    RETURN          reduce using rule 102 (opMatematicas -> division .)
    RPAR            reduce using rule 102 (opMatematicas -> division .)


state 106

    (103) opMatematicas -> exponenciacion .

    $end            reduce using rule 103 (opMatematicas -> exponenciacion .)
    VARIABLE        reduce using rule 103 (opMatematicas -> exponenciacion .)
    IF              reduce using rule 103 (opMatematicas -> exponenciacion .)
    PUTS            reduce using rule 103 (opMatematicas -> exponenciacion .)
    FOR             reduce using rule 103 (opMatematicas -> exponenciacion .)
    WHILE           reduce using rule 103 (opMatematicas -> exponenciacion .)
    TRUE            reduce using rule 103 (opMatematicas -> exponenciacion .)
    FALSE           reduce using rule 103 (opMatematicas -> exponenciacion .)
    NUMBER          reduce using rule 103 (opMatematicas -> exponenciacion .)
    STRING          reduce using rule 103 (opMatematicas -> exponenciacion .)
    FLOAT           reduce using rule 103 (opMatematicas -> exponenciacion .)
    LPAR            reduce using rule 103 (opMatematicas -> exponenciacion .)
    END             reduce using rule 103 (opMatematicas -> exponenciacion .)
    RETURN          reduce using rule 103 (opMatematicas -> exponenciacion .)
    RPAR            reduce using rule 103 (opMatematicas -> exponenciacion .)


state 107

    (52) factor -> NUMBER .
    (125) enteros -> NUMBER .

    AND             reduce using rule 52 (factor -> NUMBER .)
    OR              reduce using rule 52 (factor -> NUMBER .)
    GREATER         reduce using rule 52 (factor -> NUMBER .)
    GREATER_OR_EQUAL reduce using rule 52 (factor -> NUMBER .)
    MINOR           reduce using rule 52 (factor -> NUMBER .)
    MINOR_OR_EQUAL  reduce using rule 52 (factor -> NUMBER .)
    ASIGN           reduce using rule 52 (factor -> NUMBER .)
    NOT             reduce using rule 52 (factor -> NUMBER .)
    $end            reduce using rule 52 (factor -> NUMBER .)
    VARIABLE        reduce using rule 52 (factor -> NUMBER .)
    IF              reduce using rule 52 (factor -> NUMBER .)
    PUTS            reduce using rule 52 (factor -> NUMBER .)
    FOR             reduce using rule 52 (factor -> NUMBER .)
    WHILE           reduce using rule 52 (factor -> NUMBER .)
    TRUE            reduce using rule 52 (factor -> NUMBER .)
    FALSE           reduce using rule 52 (factor -> NUMBER .)
    NUMBER          reduce using rule 52 (factor -> NUMBER .)
    STRING          reduce using rule 52 (factor -> NUMBER .)
    FLOAT           reduce using rule 52 (factor -> NUMBER .)
    LPAR            reduce using rule 52 (factor -> NUMBER .)
    END             reduce using rule 52 (factor -> NUMBER .)
    RETURN          reduce using rule 52 (factor -> NUMBER .)
    PLUS            reduce using rule 125 (enteros -> NUMBER .)
    MINUS           reduce using rule 125 (enteros -> NUMBER .)
    TIMES           reduce using rule 125 (enteros -> NUMBER .)
    DIVIDE          reduce using rule 125 (enteros -> NUMBER .)
    EXPONENTIATION  reduce using rule 125 (enteros -> NUMBER .)


state 108

    (105) suma -> operadores . PLUS operadores
    (106) suma -> operadores . PLUS opMatematicas
    (107) suma -> operadores . PLUS LPAR operadores RPAR
    (108) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (110) resta -> operadores . MINUS operadores
    (111) resta -> operadores . MINUS opMatematicas
    (112) resta -> operadores . MINUS LPAR operadores RPAR
    (113) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> operadores . TIMES operadores
    (115) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (116) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (117) division -> operadores . DIVIDE operadores
    (118) division -> operadores . DIVIDE LPAR operadores RPAR
    (119) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> operadores . EXPONENTIATION operadores

    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    EXPONENTIATION  shift and go to state 158


state 109

    (126) enteros -> MINUS . NUMBER

    NUMBER          shift and go to state 159


state 110

    (54) factor -> FLOAT .
    (124) operadores -> FLOAT .

    AND             reduce using rule 54 (factor -> FLOAT .)
    OR              reduce using rule 54 (factor -> FLOAT .)
    GREATER         reduce using rule 54 (factor -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 54 (factor -> FLOAT .)
    MINOR           reduce using rule 54 (factor -> FLOAT .)
    MINOR_OR_EQUAL  reduce using rule 54 (factor -> FLOAT .)
    ASIGN           reduce using rule 54 (factor -> FLOAT .)
    NOT             reduce using rule 54 (factor -> FLOAT .)
    $end            reduce using rule 54 (factor -> FLOAT .)
    VARIABLE        reduce using rule 54 (factor -> FLOAT .)
    IF              reduce using rule 54 (factor -> FLOAT .)
    PUTS            reduce using rule 54 (factor -> FLOAT .)
    FOR             reduce using rule 54 (factor -> FLOAT .)
    WHILE           reduce using rule 54 (factor -> FLOAT .)
    TRUE            reduce using rule 54 (factor -> FLOAT .)
    FALSE           reduce using rule 54 (factor -> FLOAT .)
    NUMBER          reduce using rule 54 (factor -> FLOAT .)
    STRING          reduce using rule 54 (factor -> FLOAT .)
    FLOAT           reduce using rule 54 (factor -> FLOAT .)
    LPAR            reduce using rule 54 (factor -> FLOAT .)
    END             reduce using rule 54 (factor -> FLOAT .)
    RETURN          reduce using rule 54 (factor -> FLOAT .)
    PLUS            reduce using rule 124 (operadores -> FLOAT .)
    MINUS           reduce using rule 124 (operadores -> FLOAT .)
    TIMES           reduce using rule 124 (operadores -> FLOAT .)
    DIVIDE          reduce using rule 124 (operadores -> FLOAT .)
    EXPONENTIATION  reduce using rule 124 (operadores -> FLOAT .)


state 111

    (123) operadores -> enteros .

    PLUS            reduce using rule 123 (operadores -> enteros .)
    MINUS           reduce using rule 123 (operadores -> enteros .)
    TIMES           reduce using rule 123 (operadores -> enteros .)
    DIVIDE          reduce using rule 123 (operadores -> enteros .)
    EXPONENTIATION  reduce using rule 123 (operadores -> enteros .)
    RPAR            reduce using rule 123 (operadores -> enteros .)
    $end            reduce using rule 123 (operadores -> enteros .)
    VARIABLE        reduce using rule 123 (operadores -> enteros .)
    IF              reduce using rule 123 (operadores -> enteros .)
    PUTS            reduce using rule 123 (operadores -> enteros .)
    FOR             reduce using rule 123 (operadores -> enteros .)
    WHILE           reduce using rule 123 (operadores -> enteros .)
    TRUE            reduce using rule 123 (operadores -> enteros .)
    FALSE           reduce using rule 123 (operadores -> enteros .)
    NUMBER          reduce using rule 123 (operadores -> enteros .)
    STRING          reduce using rule 123 (operadores -> enteros .)
    FLOAT           reduce using rule 123 (operadores -> enteros .)
    LPAR            reduce using rule 123 (operadores -> enteros .)
    END             reduce using rule 123 (operadores -> enteros .)
    RETURN          reduce using rule 123 (operadores -> enteros .)


state 112

    (42) asignacion -> VARIABLE tipo_asignacion factor .

    $end            reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    VARIABLE        reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    IF              reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    PUTS            reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    FOR             reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    WHILE           reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    TRUE            reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    FALSE           reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    NUMBER          reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    STRING          reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    FLOAT           reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    LPAR            reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    END             reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)
    RETURN          reduce using rule 42 (asignacion -> VARIABLE tipo_asignacion factor .)


state 113

    (127) parametros -> VARIABLE .
    (128) parametros -> VARIABLE . COMMA parametros

    RPAR            reduce using rule 127 (parametros -> VARIABLE .)
    COMMA           shift and go to state 160


state 114

    (134) callFuncion -> VARIABLE LPAR RPAR .

    $end            reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    VARIABLE        reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    IF              reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    PUTS            reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    FOR             reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    WHILE           reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    TRUE            reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    FALSE           reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    NUMBER          reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    STRING          reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    FLOAT           reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    LPAR            reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    END             reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)
    RETURN          reduce using rule 134 (callFuncion -> VARIABLE LPAR RPAR .)


state 115

    (135) callFuncion -> VARIABLE LPAR parametros . RPAR

    RPAR            shift and go to state 161


state 116

    (76) addValueHash -> VARIABLE LCOR expression . RCOR ASIGN expression
    (77) modValueHash -> VARIABLE LCOR expression . RCOR ASIGN expression

    RCOR            shift and go to state 162


state 117

    (79) metodoBoleano -> VARIABLE POINT VARIABLE . QUESTION LPAR expression RPAR
    (80) metodoBoleano -> VARIABLE POINT VARIABLE . QUESTION LPAR RPAR

    QUESTION        shift and go to state 163


state 118

    (78) deleteValueHash -> VARIABLE POINT DELETE . LPAR expression RPAR

    LPAR            shift and go to state 164


state 119

    (90) insertArray -> VARIABLE POINT INSERT . LPAR argumentosA RPAR

    LPAR            shift and go to state 165


state 120

    (91) deleteArray -> VARIABLE POINT DELETE_AT . LPAR NUMBER RPAR

    LPAR            shift and go to state 166


state 121

    (97) searchStack -> VARIABLE POINT SEARCH . LPAR factor RPAR

    LPAR            shift and go to state 167


state 122

    (98) pushStack -> VARIABLE POINT PUSH . LPAR factor RPAR

    LPAR            shift and go to state 168


state 123

    (44) tipo_asignacion -> PLUS ASIGN .

    NUMBER          reduce using rule 44 (tipo_asignacion -> PLUS ASIGN .)
    STRING          reduce using rule 44 (tipo_asignacion -> PLUS ASIGN .)
    FLOAT           reduce using rule 44 (tipo_asignacion -> PLUS ASIGN .)
    VARIABLE        reduce using rule 44 (tipo_asignacion -> PLUS ASIGN .)
    LPAR            reduce using rule 44 (tipo_asignacion -> PLUS ASIGN .)


state 124

    (45) tipo_asignacion -> MINUS ASIGN .

    NUMBER          reduce using rule 45 (tipo_asignacion -> MINUS ASIGN .)
    STRING          reduce using rule 45 (tipo_asignacion -> MINUS ASIGN .)
    FLOAT           reduce using rule 45 (tipo_asignacion -> MINUS ASIGN .)
    VARIABLE        reduce using rule 45 (tipo_asignacion -> MINUS ASIGN .)
    LPAR            reduce using rule 45 (tipo_asignacion -> MINUS ASIGN .)


state 125

    (46) tipo_asignacion -> TIMES ASIGN .

    NUMBER          reduce using rule 46 (tipo_asignacion -> TIMES ASIGN .)
    STRING          reduce using rule 46 (tipo_asignacion -> TIMES ASIGN .)
    FLOAT           reduce using rule 46 (tipo_asignacion -> TIMES ASIGN .)
    VARIABLE        reduce using rule 46 (tipo_asignacion -> TIMES ASIGN .)
    LPAR            reduce using rule 46 (tipo_asignacion -> TIMES ASIGN .)


state 126

    (47) tipo_asignacion -> DIVIDE ASIGN .

    NUMBER          reduce using rule 47 (tipo_asignacion -> DIVIDE ASIGN .)
    STRING          reduce using rule 47 (tipo_asignacion -> DIVIDE ASIGN .)
    FLOAT           reduce using rule 47 (tipo_asignacion -> DIVIDE ASIGN .)
    VARIABLE        reduce using rule 47 (tipo_asignacion -> DIVIDE ASIGN .)
    LPAR            reduce using rule 47 (tipo_asignacion -> DIVIDE ASIGN .)


state 127

    (48) tipo_asignacion -> EXPONENTIATION ASIGN .

    NUMBER          reduce using rule 48 (tipo_asignacion -> EXPONENTIATION ASIGN .)
    STRING          reduce using rule 48 (tipo_asignacion -> EXPONENTIATION ASIGN .)
    FLOAT           reduce using rule 48 (tipo_asignacion -> EXPONENTIATION ASIGN .)
    VARIABLE        reduce using rule 48 (tipo_asignacion -> EXPONENTIATION ASIGN .)
    LPAR            reduce using rule 48 (tipo_asignacion -> EXPONENTIATION ASIGN .)


state 128

    (131) funciones -> encabezado repCuerpo END .

    $end            reduce using rule 131 (funciones -> encabezado repCuerpo END .)


state 129

    (133) funciones -> encabezado repCuerpo RETURN . expression END
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 169
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 130

    (132) funciones -> encabezado RETURN expression . END

    END             shift and go to state 170


state 131

    (84) repCuerpo -> cuerpo repCuerpo .

    END             reduce using rule 84 (repCuerpo -> cuerpo repCuerpo .)
    RETURN          reduce using rule 84 (repCuerpo -> cuerpo repCuerpo .)


state 132

    (78) deleteValueHash -> VARIABLE POINT . DELETE LPAR expression RPAR
    (90) insertArray -> VARIABLE POINT . INSERT LPAR argumentosA RPAR
    (91) deleteArray -> VARIABLE POINT . DELETE_AT LPAR NUMBER RPAR
    (98) pushStack -> VARIABLE POINT . PUSH LPAR factor RPAR
    (97) searchStack -> VARIABLE POINT . SEARCH LPAR factor RPAR

    DELETE          shift and go to state 118
    INSERT          shift and go to state 119
    DELETE_AT       shift and go to state 120
    PUSH            shift and go to state 122
    SEARCH          shift and go to state 121


state 133

    (136) condicional -> IF comparacion D_POINT . repCuerpo END
    (137) condicional -> IF comparacion D_POINT . repCuerpo END cond_else
    (83) repCuerpo -> . cuerpo
    (84) repCuerpo -> . cuerpo repCuerpo
    (19) cuerpo -> . asignacion
    (20) cuerpo -> . expression
    (21) cuerpo -> . comparacion
    (22) cuerpo -> . condicional
    (23) cuerpo -> . impresion
    (24) cuerpo -> . for
    (25) cuerpo -> . while
    (26) cuerpo -> . input
    (27) cuerpo -> . callFuncion
    (28) cuerpo -> . addValueHash
    (29) cuerpo -> . modValueHash
    (30) cuerpo -> . deleteValueHash
    (31) cuerpo -> . insertArray
    (32) cuerpo -> . deleteArray
    (33) cuerpo -> . pushStack
    (34) cuerpo -> . searchStack
    (35) asignacion -> . VARIABLE ASIGN expression
    (36) asignacion -> . VARIABLE ASIGN comparacion
    (37) asignacion -> . VARIABLE ASIGN callFuncion
    (38) asignacion -> . VARIABLE ASIGN diccionario
    (39) asignacion -> . VARIABLE ASIGN getValueHash
    (40) asignacion -> . VARIABLE ASIGN array
    (41) asignacion -> . VARIABLE ASIGN stack
    (42) asignacion -> . VARIABLE tipo_asignacion factor
    (43) asignacion -> . VARIABLE ASIGN opMatematicas
    (49) expression -> . term
    (50) expression -> . boleano
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (136) condicional -> . IF comparacion D_POINT repCuerpo END
    (137) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (68) impresion -> . PUTS factor
    (92) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (81) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (69) input -> . VARIABLE ASIGN GETS
    (134) callFuncion -> . VARIABLE LPAR RPAR
    (135) callFuncion -> . VARIABLE LPAR parametros RPAR
    (76) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (77) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (90) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (98) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (97) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 74
    IF              shift and go to state 25
    PUTS            shift and go to state 30
    FOR             shift and go to state 28
    WHILE           shift and go to state 26
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAR            shift and go to state 27

    comparacion                    shift and go to state 60
    repCuerpo                      shift and go to state 171
    cuerpo                         shift and go to state 58
    asignacion                     shift and go to state 59
    expression                     shift and go to state 57
    condicional                    shift and go to state 61
    impresion                      shift and go to state 62
    for                            shift and go to state 63
    while                          shift and go to state 64
    input                          shift and go to state 65
    callFuncion                    shift and go to state 66
    addValueHash                   shift and go to state 67
    modValueHash                   shift and go to state 68
    deleteValueHash                shift and go to state 69
    insertArray                    shift and go to state 70
    deleteArray                    shift and go to state 71
    pushStack                      shift and go to state 72
    searchStack                    shift and go to state 73
    factor                         shift and go to state 21
    term                           shift and go to state 22
    boleano                        shift and go to state 23

state 134

    (81) while -> WHILE LPAR comparacion . RPAR repCuerpo END
    (82) while -> WHILE LPAR comparacion . RPAR repCuerpo END while

    RPAR            shift and go to state 172


state 135

    (56) factor -> LPAR expression RPAR .

    AND             reduce using rule 56 (factor -> LPAR expression RPAR .)
    OR              reduce using rule 56 (factor -> LPAR expression RPAR .)
    GREATER         reduce using rule 56 (factor -> LPAR expression RPAR .)
    GREATER_OR_EQUAL reduce using rule 56 (factor -> LPAR expression RPAR .)
    MINOR           reduce using rule 56 (factor -> LPAR expression RPAR .)
    MINOR_OR_EQUAL  reduce using rule 56 (factor -> LPAR expression RPAR .)
    ASIGN           reduce using rule 56 (factor -> LPAR expression RPAR .)
    NOT             reduce using rule 56 (factor -> LPAR expression RPAR .)
    $end            reduce using rule 56 (factor -> LPAR expression RPAR .)
    VARIABLE        reduce using rule 56 (factor -> LPAR expression RPAR .)
    IF              reduce using rule 56 (factor -> LPAR expression RPAR .)
    PUTS            reduce using rule 56 (factor -> LPAR expression RPAR .)
    FOR             reduce using rule 56 (factor -> LPAR expression RPAR .)
    WHILE           reduce using rule 56 (factor -> LPAR expression RPAR .)
    TRUE            reduce using rule 56 (factor -> LPAR expression RPAR .)
    FALSE           reduce using rule 56 (factor -> LPAR expression RPAR .)
    NUMBER          reduce using rule 56 (factor -> LPAR expression RPAR .)
    STRING          reduce using rule 56 (factor -> LPAR expression RPAR .)
    FLOAT           reduce using rule 56 (factor -> LPAR expression RPAR .)
    LPAR            reduce using rule 56 (factor -> LPAR expression RPAR .)
    END             reduce using rule 56 (factor -> LPAR expression RPAR .)
    RETURN          reduce using rule 56 (factor -> LPAR expression RPAR .)
    RPAR            reduce using rule 56 (factor -> LPAR expression RPAR .)
    D_POINT         reduce using rule 56 (factor -> LPAR expression RPAR .)
    RCOR            reduce using rule 56 (factor -> LPAR expression RPAR .)
    COMMA           reduce using rule 56 (factor -> LPAR expression RPAR .)
    RKEY            reduce using rule 56 (factor -> LPAR expression RPAR .)


state 136

    (92) for -> FOR VARIABLE IN . NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> FOR VARIABLE IN . NUMBER POINT POINT NUMBER DO repCuerpo END for

    NUMBER          shift and go to state 173


state 137

    (129) encabezado -> DEF VARIABLE LPAR . RPAR
    (130) encabezado -> DEF VARIABLE LPAR . parametros RPAR
    (127) parametros -> . VARIABLE
    (128) parametros -> . VARIABLE COMMA parametros

    RPAR            shift and go to state 174
    VARIABLE        shift and go to state 113

    parametros                     shift and go to state 175

state 138

    (58) comparacion -> expression comparador expression AND . comparacion
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 76
    comparacion                    shift and go to state 176
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 139

    (59) comparacion -> expression comparador expression OR . comparacion
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 76
    comparacion                    shift and go to state 177
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 140

    (75) getValueHash -> VARIABLE LCOR . expression RCOR
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 178
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 141

    (104) suma -> VARIABLE PLUS . NUMBER

    NUMBER          shift and go to state 179


state 142

    (109) resta -> VARIABLE MINUS . NUMBER

    NUMBER          shift and go to state 180


state 143

    (121) exponenciacion -> LPAR operadores . RPAR EXPONENTIATION operadores
    (105) suma -> operadores . PLUS operadores
    (106) suma -> operadores . PLUS opMatematicas
    (107) suma -> operadores . PLUS LPAR operadores RPAR
    (108) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (110) resta -> operadores . MINUS operadores
    (111) resta -> operadores . MINUS opMatematicas
    (112) resta -> operadores . MINUS LPAR operadores RPAR
    (113) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> operadores . TIMES operadores
    (115) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (116) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (117) division -> operadores . DIVIDE operadores
    (118) division -> operadores . DIVIDE LPAR operadores RPAR
    (119) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 181
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    EXPONENTIATION  shift and go to state 158


state 144

    (122) exponenciacion -> LPAR opMatematicas . RPAR EXPONENTIATION operadores

    RPAR            shift and go to state 182


state 145

    (124) operadores -> FLOAT .
    (54) factor -> FLOAT .

  ! reduce/reduce conflict for RPAR resolved using rule 54 (factor -> FLOAT .)
    PLUS            reduce using rule 124 (operadores -> FLOAT .)
    MINUS           reduce using rule 124 (operadores -> FLOAT .)
    TIMES           reduce using rule 124 (operadores -> FLOAT .)
    DIVIDE          reduce using rule 124 (operadores -> FLOAT .)
    EXPONENTIATION  reduce using rule 124 (operadores -> FLOAT .)
    RPAR            reduce using rule 54 (factor -> FLOAT .)

  ! RPAR            [ reduce using rule 124 (operadores -> FLOAT .) ]


state 146

    (125) enteros -> NUMBER .
    (52) factor -> NUMBER .

  ! reduce/reduce conflict for RPAR resolved using rule 52 (factor -> NUMBER .)
    PLUS            reduce using rule 125 (enteros -> NUMBER .)
    MINUS           reduce using rule 125 (enteros -> NUMBER .)
    TIMES           reduce using rule 125 (enteros -> NUMBER .)
    DIVIDE          reduce using rule 125 (enteros -> NUMBER .)
    EXPONENTIATION  reduce using rule 125 (enteros -> NUMBER .)
    RPAR            reduce using rule 52 (factor -> NUMBER .)

  ! RPAR            [ reduce using rule 125 (enteros -> NUMBER .) ]


state 147

    (104) suma -> VARIABLE . PLUS NUMBER
    (109) resta -> VARIABLE . MINUS NUMBER
    (55) factor -> VARIABLE .

    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    RPAR            reduce using rule 55 (factor -> VARIABLE .)


state 148

    (72) diccionario -> LKEY cuerpoHash . RKEY

    RKEY            shift and go to state 183


state 149

    (73) cuerpoHash -> expression . ASIGN GREATER expression
    (74) cuerpoHash -> expression . ASIGN GREATER expression COMMA cuerpoHash

    ASIGN           shift and go to state 184


state 150

    (87) array -> LCOR parametrosA . RCOR

    RCOR            shift and go to state 185


state 151

    (88) array -> LCOR RCOR .

    $end            reduce using rule 88 (array -> LCOR RCOR .)
    VARIABLE        reduce using rule 88 (array -> LCOR RCOR .)
    IF              reduce using rule 88 (array -> LCOR RCOR .)
    PUTS            reduce using rule 88 (array -> LCOR RCOR .)
    FOR             reduce using rule 88 (array -> LCOR RCOR .)
    WHILE           reduce using rule 88 (array -> LCOR RCOR .)
    TRUE            reduce using rule 88 (array -> LCOR RCOR .)
    FALSE           reduce using rule 88 (array -> LCOR RCOR .)
    NUMBER          reduce using rule 88 (array -> LCOR RCOR .)
    STRING          reduce using rule 88 (array -> LCOR RCOR .)
    FLOAT           reduce using rule 88 (array -> LCOR RCOR .)
    LPAR            reduce using rule 88 (array -> LCOR RCOR .)
    END             reduce using rule 88 (array -> LCOR RCOR .)
    RETURN          reduce using rule 88 (array -> LCOR RCOR .)


state 152

    (85) parametrosA -> factor .
    (86) parametrosA -> factor . COMMA parametrosA

    RCOR            reduce using rule 85 (parametrosA -> factor .)
    RPAR            reduce using rule 85 (parametrosA -> factor .)
    COMMA           shift and go to state 186


state 153

    (95) stack -> STACK LPAR . parametrosA RPAR
    (96) stack -> STACK LPAR . vacio RPAR
    (85) parametrosA -> . factor
    (86) parametrosA -> . factor COMMA parametrosA
    (94) vacio -> .
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    RPAR            reduce using rule 94 (vacio -> .)
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    parametrosA                    shift and go to state 187
    vacio                          shift and go to state 188
    factor                         shift and go to state 152

state 154

    (105) suma -> operadores PLUS . operadores
    (106) suma -> operadores PLUS . opMatematicas
    (107) suma -> operadores PLUS . LPAR operadores RPAR
    (108) suma -> operadores PLUS . LPAR opMatematicas RPAR
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    LPAR            shift and go to state 191
    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109
    VARIABLE        shift and go to state 194

    operadores                     shift and go to state 189
    opMatematicas                  shift and go to state 190
    enteros                        shift and go to state 111
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106

state 155

    (110) resta -> operadores MINUS . operadores
    (111) resta -> operadores MINUS . opMatematicas
    (112) resta -> operadores MINUS . LPAR operadores RPAR
    (113) resta -> operadores MINUS . LPAR opMatematicas RPAR
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    LPAR            shift and go to state 197
    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109
    VARIABLE        shift and go to state 194

    operadores                     shift and go to state 195
    opMatematicas                  shift and go to state 196
    enteros                        shift and go to state 111
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106

state 156

    (114) multiplicacion -> operadores TIMES . operadores
    (115) multiplicacion -> operadores TIMES . LPAR operadores RPAR
    (116) multiplicacion -> operadores TIMES . LPAR opMatematicas RPAR
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER

    LPAR            shift and go to state 199
    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109

    operadores                     shift and go to state 198
    enteros                        shift and go to state 111

state 157

    (117) division -> operadores DIVIDE . operadores
    (118) division -> operadores DIVIDE . LPAR operadores RPAR
    (119) division -> operadores DIVIDE . LPAR opMatematicas RPAR
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER

    LPAR            shift and go to state 201
    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109

    operadores                     shift and go to state 200
    enteros                        shift and go to state 111

state 158

    (120) exponenciacion -> operadores EXPONENTIATION . operadores
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER

    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109

    operadores                     shift and go to state 202
    enteros                        shift and go to state 111

state 159

    (126) enteros -> MINUS NUMBER .

    PLUS            reduce using rule 126 (enteros -> MINUS NUMBER .)
    MINUS           reduce using rule 126 (enteros -> MINUS NUMBER .)
    TIMES           reduce using rule 126 (enteros -> MINUS NUMBER .)
    DIVIDE          reduce using rule 126 (enteros -> MINUS NUMBER .)
    EXPONENTIATION  reduce using rule 126 (enteros -> MINUS NUMBER .)
    RPAR            reduce using rule 126 (enteros -> MINUS NUMBER .)
    $end            reduce using rule 126 (enteros -> MINUS NUMBER .)
    VARIABLE        reduce using rule 126 (enteros -> MINUS NUMBER .)
    IF              reduce using rule 126 (enteros -> MINUS NUMBER .)
    PUTS            reduce using rule 126 (enteros -> MINUS NUMBER .)
    FOR             reduce using rule 126 (enteros -> MINUS NUMBER .)
    WHILE           reduce using rule 126 (enteros -> MINUS NUMBER .)
    TRUE            reduce using rule 126 (enteros -> MINUS NUMBER .)
    FALSE           reduce using rule 126 (enteros -> MINUS NUMBER .)
    NUMBER          reduce using rule 126 (enteros -> MINUS NUMBER .)
    STRING          reduce using rule 126 (enteros -> MINUS NUMBER .)
    FLOAT           reduce using rule 126 (enteros -> MINUS NUMBER .)
    LPAR            reduce using rule 126 (enteros -> MINUS NUMBER .)
    END             reduce using rule 126 (enteros -> MINUS NUMBER .)
    RETURN          reduce using rule 126 (enteros -> MINUS NUMBER .)


state 160

    (128) parametros -> VARIABLE COMMA . parametros
    (127) parametros -> . VARIABLE
    (128) parametros -> . VARIABLE COMMA parametros

    VARIABLE        shift and go to state 113

    parametros                     shift and go to state 203

state 161

    (135) callFuncion -> VARIABLE LPAR parametros RPAR .

    $end            reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    VARIABLE        reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    IF              reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    PUTS            reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    FOR             reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    WHILE           reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    TRUE            reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    FALSE           reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    NUMBER          reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    STRING          reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    FLOAT           reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    LPAR            reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    END             reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)
    RETURN          reduce using rule 135 (callFuncion -> VARIABLE LPAR parametros RPAR .)


state 162

    (76) addValueHash -> VARIABLE LCOR expression RCOR . ASIGN expression
    (77) modValueHash -> VARIABLE LCOR expression RCOR . ASIGN expression

    ASIGN           shift and go to state 204


state 163

    (79) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION . LPAR expression RPAR
    (80) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION . LPAR RPAR

    LPAR            shift and go to state 205


state 164

    (78) deleteValueHash -> VARIABLE POINT DELETE LPAR . expression RPAR
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 206
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 165

    (90) insertArray -> VARIABLE POINT INSERT LPAR . argumentosA RPAR
    (89) argumentosA -> . NUMBER COMMA factor

    NUMBER          shift and go to state 208

    argumentosA                    shift and go to state 207

state 166

    (91) deleteArray -> VARIABLE POINT DELETE_AT LPAR . NUMBER RPAR

    NUMBER          shift and go to state 209


state 167

    (97) searchStack -> VARIABLE POINT SEARCH LPAR . factor RPAR
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    factor                         shift and go to state 210

state 168

    (98) pushStack -> VARIABLE POINT PUSH LPAR . factor RPAR
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    factor                         shift and go to state 211

state 169

    (133) funciones -> encabezado repCuerpo RETURN expression . END

    END             shift and go to state 212


state 170

    (132) funciones -> encabezado RETURN expression END .

    $end            reduce using rule 132 (funciones -> encabezado RETURN expression END .)


state 171

    (136) condicional -> IF comparacion D_POINT repCuerpo . END
    (137) condicional -> IF comparacion D_POINT repCuerpo . END cond_else

    END             shift and go to state 213


state 172

    (81) while -> WHILE LPAR comparacion RPAR . repCuerpo END
    (82) while -> WHILE LPAR comparacion RPAR . repCuerpo END while
    (83) repCuerpo -> . cuerpo
    (84) repCuerpo -> . cuerpo repCuerpo
    (19) cuerpo -> . asignacion
    (20) cuerpo -> . expression
    (21) cuerpo -> . comparacion
    (22) cuerpo -> . condicional
    (23) cuerpo -> . impresion
    (24) cuerpo -> . for
    (25) cuerpo -> . while
    (26) cuerpo -> . input
    (27) cuerpo -> . callFuncion
    (28) cuerpo -> . addValueHash
    (29) cuerpo -> . modValueHash
    (30) cuerpo -> . deleteValueHash
    (31) cuerpo -> . insertArray
    (32) cuerpo -> . deleteArray
    (33) cuerpo -> . pushStack
    (34) cuerpo -> . searchStack
    (35) asignacion -> . VARIABLE ASIGN expression
    (36) asignacion -> . VARIABLE ASIGN comparacion
    (37) asignacion -> . VARIABLE ASIGN callFuncion
    (38) asignacion -> . VARIABLE ASIGN diccionario
    (39) asignacion -> . VARIABLE ASIGN getValueHash
    (40) asignacion -> . VARIABLE ASIGN array
    (41) asignacion -> . VARIABLE ASIGN stack
    (42) asignacion -> . VARIABLE tipo_asignacion factor
    (43) asignacion -> . VARIABLE ASIGN opMatematicas
    (49) expression -> . term
    (50) expression -> . boleano
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (136) condicional -> . IF comparacion D_POINT repCuerpo END
    (137) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (68) impresion -> . PUTS factor
    (92) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (81) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (69) input -> . VARIABLE ASIGN GETS
    (134) callFuncion -> . VARIABLE LPAR RPAR
    (135) callFuncion -> . VARIABLE LPAR parametros RPAR
    (76) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (77) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (90) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (98) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (97) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 74
    IF              shift and go to state 25
    PUTS            shift and go to state 30
    FOR             shift and go to state 28
    WHILE           shift and go to state 26
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAR            shift and go to state 27

    comparacion                    shift and go to state 60
    repCuerpo                      shift and go to state 214
    while                          shift and go to state 64
    cuerpo                         shift and go to state 58
    asignacion                     shift and go to state 59
    expression                     shift and go to state 57
    condicional                    shift and go to state 61
    impresion                      shift and go to state 62
    for                            shift and go to state 63
    input                          shift and go to state 65
    callFuncion                    shift and go to state 66
    addValueHash                   shift and go to state 67
    modValueHash                   shift and go to state 68
    deleteValueHash                shift and go to state 69
    insertArray                    shift and go to state 70
    deleteArray                    shift and go to state 71
    pushStack                      shift and go to state 72
    searchStack                    shift and go to state 73
    factor                         shift and go to state 21
    term                           shift and go to state 22
    boleano                        shift and go to state 23

state 173

    (92) for -> FOR VARIABLE IN NUMBER . POINT POINT NUMBER DO repCuerpo END
    (93) for -> FOR VARIABLE IN NUMBER . POINT POINT NUMBER DO repCuerpo END for

    POINT           shift and go to state 215


state 174

    (129) encabezado -> DEF VARIABLE LPAR RPAR .

    RETURN          reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    VARIABLE        reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    IF              reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    PUTS            reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    FOR             reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    WHILE           reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    TRUE            reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    FALSE           reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    NUMBER          reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    STRING          reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    FLOAT           reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)
    LPAR            reduce using rule 129 (encabezado -> DEF VARIABLE LPAR RPAR .)


state 175

    (130) encabezado -> DEF VARIABLE LPAR parametros . RPAR

    RPAR            shift and go to state 216


state 176

    (58) comparacion -> expression comparador expression AND comparacion .

    $end            reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    VARIABLE        reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    IF              reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    PUTS            reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    FOR             reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    WHILE           reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    TRUE            reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    FALSE           reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    NUMBER          reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    STRING          reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    FLOAT           reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    LPAR            reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    END             reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    RETURN          reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    D_POINT         reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)
    RPAR            reduce using rule 58 (comparacion -> expression comparador expression AND comparacion .)


state 177

    (59) comparacion -> expression comparador expression OR comparacion .

    $end            reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    VARIABLE        reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    IF              reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    PUTS            reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    FOR             reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    WHILE           reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    TRUE            reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    FALSE           reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    NUMBER          reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    STRING          reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    FLOAT           reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    LPAR            reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    END             reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    RETURN          reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    D_POINT         reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)
    RPAR            reduce using rule 59 (comparacion -> expression comparador expression OR comparacion .)


state 178

    (75) getValueHash -> VARIABLE LCOR expression . RCOR

    RCOR            shift and go to state 217


state 179

    (104) suma -> VARIABLE PLUS NUMBER .

    $end            reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    VARIABLE        reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    IF              reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    PUTS            reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    FOR             reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    WHILE           reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    TRUE            reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    FALSE           reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    NUMBER          reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    STRING          reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    FLOAT           reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    LPAR            reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    END             reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    RETURN          reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)
    RPAR            reduce using rule 104 (suma -> VARIABLE PLUS NUMBER .)


state 180

    (109) resta -> VARIABLE MINUS NUMBER .

    $end            reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    VARIABLE        reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    IF              reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    PUTS            reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    FOR             reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    WHILE           reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    TRUE            reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    FALSE           reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    NUMBER          reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    STRING          reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    FLOAT           reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    LPAR            reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    END             reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    RETURN          reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)
    RPAR            reduce using rule 109 (resta -> VARIABLE MINUS NUMBER .)


state 181

    (121) exponenciacion -> LPAR operadores RPAR . EXPONENTIATION operadores

    EXPONENTIATION  shift and go to state 218


state 182

    (122) exponenciacion -> LPAR opMatematicas RPAR . EXPONENTIATION operadores

    EXPONENTIATION  shift and go to state 219


state 183

    (72) diccionario -> LKEY cuerpoHash RKEY .

    $end            reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    VARIABLE        reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    IF              reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    PUTS            reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    FOR             reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    WHILE           reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    TRUE            reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    FALSE           reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    NUMBER          reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    STRING          reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    FLOAT           reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    LPAR            reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    END             reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)
    RETURN          reduce using rule 72 (diccionario -> LKEY cuerpoHash RKEY .)


state 184

    (73) cuerpoHash -> expression ASIGN . GREATER expression
    (74) cuerpoHash -> expression ASIGN . GREATER expression COMMA cuerpoHash

    GREATER         shift and go to state 220


state 185

    (87) array -> LCOR parametrosA RCOR .

    $end            reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    VARIABLE        reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    IF              reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    PUTS            reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    FOR             reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    WHILE           reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    TRUE            reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    FALSE           reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    NUMBER          reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    STRING          reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    FLOAT           reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    LPAR            reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    END             reduce using rule 87 (array -> LCOR parametrosA RCOR .)
    RETURN          reduce using rule 87 (array -> LCOR parametrosA RCOR .)


state 186

    (86) parametrosA -> factor COMMA . parametrosA
    (85) parametrosA -> . factor
    (86) parametrosA -> . factor COMMA parametrosA
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    factor                         shift and go to state 152
    parametrosA                    shift and go to state 221

state 187

    (95) stack -> STACK LPAR parametrosA . RPAR

    RPAR            shift and go to state 222


state 188

    (96) stack -> STACK LPAR vacio . RPAR

    RPAR            shift and go to state 223


state 189

    (105) suma -> operadores PLUS operadores .
    (105) suma -> operadores . PLUS operadores
    (106) suma -> operadores . PLUS opMatematicas
    (107) suma -> operadores . PLUS LPAR operadores RPAR
    (108) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (110) resta -> operadores . MINUS operadores
    (111) resta -> operadores . MINUS opMatematicas
    (112) resta -> operadores . MINUS LPAR operadores RPAR
    (113) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> operadores . TIMES operadores
    (115) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (116) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (117) division -> operadores . DIVIDE operadores
    (118) division -> operadores . DIVIDE LPAR operadores RPAR
    (119) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> operadores . EXPONENTIATION operadores

    $end            reduce using rule 105 (suma -> operadores PLUS operadores .)
    VARIABLE        reduce using rule 105 (suma -> operadores PLUS operadores .)
    IF              reduce using rule 105 (suma -> operadores PLUS operadores .)
    PUTS            reduce using rule 105 (suma -> operadores PLUS operadores .)
    FOR             reduce using rule 105 (suma -> operadores PLUS operadores .)
    WHILE           reduce using rule 105 (suma -> operadores PLUS operadores .)
    TRUE            reduce using rule 105 (suma -> operadores PLUS operadores .)
    FALSE           reduce using rule 105 (suma -> operadores PLUS operadores .)
    NUMBER          reduce using rule 105 (suma -> operadores PLUS operadores .)
    STRING          reduce using rule 105 (suma -> operadores PLUS operadores .)
    FLOAT           reduce using rule 105 (suma -> operadores PLUS operadores .)
    LPAR            reduce using rule 105 (suma -> operadores PLUS operadores .)
    END             reduce using rule 105 (suma -> operadores PLUS operadores .)
    RETURN          reduce using rule 105 (suma -> operadores PLUS operadores .)
    RPAR            reduce using rule 105 (suma -> operadores PLUS operadores .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    EXPONENTIATION  shift and go to state 158


state 190

    (106) suma -> operadores PLUS opMatematicas .

    $end            reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    VARIABLE        reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    IF              reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    PUTS            reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    FOR             reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    WHILE           reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    TRUE            reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    FALSE           reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    NUMBER          reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    STRING          reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    FLOAT           reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    LPAR            reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    END             reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    RETURN          reduce using rule 106 (suma -> operadores PLUS opMatematicas .)
    RPAR            reduce using rule 106 (suma -> operadores PLUS opMatematicas .)


state 191

    (107) suma -> operadores PLUS LPAR . operadores RPAR
    (108) suma -> operadores PLUS LPAR . opMatematicas RPAR
    (121) exponenciacion -> LPAR . operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> LPAR . opMatematicas RPAR EXPONENTIATION operadores
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109
    VARIABLE        shift and go to state 194
    LPAR            shift and go to state 225

    operadores                     shift and go to state 224
    opMatematicas                  shift and go to state 226
    enteros                        shift and go to state 111
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106

state 192

    (124) operadores -> FLOAT .

    PLUS            reduce using rule 124 (operadores -> FLOAT .)
    MINUS           reduce using rule 124 (operadores -> FLOAT .)
    TIMES           reduce using rule 124 (operadores -> FLOAT .)
    DIVIDE          reduce using rule 124 (operadores -> FLOAT .)
    EXPONENTIATION  reduce using rule 124 (operadores -> FLOAT .)
    $end            reduce using rule 124 (operadores -> FLOAT .)
    VARIABLE        reduce using rule 124 (operadores -> FLOAT .)
    IF              reduce using rule 124 (operadores -> FLOAT .)
    PUTS            reduce using rule 124 (operadores -> FLOAT .)
    FOR             reduce using rule 124 (operadores -> FLOAT .)
    WHILE           reduce using rule 124 (operadores -> FLOAT .)
    TRUE            reduce using rule 124 (operadores -> FLOAT .)
    FALSE           reduce using rule 124 (operadores -> FLOAT .)
    NUMBER          reduce using rule 124 (operadores -> FLOAT .)
    STRING          reduce using rule 124 (operadores -> FLOAT .)
    FLOAT           reduce using rule 124 (operadores -> FLOAT .)
    LPAR            reduce using rule 124 (operadores -> FLOAT .)
    END             reduce using rule 124 (operadores -> FLOAT .)
    RETURN          reduce using rule 124 (operadores -> FLOAT .)
    RPAR            reduce using rule 124 (operadores -> FLOAT .)


state 193

    (125) enteros -> NUMBER .

    PLUS            reduce using rule 125 (enteros -> NUMBER .)
    MINUS           reduce using rule 125 (enteros -> NUMBER .)
    TIMES           reduce using rule 125 (enteros -> NUMBER .)
    DIVIDE          reduce using rule 125 (enteros -> NUMBER .)
    EXPONENTIATION  reduce using rule 125 (enteros -> NUMBER .)
    $end            reduce using rule 125 (enteros -> NUMBER .)
    VARIABLE        reduce using rule 125 (enteros -> NUMBER .)
    IF              reduce using rule 125 (enteros -> NUMBER .)
    PUTS            reduce using rule 125 (enteros -> NUMBER .)
    FOR             reduce using rule 125 (enteros -> NUMBER .)
    WHILE           reduce using rule 125 (enteros -> NUMBER .)
    TRUE            reduce using rule 125 (enteros -> NUMBER .)
    FALSE           reduce using rule 125 (enteros -> NUMBER .)
    NUMBER          reduce using rule 125 (enteros -> NUMBER .)
    STRING          reduce using rule 125 (enteros -> NUMBER .)
    FLOAT           reduce using rule 125 (enteros -> NUMBER .)
    LPAR            reduce using rule 125 (enteros -> NUMBER .)
    END             reduce using rule 125 (enteros -> NUMBER .)
    RETURN          reduce using rule 125 (enteros -> NUMBER .)
    RPAR            reduce using rule 125 (enteros -> NUMBER .)


state 194

    (104) suma -> VARIABLE . PLUS NUMBER
    (109) resta -> VARIABLE . MINUS NUMBER

    PLUS            shift and go to state 141
    MINUS           shift and go to state 142


state 195

    (110) resta -> operadores MINUS operadores .
    (105) suma -> operadores . PLUS operadores
    (106) suma -> operadores . PLUS opMatematicas
    (107) suma -> operadores . PLUS LPAR operadores RPAR
    (108) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (110) resta -> operadores . MINUS operadores
    (111) resta -> operadores . MINUS opMatematicas
    (112) resta -> operadores . MINUS LPAR operadores RPAR
    (113) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> operadores . TIMES operadores
    (115) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (116) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (117) division -> operadores . DIVIDE operadores
    (118) division -> operadores . DIVIDE LPAR operadores RPAR
    (119) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> operadores . EXPONENTIATION operadores

    $end            reduce using rule 110 (resta -> operadores MINUS operadores .)
    VARIABLE        reduce using rule 110 (resta -> operadores MINUS operadores .)
    IF              reduce using rule 110 (resta -> operadores MINUS operadores .)
    PUTS            reduce using rule 110 (resta -> operadores MINUS operadores .)
    FOR             reduce using rule 110 (resta -> operadores MINUS operadores .)
    WHILE           reduce using rule 110 (resta -> operadores MINUS operadores .)
    TRUE            reduce using rule 110 (resta -> operadores MINUS operadores .)
    FALSE           reduce using rule 110 (resta -> operadores MINUS operadores .)
    NUMBER          reduce using rule 110 (resta -> operadores MINUS operadores .)
    STRING          reduce using rule 110 (resta -> operadores MINUS operadores .)
    FLOAT           reduce using rule 110 (resta -> operadores MINUS operadores .)
    LPAR            reduce using rule 110 (resta -> operadores MINUS operadores .)
    END             reduce using rule 110 (resta -> operadores MINUS operadores .)
    RETURN          reduce using rule 110 (resta -> operadores MINUS operadores .)
    RPAR            reduce using rule 110 (resta -> operadores MINUS operadores .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    EXPONENTIATION  shift and go to state 158


state 196

    (111) resta -> operadores MINUS opMatematicas .

    $end            reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    VARIABLE        reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    IF              reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    PUTS            reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    FOR             reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    WHILE           reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    TRUE            reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    FALSE           reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    NUMBER          reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    STRING          reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    FLOAT           reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    LPAR            reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    END             reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    RETURN          reduce using rule 111 (resta -> operadores MINUS opMatematicas .)
    RPAR            reduce using rule 111 (resta -> operadores MINUS opMatematicas .)


state 197

    (112) resta -> operadores MINUS LPAR . operadores RPAR
    (113) resta -> operadores MINUS LPAR . opMatematicas RPAR
    (121) exponenciacion -> LPAR . operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> LPAR . opMatematicas RPAR EXPONENTIATION operadores
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109
    VARIABLE        shift and go to state 194
    LPAR            shift and go to state 225

    operadores                     shift and go to state 227
    opMatematicas                  shift and go to state 228
    enteros                        shift and go to state 111
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106

state 198

    (114) multiplicacion -> operadores TIMES operadores .

    $end            reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    VARIABLE        reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    IF              reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    PUTS            reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    FOR             reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    WHILE           reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    TRUE            reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    FALSE           reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    NUMBER          reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    STRING          reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    FLOAT           reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    LPAR            reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    END             reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    RETURN          reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)
    RPAR            reduce using rule 114 (multiplicacion -> operadores TIMES operadores .)


state 199

    (115) multiplicacion -> operadores TIMES LPAR . operadores RPAR
    (116) multiplicacion -> operadores TIMES LPAR . opMatematicas RPAR
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109
    VARIABLE        shift and go to state 194
    LPAR            shift and go to state 225

    operadores                     shift and go to state 229
    opMatematicas                  shift and go to state 230
    enteros                        shift and go to state 111
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106

state 200

    (117) division -> operadores DIVIDE operadores .

    $end            reduce using rule 117 (division -> operadores DIVIDE operadores .)
    VARIABLE        reduce using rule 117 (division -> operadores DIVIDE operadores .)
    IF              reduce using rule 117 (division -> operadores DIVIDE operadores .)
    PUTS            reduce using rule 117 (division -> operadores DIVIDE operadores .)
    FOR             reduce using rule 117 (division -> operadores DIVIDE operadores .)
    WHILE           reduce using rule 117 (division -> operadores DIVIDE operadores .)
    TRUE            reduce using rule 117 (division -> operadores DIVIDE operadores .)
    FALSE           reduce using rule 117 (division -> operadores DIVIDE operadores .)
    NUMBER          reduce using rule 117 (division -> operadores DIVIDE operadores .)
    STRING          reduce using rule 117 (division -> operadores DIVIDE operadores .)
    FLOAT           reduce using rule 117 (division -> operadores DIVIDE operadores .)
    LPAR            reduce using rule 117 (division -> operadores DIVIDE operadores .)
    END             reduce using rule 117 (division -> operadores DIVIDE operadores .)
    RETURN          reduce using rule 117 (division -> operadores DIVIDE operadores .)
    RPAR            reduce using rule 117 (division -> operadores DIVIDE operadores .)


state 201

    (118) division -> operadores DIVIDE LPAR . operadores RPAR
    (119) division -> operadores DIVIDE LPAR . opMatematicas RPAR
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109
    VARIABLE        shift and go to state 194
    LPAR            shift and go to state 225

    operadores                     shift and go to state 231
    opMatematicas                  shift and go to state 232
    enteros                        shift and go to state 111
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106

state 202

    (120) exponenciacion -> operadores EXPONENTIATION operadores .

    $end            reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    VARIABLE        reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    IF              reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    PUTS            reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    FOR             reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    WHILE           reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    TRUE            reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    FALSE           reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    NUMBER          reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    STRING          reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    FLOAT           reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    LPAR            reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    END             reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    RETURN          reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)
    RPAR            reduce using rule 120 (exponenciacion -> operadores EXPONENTIATION operadores .)


state 203

    (128) parametros -> VARIABLE COMMA parametros .

    RPAR            reduce using rule 128 (parametros -> VARIABLE COMMA parametros .)


state 204

    (76) addValueHash -> VARIABLE LCOR expression RCOR ASIGN . expression
    (77) modValueHash -> VARIABLE LCOR expression RCOR ASIGN . expression
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 233
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 205

    (79) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR . expression RPAR
    (80) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR . RPAR
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    RPAR            shift and go to state 235
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 234
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 206

    (78) deleteValueHash -> VARIABLE POINT DELETE LPAR expression . RPAR

    RPAR            shift and go to state 236


state 207

    (90) insertArray -> VARIABLE POINT INSERT LPAR argumentosA . RPAR

    RPAR            shift and go to state 237


state 208

    (89) argumentosA -> NUMBER . COMMA factor

    COMMA           shift and go to state 238


state 209

    (91) deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER . RPAR

    RPAR            shift and go to state 239


state 210

    (97) searchStack -> VARIABLE POINT SEARCH LPAR factor . RPAR

    RPAR            shift and go to state 240


state 211

    (98) pushStack -> VARIABLE POINT PUSH LPAR factor . RPAR

    RPAR            shift and go to state 241


state 212

    (133) funciones -> encabezado repCuerpo RETURN expression END .

    $end            reduce using rule 133 (funciones -> encabezado repCuerpo RETURN expression END .)


state 213

    (136) condicional -> IF comparacion D_POINT repCuerpo END .
    (137) condicional -> IF comparacion D_POINT repCuerpo END . cond_else
    (138) cond_else -> . ELSE D_POINT repCuerpo END

    $end            reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    VARIABLE        reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    IF              reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    PUTS            reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    FOR             reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    WHILE           reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    TRUE            reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    FALSE           reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    NUMBER          reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    STRING          reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    FLOAT           reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    LPAR            reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    END             reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    RETURN          reduce using rule 136 (condicional -> IF comparacion D_POINT repCuerpo END .)
    ELSE            shift and go to state 243

    cond_else                      shift and go to state 242

state 214

    (81) while -> WHILE LPAR comparacion RPAR repCuerpo . END
    (82) while -> WHILE LPAR comparacion RPAR repCuerpo . END while

    END             shift and go to state 244


state 215

    (92) for -> FOR VARIABLE IN NUMBER POINT . POINT NUMBER DO repCuerpo END
    (93) for -> FOR VARIABLE IN NUMBER POINT . POINT NUMBER DO repCuerpo END for

    POINT           shift and go to state 245


state 216

    (130) encabezado -> DEF VARIABLE LPAR parametros RPAR .

    RETURN          reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    VARIABLE        reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    IF              reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    PUTS            reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    FOR             reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    WHILE           reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    TRUE            reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    FALSE           reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    NUMBER          reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    STRING          reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    FLOAT           reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)
    LPAR            reduce using rule 130 (encabezado -> DEF VARIABLE LPAR parametros RPAR .)


state 217

    (75) getValueHash -> VARIABLE LCOR expression RCOR .

    $end            reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    VARIABLE        reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    IF              reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    PUTS            reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    FOR             reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    WHILE           reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    TRUE            reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    FALSE           reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    NUMBER          reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    STRING          reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    FLOAT           reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    LPAR            reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    END             reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)
    RETURN          reduce using rule 75 (getValueHash -> VARIABLE LCOR expression RCOR .)


state 218

    (121) exponenciacion -> LPAR operadores RPAR EXPONENTIATION . operadores
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER

    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109

    operadores                     shift and go to state 246
    enteros                        shift and go to state 111

state 219

    (122) exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION . operadores
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER

    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109

    operadores                     shift and go to state 247
    enteros                        shift and go to state 111

state 220

    (73) cuerpoHash -> expression ASIGN GREATER . expression
    (74) cuerpoHash -> expression ASIGN GREATER . expression COMMA cuerpoHash
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 248
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 221

    (86) parametrosA -> factor COMMA parametrosA .

    RCOR            reduce using rule 86 (parametrosA -> factor COMMA parametrosA .)
    RPAR            reduce using rule 86 (parametrosA -> factor COMMA parametrosA .)


state 222

    (95) stack -> STACK LPAR parametrosA RPAR .

    $end            reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    VARIABLE        reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    IF              reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    PUTS            reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    FOR             reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    WHILE           reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    TRUE            reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    FALSE           reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    NUMBER          reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    STRING          reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    FLOAT           reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    LPAR            reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    END             reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)
    RETURN          reduce using rule 95 (stack -> STACK LPAR parametrosA RPAR .)


state 223

    (96) stack -> STACK LPAR vacio RPAR .

    $end            reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    VARIABLE        reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    IF              reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    PUTS            reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    FOR             reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    WHILE           reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    TRUE            reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    FALSE           reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    NUMBER          reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    STRING          reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    FLOAT           reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    LPAR            reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    END             reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)
    RETURN          reduce using rule 96 (stack -> STACK LPAR vacio RPAR .)


state 224

    (107) suma -> operadores PLUS LPAR operadores . RPAR
    (121) exponenciacion -> LPAR operadores . RPAR EXPONENTIATION operadores
    (105) suma -> operadores . PLUS operadores
    (106) suma -> operadores . PLUS opMatematicas
    (107) suma -> operadores . PLUS LPAR operadores RPAR
    (108) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (110) resta -> operadores . MINUS operadores
    (111) resta -> operadores . MINUS opMatematicas
    (112) resta -> operadores . MINUS LPAR operadores RPAR
    (113) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> operadores . TIMES operadores
    (115) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (116) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (117) division -> operadores . DIVIDE operadores
    (118) division -> operadores . DIVIDE LPAR operadores RPAR
    (119) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 249
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    EXPONENTIATION  shift and go to state 158


state 225

    (121) exponenciacion -> LPAR . operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> LPAR . opMatematicas RPAR EXPONENTIATION operadores
    (123) operadores -> . enteros
    (124) operadores -> . FLOAT
    (99) opMatematicas -> . suma
    (100) opMatematicas -> . resta
    (101) opMatematicas -> . multiplicacion
    (102) opMatematicas -> . division
    (103) opMatematicas -> . exponenciacion
    (125) enteros -> . NUMBER
    (126) enteros -> . MINUS NUMBER
    (104) suma -> . VARIABLE PLUS NUMBER
    (105) suma -> . operadores PLUS operadores
    (106) suma -> . operadores PLUS opMatematicas
    (107) suma -> . operadores PLUS LPAR operadores RPAR
    (108) suma -> . operadores PLUS LPAR opMatematicas RPAR
    (109) resta -> . VARIABLE MINUS NUMBER
    (110) resta -> . operadores MINUS operadores
    (111) resta -> . operadores MINUS opMatematicas
    (112) resta -> . operadores MINUS LPAR operadores RPAR
    (113) resta -> . operadores MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> . operadores TIMES operadores
    (115) multiplicacion -> . operadores TIMES LPAR operadores RPAR
    (116) multiplicacion -> . operadores TIMES LPAR opMatematicas RPAR
    (117) division -> . operadores DIVIDE operadores
    (118) division -> . operadores DIVIDE LPAR operadores RPAR
    (119) division -> . operadores DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> . operadores EXPONENTIATION operadores
    (121) exponenciacion -> . LPAR operadores RPAR EXPONENTIATION operadores
    (122) exponenciacion -> . LPAR opMatematicas RPAR EXPONENTIATION operadores

    FLOAT           shift and go to state 192
    NUMBER          shift and go to state 193
    MINUS           shift and go to state 109
    VARIABLE        shift and go to state 194
    LPAR            shift and go to state 225

    operadores                     shift and go to state 143
    opMatematicas                  shift and go to state 144
    enteros                        shift and go to state 111
    suma                           shift and go to state 102
    resta                          shift and go to state 103
    multiplicacion                 shift and go to state 104
    division                       shift and go to state 105
    exponenciacion                 shift and go to state 106

state 226

    (108) suma -> operadores PLUS LPAR opMatematicas . RPAR
    (122) exponenciacion -> LPAR opMatematicas . RPAR EXPONENTIATION operadores

    RPAR            shift and go to state 250


state 227

    (112) resta -> operadores MINUS LPAR operadores . RPAR
    (121) exponenciacion -> LPAR operadores . RPAR EXPONENTIATION operadores
    (105) suma -> operadores . PLUS operadores
    (106) suma -> operadores . PLUS opMatematicas
    (107) suma -> operadores . PLUS LPAR operadores RPAR
    (108) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (110) resta -> operadores . MINUS operadores
    (111) resta -> operadores . MINUS opMatematicas
    (112) resta -> operadores . MINUS LPAR operadores RPAR
    (113) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> operadores . TIMES operadores
    (115) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (116) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (117) division -> operadores . DIVIDE operadores
    (118) division -> operadores . DIVIDE LPAR operadores RPAR
    (119) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 251
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    EXPONENTIATION  shift and go to state 158


state 228

    (113) resta -> operadores MINUS LPAR opMatematicas . RPAR
    (122) exponenciacion -> LPAR opMatematicas . RPAR EXPONENTIATION operadores

    RPAR            shift and go to state 252


state 229

    (115) multiplicacion -> operadores TIMES LPAR operadores . RPAR
    (105) suma -> operadores . PLUS operadores
    (106) suma -> operadores . PLUS opMatematicas
    (107) suma -> operadores . PLUS LPAR operadores RPAR
    (108) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (110) resta -> operadores . MINUS operadores
    (111) resta -> operadores . MINUS opMatematicas
    (112) resta -> operadores . MINUS LPAR operadores RPAR
    (113) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> operadores . TIMES operadores
    (115) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (116) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (117) division -> operadores . DIVIDE operadores
    (118) division -> operadores . DIVIDE LPAR operadores RPAR
    (119) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 253
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    EXPONENTIATION  shift and go to state 158


state 230

    (116) multiplicacion -> operadores TIMES LPAR opMatematicas . RPAR

    RPAR            shift and go to state 254


state 231

    (118) division -> operadores DIVIDE LPAR operadores . RPAR
    (105) suma -> operadores . PLUS operadores
    (106) suma -> operadores . PLUS opMatematicas
    (107) suma -> operadores . PLUS LPAR operadores RPAR
    (108) suma -> operadores . PLUS LPAR opMatematicas RPAR
    (110) resta -> operadores . MINUS operadores
    (111) resta -> operadores . MINUS opMatematicas
    (112) resta -> operadores . MINUS LPAR operadores RPAR
    (113) resta -> operadores . MINUS LPAR opMatematicas RPAR
    (114) multiplicacion -> operadores . TIMES operadores
    (115) multiplicacion -> operadores . TIMES LPAR operadores RPAR
    (116) multiplicacion -> operadores . TIMES LPAR opMatematicas RPAR
    (117) division -> operadores . DIVIDE operadores
    (118) division -> operadores . DIVIDE LPAR operadores RPAR
    (119) division -> operadores . DIVIDE LPAR opMatematicas RPAR
    (120) exponenciacion -> operadores . EXPONENTIATION operadores

    RPAR            shift and go to state 255
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    EXPONENTIATION  shift and go to state 158


state 232

    (119) division -> operadores DIVIDE LPAR opMatematicas . RPAR

    RPAR            shift and go to state 256


state 233

    (76) addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .
    (77) modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .

  ! reduce/reduce conflict for $end resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for IF resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for PUTS resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for FOR resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for LPAR resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    $end            reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    VARIABLE        reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    IF              reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    PUTS            reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    FOR             reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    WHILE           reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    TRUE            reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    FALSE           reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    NUMBER          reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    STRING          reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    FLOAT           reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    LPAR            reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    END             reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)
    RETURN          reduce using rule 76 (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .)

  ! $end            [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! VARIABLE        [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! IF              [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! PUTS            [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! FOR             [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! WHILE           [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! TRUE            [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! FALSE           [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! NUMBER          [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! STRING          [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! FLOAT           [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! LPAR            [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! END             [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]
  ! RETURN          [ reduce using rule 77 (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression .) ]


state 234

    (79) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR expression . RPAR

    RPAR            shift and go to state 257


state 235

    (80) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR RPAR .

    $end            reduce using rule 80 (metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR RPAR .)


state 236

    (78) deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .

    $end            reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    VARIABLE        reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    IF              reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    PUTS            reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    FOR             reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    WHILE           reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    TRUE            reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    FALSE           reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    NUMBER          reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    STRING          reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    FLOAT           reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    LPAR            reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    END             reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)
    RETURN          reduce using rule 78 (deleteValueHash -> VARIABLE POINT DELETE LPAR expression RPAR .)


state 237

    (90) insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .

    $end            reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    VARIABLE        reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    IF              reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    PUTS            reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    FOR             reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    WHILE           reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    TRUE            reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    FALSE           reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    NUMBER          reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    STRING          reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    FLOAT           reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    LPAR            reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    END             reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)
    RETURN          reduce using rule 90 (insertArray -> VARIABLE POINT INSERT LPAR argumentosA RPAR .)


state 238

    (89) argumentosA -> NUMBER COMMA . factor
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    factor                         shift and go to state 258

state 239

    (91) deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .

    $end            reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    VARIABLE        reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    IF              reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    PUTS            reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    FOR             reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    WHILE           reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    TRUE            reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    FALSE           reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    NUMBER          reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    STRING          reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    FLOAT           reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    LPAR            reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    END             reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)
    RETURN          reduce using rule 91 (deleteArray -> VARIABLE POINT DELETE_AT LPAR NUMBER RPAR .)


state 240

    (97) searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .

    $end            reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    VARIABLE        reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    IF              reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    PUTS            reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    FOR             reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    WHILE           reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    TRUE            reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    FALSE           reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    NUMBER          reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    STRING          reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    FLOAT           reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    LPAR            reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    END             reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)
    RETURN          reduce using rule 97 (searchStack -> VARIABLE POINT SEARCH LPAR factor RPAR .)


state 241

    (98) pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .

    $end            reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    VARIABLE        reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    IF              reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    PUTS            reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    FOR             reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    WHILE           reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    TRUE            reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    FALSE           reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    NUMBER          reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    STRING          reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    FLOAT           reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    LPAR            reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    END             reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)
    RETURN          reduce using rule 98 (pushStack -> VARIABLE POINT PUSH LPAR factor RPAR .)


state 242

    (137) condicional -> IF comparacion D_POINT repCuerpo END cond_else .

    $end            reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    VARIABLE        reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    IF              reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    PUTS            reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    FOR             reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    WHILE           reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    TRUE            reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    FALSE           reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    NUMBER          reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    STRING          reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    FLOAT           reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    LPAR            reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    END             reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)
    RETURN          reduce using rule 137 (condicional -> IF comparacion D_POINT repCuerpo END cond_else .)


state 243

    (138) cond_else -> ELSE . D_POINT repCuerpo END

    D_POINT         shift and go to state 259


state 244

    (81) while -> WHILE LPAR comparacion RPAR repCuerpo END .
    (82) while -> WHILE LPAR comparacion RPAR repCuerpo END . while
    (81) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END while

  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    VARIABLE        reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    IF              reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    PUTS            reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    FOR             reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    TRUE            reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    FALSE           reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    NUMBER          reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    STRING          reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    FLOAT           reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    LPAR            reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    END             reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    RETURN          reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .)
    WHILE           shift and go to state 26

  ! WHILE           [ reduce using rule 81 (while -> WHILE LPAR comparacion RPAR repCuerpo END .) ]

    while                          shift and go to state 260

state 245

    (92) for -> FOR VARIABLE IN NUMBER POINT POINT . NUMBER DO repCuerpo END
    (93) for -> FOR VARIABLE IN NUMBER POINT POINT . NUMBER DO repCuerpo END for

    NUMBER          shift and go to state 261


state 246

    (121) exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .

    $end            reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    VARIABLE        reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    IF              reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    PUTS            reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    FOR             reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    WHILE           reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    TRUE            reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    FALSE           reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    NUMBER          reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    STRING          reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    FLOAT           reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    LPAR            reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    END             reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    RETURN          reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)
    RPAR            reduce using rule 121 (exponenciacion -> LPAR operadores RPAR EXPONENTIATION operadores .)


state 247

    (122) exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .

    $end            reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    VARIABLE        reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    IF              reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    PUTS            reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    FOR             reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    WHILE           reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    TRUE            reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    FALSE           reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    NUMBER          reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    STRING          reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    FLOAT           reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    LPAR            reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    END             reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    RETURN          reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)
    RPAR            reduce using rule 122 (exponenciacion -> LPAR opMatematicas RPAR EXPONENTIATION operadores .)


state 248

    (73) cuerpoHash -> expression ASIGN GREATER expression .
    (74) cuerpoHash -> expression ASIGN GREATER expression . COMMA cuerpoHash

    RKEY            reduce using rule 73 (cuerpoHash -> expression ASIGN GREATER expression .)
    COMMA           shift and go to state 262


state 249

    (107) suma -> operadores PLUS LPAR operadores RPAR .
    (121) exponenciacion -> LPAR operadores RPAR . EXPONENTIATION operadores

    $end            reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    VARIABLE        reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    IF              reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    PUTS            reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    FOR             reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    WHILE           reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    TRUE            reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    FALSE           reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    NUMBER          reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    STRING          reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    FLOAT           reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    LPAR            reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    END             reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    RETURN          reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    RPAR            reduce using rule 107 (suma -> operadores PLUS LPAR operadores RPAR .)
    EXPONENTIATION  shift and go to state 218


state 250

    (108) suma -> operadores PLUS LPAR opMatematicas RPAR .
    (122) exponenciacion -> LPAR opMatematicas RPAR . EXPONENTIATION operadores

    $end            reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    VARIABLE        reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    IF              reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    PUTS            reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    FOR             reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    WHILE           reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    TRUE            reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    FALSE           reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    NUMBER          reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    STRING          reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    FLOAT           reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    LPAR            reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    END             reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    RETURN          reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    RPAR            reduce using rule 108 (suma -> operadores PLUS LPAR opMatematicas RPAR .)
    EXPONENTIATION  shift and go to state 219


state 251

    (112) resta -> operadores MINUS LPAR operadores RPAR .
    (121) exponenciacion -> LPAR operadores RPAR . EXPONENTIATION operadores

    $end            reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    VARIABLE        reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    IF              reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    PUTS            reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    FOR             reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    WHILE           reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    TRUE            reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    FALSE           reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    NUMBER          reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    STRING          reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    FLOAT           reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    LPAR            reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    END             reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    RETURN          reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    RPAR            reduce using rule 112 (resta -> operadores MINUS LPAR operadores RPAR .)
    EXPONENTIATION  shift and go to state 218


state 252

    (113) resta -> operadores MINUS LPAR opMatematicas RPAR .
    (122) exponenciacion -> LPAR opMatematicas RPAR . EXPONENTIATION operadores

    $end            reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    VARIABLE        reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    IF              reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    PUTS            reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    FOR             reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    WHILE           reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    TRUE            reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    FALSE           reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    NUMBER          reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    STRING          reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    FLOAT           reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    LPAR            reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    END             reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    RETURN          reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    RPAR            reduce using rule 113 (resta -> operadores MINUS LPAR opMatematicas RPAR .)
    EXPONENTIATION  shift and go to state 219


state 253

    (115) multiplicacion -> operadores TIMES LPAR operadores RPAR .

    $end            reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    VARIABLE        reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    IF              reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    PUTS            reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    FOR             reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    WHILE           reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    TRUE            reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    FALSE           reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    NUMBER          reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    STRING          reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    FLOAT           reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    LPAR            reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    END             reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    RETURN          reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)
    RPAR            reduce using rule 115 (multiplicacion -> operadores TIMES LPAR operadores RPAR .)


state 254

    (116) multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .

    $end            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    VARIABLE        reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    IF              reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    PUTS            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    FOR             reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    WHILE           reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    TRUE            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    FALSE           reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    NUMBER          reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    STRING          reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    FLOAT           reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    LPAR            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    END             reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    RETURN          reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)
    RPAR            reduce using rule 116 (multiplicacion -> operadores TIMES LPAR opMatematicas RPAR .)


state 255

    (118) division -> operadores DIVIDE LPAR operadores RPAR .

    $end            reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    VARIABLE        reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    IF              reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    PUTS            reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    FOR             reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    WHILE           reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    TRUE            reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    FALSE           reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    NUMBER          reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    STRING          reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    FLOAT           reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    LPAR            reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    END             reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    RETURN          reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)
    RPAR            reduce using rule 118 (division -> operadores DIVIDE LPAR operadores RPAR .)


state 256

    (119) division -> operadores DIVIDE LPAR opMatematicas RPAR .

    $end            reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    VARIABLE        reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    IF              reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    PUTS            reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    FOR             reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    WHILE           reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    TRUE            reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    FALSE           reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    NUMBER          reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    STRING          reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    FLOAT           reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    LPAR            reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    END             reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    RETURN          reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)
    RPAR            reduce using rule 119 (division -> operadores DIVIDE LPAR opMatematicas RPAR .)


state 257

    (79) metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR expression RPAR .

    $end            reduce using rule 79 (metodoBoleano -> VARIABLE POINT VARIABLE QUESTION LPAR expression RPAR .)


state 258

    (89) argumentosA -> NUMBER COMMA factor .

    RPAR            reduce using rule 89 (argumentosA -> NUMBER COMMA factor .)


state 259

    (138) cond_else -> ELSE D_POINT . repCuerpo END
    (83) repCuerpo -> . cuerpo
    (84) repCuerpo -> . cuerpo repCuerpo
    (19) cuerpo -> . asignacion
    (20) cuerpo -> . expression
    (21) cuerpo -> . comparacion
    (22) cuerpo -> . condicional
    (23) cuerpo -> . impresion
    (24) cuerpo -> . for
    (25) cuerpo -> . while
    (26) cuerpo -> . input
    (27) cuerpo -> . callFuncion
    (28) cuerpo -> . addValueHash
    (29) cuerpo -> . modValueHash
    (30) cuerpo -> . deleteValueHash
    (31) cuerpo -> . insertArray
    (32) cuerpo -> . deleteArray
    (33) cuerpo -> . pushStack
    (34) cuerpo -> . searchStack
    (35) asignacion -> . VARIABLE ASIGN expression
    (36) asignacion -> . VARIABLE ASIGN comparacion
    (37) asignacion -> . VARIABLE ASIGN callFuncion
    (38) asignacion -> . VARIABLE ASIGN diccionario
    (39) asignacion -> . VARIABLE ASIGN getValueHash
    (40) asignacion -> . VARIABLE ASIGN array
    (41) asignacion -> . VARIABLE ASIGN stack
    (42) asignacion -> . VARIABLE tipo_asignacion factor
    (43) asignacion -> . VARIABLE ASIGN opMatematicas
    (49) expression -> . term
    (50) expression -> . boleano
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (136) condicional -> . IF comparacion D_POINT repCuerpo END
    (137) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (68) impresion -> . PUTS factor
    (92) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (81) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (69) input -> . VARIABLE ASIGN GETS
    (134) callFuncion -> . VARIABLE LPAR RPAR
    (135) callFuncion -> . VARIABLE LPAR parametros RPAR
    (76) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (77) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (90) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (98) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (97) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 74
    IF              shift and go to state 25
    PUTS            shift and go to state 30
    FOR             shift and go to state 28
    WHILE           shift and go to state 26
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAR            shift and go to state 27

    repCuerpo                      shift and go to state 263
    cuerpo                         shift and go to state 58
    asignacion                     shift and go to state 59
    expression                     shift and go to state 57
    comparacion                    shift and go to state 60
    condicional                    shift and go to state 61
    impresion                      shift and go to state 62
    for                            shift and go to state 63
    while                          shift and go to state 64
    input                          shift and go to state 65
    callFuncion                    shift and go to state 66
    addValueHash                   shift and go to state 67
    modValueHash                   shift and go to state 68
    deleteValueHash                shift and go to state 69
    insertArray                    shift and go to state 70
    deleteArray                    shift and go to state 71
    pushStack                      shift and go to state 72
    searchStack                    shift and go to state 73
    factor                         shift and go to state 21
    term                           shift and go to state 22
    boleano                        shift and go to state 23

state 260

    (82) while -> WHILE LPAR comparacion RPAR repCuerpo END while .

    $end            reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    VARIABLE        reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    IF              reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    PUTS            reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    FOR             reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    WHILE           reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    TRUE            reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    FALSE           reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    NUMBER          reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    STRING          reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    FLOAT           reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    LPAR            reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    END             reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)
    RETURN          reduce using rule 82 (while -> WHILE LPAR comparacion RPAR repCuerpo END while .)


state 261

    (92) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER . DO repCuerpo END
    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER . DO repCuerpo END for

    DO              shift and go to state 264


state 262

    (74) cuerpoHash -> expression ASIGN GREATER expression COMMA . cuerpoHash
    (73) cuerpoHash -> . expression ASIGN GREATER expression
    (74) cuerpoHash -> . expression ASIGN GREATER expression COMMA cuerpoHash
    (49) expression -> . term
    (50) expression -> . boleano
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 77
    LPAR            shift and go to state 27

    expression                     shift and go to state 149
    cuerpoHash                     shift and go to state 265
    term                           shift and go to state 22
    boleano                        shift and go to state 23
    factor                         shift and go to state 21

state 263

    (138) cond_else -> ELSE D_POINT repCuerpo . END

    END             shift and go to state 266


state 264

    (92) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO . repCuerpo END
    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO . repCuerpo END for
    (83) repCuerpo -> . cuerpo
    (84) repCuerpo -> . cuerpo repCuerpo
    (19) cuerpo -> . asignacion
    (20) cuerpo -> . expression
    (21) cuerpo -> . comparacion
    (22) cuerpo -> . condicional
    (23) cuerpo -> . impresion
    (24) cuerpo -> . for
    (25) cuerpo -> . while
    (26) cuerpo -> . input
    (27) cuerpo -> . callFuncion
    (28) cuerpo -> . addValueHash
    (29) cuerpo -> . modValueHash
    (30) cuerpo -> . deleteValueHash
    (31) cuerpo -> . insertArray
    (32) cuerpo -> . deleteArray
    (33) cuerpo -> . pushStack
    (34) cuerpo -> . searchStack
    (35) asignacion -> . VARIABLE ASIGN expression
    (36) asignacion -> . VARIABLE ASIGN comparacion
    (37) asignacion -> . VARIABLE ASIGN callFuncion
    (38) asignacion -> . VARIABLE ASIGN diccionario
    (39) asignacion -> . VARIABLE ASIGN getValueHash
    (40) asignacion -> . VARIABLE ASIGN array
    (41) asignacion -> . VARIABLE ASIGN stack
    (42) asignacion -> . VARIABLE tipo_asignacion factor
    (43) asignacion -> . VARIABLE ASIGN opMatematicas
    (49) expression -> . term
    (50) expression -> . boleano
    (57) comparacion -> . expression comparador expression
    (58) comparacion -> . expression comparador expression AND comparacion
    (59) comparacion -> . expression comparador expression OR comparacion
    (60) comparacion -> . expression AND expression
    (61) comparacion -> . expression OR expression
    (136) condicional -> . IF comparacion D_POINT repCuerpo END
    (137) condicional -> . IF comparacion D_POINT repCuerpo END cond_else
    (68) impresion -> . PUTS factor
    (92) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for
    (81) while -> . WHILE LPAR comparacion RPAR repCuerpo END
    (82) while -> . WHILE LPAR comparacion RPAR repCuerpo END while
    (69) input -> . VARIABLE ASIGN GETS
    (134) callFuncion -> . VARIABLE LPAR RPAR
    (135) callFuncion -> . VARIABLE LPAR parametros RPAR
    (76) addValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (77) modValueHash -> . VARIABLE LCOR expression RCOR ASIGN expression
    (78) deleteValueHash -> . VARIABLE POINT DELETE LPAR expression RPAR
    (90) insertArray -> . VARIABLE POINT INSERT LPAR argumentosA RPAR
    (91) deleteArray -> . VARIABLE POINT DELETE_AT LPAR NUMBER RPAR
    (98) pushStack -> . VARIABLE POINT PUSH LPAR factor RPAR
    (97) searchStack -> . VARIABLE POINT SEARCH LPAR factor RPAR
    (51) term -> . factor
    (70) boleano -> . TRUE
    (71) boleano -> . FALSE
    (52) factor -> . NUMBER
    (53) factor -> . STRING
    (54) factor -> . FLOAT
    (55) factor -> . VARIABLE
    (56) factor -> . LPAR expression RPAR

    VARIABLE        shift and go to state 74
    IF              shift and go to state 25
    PUTS            shift and go to state 30
    FOR             shift and go to state 28
    WHILE           shift and go to state 26
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    NUMBER          shift and go to state 29
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAR            shift and go to state 27

    repCuerpo                      shift and go to state 267
    for                            shift and go to state 63
    cuerpo                         shift and go to state 58
    asignacion                     shift and go to state 59
    expression                     shift and go to state 57
    comparacion                    shift and go to state 60
    condicional                    shift and go to state 61
    impresion                      shift and go to state 62
    while                          shift and go to state 64
    input                          shift and go to state 65
    callFuncion                    shift and go to state 66
    addValueHash                   shift and go to state 67
    modValueHash                   shift and go to state 68
    deleteValueHash                shift and go to state 69
    insertArray                    shift and go to state 70
    deleteArray                    shift and go to state 71
    pushStack                      shift and go to state 72
    searchStack                    shift and go to state 73
    factor                         shift and go to state 21
    term                           shift and go to state 22
    boleano                        shift and go to state 23

state 265

    (74) cuerpoHash -> expression ASIGN GREATER expression COMMA cuerpoHash .

    RKEY            reduce using rule 74 (cuerpoHash -> expression ASIGN GREATER expression COMMA cuerpoHash .)


state 266

    (138) cond_else -> ELSE D_POINT repCuerpo END .

    $end            reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    VARIABLE        reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    IF              reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    PUTS            reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    FOR             reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    WHILE           reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    TRUE            reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    FALSE           reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    NUMBER          reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    STRING          reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    FLOAT           reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    LPAR            reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    END             reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)
    RETURN          reduce using rule 138 (cond_else -> ELSE D_POINT repCuerpo END .)


state 267

    (92) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo . END
    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo . END for

    END             shift and go to state 268


state 268

    (92) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .
    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END . for
    (92) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END
    (93) for -> . FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for

  ! shift/reduce conflict for FOR resolved as shift
    $end            reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    VARIABLE        reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    IF              reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    PUTS            reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    WHILE           reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    TRUE            reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    FALSE           reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    NUMBER          reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    STRING          reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    FLOAT           reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    LPAR            reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    END             reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    RETURN          reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .)
    FOR             shift and go to state 28

  ! FOR             [ reduce using rule 92 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END .) ]

    for                            shift and go to state 269

state 269

    (93) for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .

    $end            reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    VARIABLE        reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    IF              reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    PUTS            reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    FOR             reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    WHILE           reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    TRUE            reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    FALSE           reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    NUMBER          reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    STRING          reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    FLOAT           reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    LPAR            reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    END             reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)
    RETURN          reduce using rule 93 (for -> FOR VARIABLE IN NUMBER POINT POINT NUMBER DO repCuerpo END for .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASIGN in state 20 resolved as shift
WARNING: shift/reduce conflict for ASIGN in state 74 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 74 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 244 resolved as shift
WARNING: shift/reduce conflict for FOR in state 268 resolved as shift
WARNING: reduce/reduce conflict in state 145 resolved using rule (factor -> FLOAT)
WARNING: rejected rule (operadores -> FLOAT) in state 145
WARNING: reduce/reduce conflict in state 146 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (enteros -> NUMBER) in state 146
WARNING: reduce/reduce conflict in state 233 resolved using rule (addValueHash -> VARIABLE LCOR expression RCOR ASIGN expression)
WARNING: rejected rule (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression) in state 233
WARNING: Rule (modValueHash -> VARIABLE LCOR expression RCOR ASIGN expression) is never reduced
